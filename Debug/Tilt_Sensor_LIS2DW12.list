
Tilt_Sensor_LIS2DW12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800aed8  0800aed8  0001aed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4cc  0800b4cc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4cc  0800b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4d4  0800b4d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4d4  0800b4d4  0001b4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200001e0  0800b6bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800b6bc  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012866  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fb  00000000  00000000  00032a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00035370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00036170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a9c  00000000  00000000  00036e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120a2  00000000  00000000  0004d904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865ac  00000000  00000000  0005f9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5f52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  000e5fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aebc 	.word	0x0800aebc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800aebc 	.word	0x0800aebc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff25 	bl	800228c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe6f 	bl	8002130 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff17 	bl	800228c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ff0d 	bl	800228c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe91 	bl	80021a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe87 	bl	80021a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	1c08      	adds	r0, r1, #0
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc63 	bl	8000d7c <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbe7 	bl	8000c94 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc55 	bl	8000d7c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc4b 	bl	8000d7c <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbf5 	bl	8000ce4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fbeb 	bl	8000ce4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	1c08      	adds	r0, r1, #0
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f82e 	bl	80005ac <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	0415      	lsls	r5, r2, #16
 8000560:	0c2d      	lsrs	r5, r5, #16
 8000562:	000f      	movs	r7, r1
 8000564:	0001      	movs	r1, r0
 8000566:	002e      	movs	r6, r5
 8000568:	46c6      	mov	lr, r8
 800056a:	4684      	mov	ip, r0
 800056c:	0400      	lsls	r0, r0, #16
 800056e:	0c14      	lsrs	r4, r2, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	0c09      	lsrs	r1, r1, #16
 8000574:	4346      	muls	r6, r0
 8000576:	434d      	muls	r5, r1
 8000578:	4360      	muls	r0, r4
 800057a:	4361      	muls	r1, r4
 800057c:	1940      	adds	r0, r0, r5
 800057e:	0c34      	lsrs	r4, r6, #16
 8000580:	1824      	adds	r4, r4, r0
 8000582:	b500      	push	{lr}
 8000584:	42a5      	cmp	r5, r4
 8000586:	d903      	bls.n	8000590 <__aeabi_lmul+0x34>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	0240      	lsls	r0, r0, #9
 800058c:	4680      	mov	r8, r0
 800058e:	4441      	add	r1, r8
 8000590:	0c25      	lsrs	r5, r4, #16
 8000592:	186d      	adds	r5, r5, r1
 8000594:	4661      	mov	r1, ip
 8000596:	4359      	muls	r1, r3
 8000598:	437a      	muls	r2, r7
 800059a:	0430      	lsls	r0, r6, #16
 800059c:	1949      	adds	r1, r1, r5
 800059e:	0424      	lsls	r4, r4, #16
 80005a0:	0c00      	lsrs	r0, r0, #16
 80005a2:	1820      	adds	r0, r4, r0
 80005a4:	1889      	adds	r1, r1, r2
 80005a6:	bc80      	pop	{r7}
 80005a8:	46b8      	mov	r8, r7
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005ac <__udivmoddi4>:
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	4657      	mov	r7, sl
 80005b0:	464e      	mov	r6, r9
 80005b2:	4645      	mov	r5, r8
 80005b4:	46de      	mov	lr, fp
 80005b6:	b5e0      	push	{r5, r6, r7, lr}
 80005b8:	0004      	movs	r4, r0
 80005ba:	000d      	movs	r5, r1
 80005bc:	4692      	mov	sl, r2
 80005be:	4699      	mov	r9, r3
 80005c0:	b083      	sub	sp, #12
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d830      	bhi.n	8000628 <__udivmoddi4+0x7c>
 80005c6:	d02d      	beq.n	8000624 <__udivmoddi4+0x78>
 80005c8:	4649      	mov	r1, r9
 80005ca:	4650      	mov	r0, sl
 80005cc:	f002 fe64 	bl	8003298 <__clzdi2>
 80005d0:	0029      	movs	r1, r5
 80005d2:	0006      	movs	r6, r0
 80005d4:	0020      	movs	r0, r4
 80005d6:	f002 fe5f 	bl	8003298 <__clzdi2>
 80005da:	1a33      	subs	r3, r6, r0
 80005dc:	4698      	mov	r8, r3
 80005de:	3b20      	subs	r3, #32
 80005e0:	469b      	mov	fp, r3
 80005e2:	d433      	bmi.n	800064c <__udivmoddi4+0xa0>
 80005e4:	465a      	mov	r2, fp
 80005e6:	4653      	mov	r3, sl
 80005e8:	4093      	lsls	r3, r2
 80005ea:	4642      	mov	r2, r8
 80005ec:	001f      	movs	r7, r3
 80005ee:	4653      	mov	r3, sl
 80005f0:	4093      	lsls	r3, r2
 80005f2:	001e      	movs	r6, r3
 80005f4:	42af      	cmp	r7, r5
 80005f6:	d83a      	bhi.n	800066e <__udivmoddi4+0xc2>
 80005f8:	42af      	cmp	r7, r5
 80005fa:	d100      	bne.n	80005fe <__udivmoddi4+0x52>
 80005fc:	e078      	b.n	80006f0 <__udivmoddi4+0x144>
 80005fe:	465b      	mov	r3, fp
 8000600:	1ba4      	subs	r4, r4, r6
 8000602:	41bd      	sbcs	r5, r7
 8000604:	2b00      	cmp	r3, #0
 8000606:	da00      	bge.n	800060a <__udivmoddi4+0x5e>
 8000608:	e075      	b.n	80006f6 <__udivmoddi4+0x14a>
 800060a:	2200      	movs	r2, #0
 800060c:	2300      	movs	r3, #0
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2301      	movs	r3, #1
 8000614:	465a      	mov	r2, fp
 8000616:	4093      	lsls	r3, r2
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2301      	movs	r3, #1
 800061c:	4642      	mov	r2, r8
 800061e:	4093      	lsls	r3, r2
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	e028      	b.n	8000676 <__udivmoddi4+0xca>
 8000624:	4282      	cmp	r2, r0
 8000626:	d9cf      	bls.n	80005c8 <__udivmoddi4+0x1c>
 8000628:	2200      	movs	r2, #0
 800062a:	2300      	movs	r3, #0
 800062c:	9200      	str	r2, [sp, #0]
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <__udivmoddi4+0x8e>
 8000636:	601c      	str	r4, [r3, #0]
 8000638:	605d      	str	r5, [r3, #4]
 800063a:	9800      	ldr	r0, [sp, #0]
 800063c:	9901      	ldr	r1, [sp, #4]
 800063e:	b003      	add	sp, #12
 8000640:	bcf0      	pop	{r4, r5, r6, r7}
 8000642:	46bb      	mov	fp, r7
 8000644:	46b2      	mov	sl, r6
 8000646:	46a9      	mov	r9, r5
 8000648:	46a0      	mov	r8, r4
 800064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	4652      	mov	r2, sl
 8000654:	40da      	lsrs	r2, r3
 8000656:	4641      	mov	r1, r8
 8000658:	0013      	movs	r3, r2
 800065a:	464a      	mov	r2, r9
 800065c:	408a      	lsls	r2, r1
 800065e:	0017      	movs	r7, r2
 8000660:	4642      	mov	r2, r8
 8000662:	431f      	orrs	r7, r3
 8000664:	4653      	mov	r3, sl
 8000666:	4093      	lsls	r3, r2
 8000668:	001e      	movs	r6, r3
 800066a:	42af      	cmp	r7, r5
 800066c:	d9c4      	bls.n	80005f8 <__udivmoddi4+0x4c>
 800066e:	2200      	movs	r2, #0
 8000670:	2300      	movs	r3, #0
 8000672:	9200      	str	r2, [sp, #0]
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	4643      	mov	r3, r8
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0d9      	beq.n	8000630 <__udivmoddi4+0x84>
 800067c:	07fb      	lsls	r3, r7, #31
 800067e:	0872      	lsrs	r2, r6, #1
 8000680:	431a      	orrs	r2, r3
 8000682:	4646      	mov	r6, r8
 8000684:	087b      	lsrs	r3, r7, #1
 8000686:	e00e      	b.n	80006a6 <__udivmoddi4+0xfa>
 8000688:	42ab      	cmp	r3, r5
 800068a:	d101      	bne.n	8000690 <__udivmoddi4+0xe4>
 800068c:	42a2      	cmp	r2, r4
 800068e:	d80c      	bhi.n	80006aa <__udivmoddi4+0xfe>
 8000690:	1aa4      	subs	r4, r4, r2
 8000692:	419d      	sbcs	r5, r3
 8000694:	2001      	movs	r0, #1
 8000696:	1924      	adds	r4, r4, r4
 8000698:	416d      	adcs	r5, r5
 800069a:	2100      	movs	r1, #0
 800069c:	3e01      	subs	r6, #1
 800069e:	1824      	adds	r4, r4, r0
 80006a0:	414d      	adcs	r5, r1
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d006      	beq.n	80006b4 <__udivmoddi4+0x108>
 80006a6:	42ab      	cmp	r3, r5
 80006a8:	d9ee      	bls.n	8000688 <__udivmoddi4+0xdc>
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1924      	adds	r4, r4, r4
 80006ae:	416d      	adcs	r5, r5
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d1f8      	bne.n	80006a6 <__udivmoddi4+0xfa>
 80006b4:	9800      	ldr	r0, [sp, #0]
 80006b6:	9901      	ldr	r1, [sp, #4]
 80006b8:	465b      	mov	r3, fp
 80006ba:	1900      	adds	r0, r0, r4
 80006bc:	4169      	adcs	r1, r5
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db24      	blt.n	800070c <__udivmoddi4+0x160>
 80006c2:	002b      	movs	r3, r5
 80006c4:	465a      	mov	r2, fp
 80006c6:	4644      	mov	r4, r8
 80006c8:	40d3      	lsrs	r3, r2
 80006ca:	002a      	movs	r2, r5
 80006cc:	40e2      	lsrs	r2, r4
 80006ce:	001c      	movs	r4, r3
 80006d0:	465b      	mov	r3, fp
 80006d2:	0015      	movs	r5, r2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db2a      	blt.n	800072e <__udivmoddi4+0x182>
 80006d8:	0026      	movs	r6, r4
 80006da:	409e      	lsls	r6, r3
 80006dc:	0033      	movs	r3, r6
 80006de:	0026      	movs	r6, r4
 80006e0:	4647      	mov	r7, r8
 80006e2:	40be      	lsls	r6, r7
 80006e4:	0032      	movs	r2, r6
 80006e6:	1a80      	subs	r0, r0, r2
 80006e8:	4199      	sbcs	r1, r3
 80006ea:	9000      	str	r0, [sp, #0]
 80006ec:	9101      	str	r1, [sp, #4]
 80006ee:	e79f      	b.n	8000630 <__udivmoddi4+0x84>
 80006f0:	42a3      	cmp	r3, r4
 80006f2:	d8bc      	bhi.n	800066e <__udivmoddi4+0xc2>
 80006f4:	e783      	b.n	80005fe <__udivmoddi4+0x52>
 80006f6:	4642      	mov	r2, r8
 80006f8:	2320      	movs	r3, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	1a9b      	subs	r3, r3, r2
 80006fe:	2200      	movs	r2, #0
 8000700:	9100      	str	r1, [sp, #0]
 8000702:	9201      	str	r2, [sp, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	40da      	lsrs	r2, r3
 8000708:	9201      	str	r2, [sp, #4]
 800070a:	e786      	b.n	800061a <__udivmoddi4+0x6e>
 800070c:	4642      	mov	r2, r8
 800070e:	2320      	movs	r3, #32
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	002a      	movs	r2, r5
 8000714:	4646      	mov	r6, r8
 8000716:	409a      	lsls	r2, r3
 8000718:	0023      	movs	r3, r4
 800071a:	40f3      	lsrs	r3, r6
 800071c:	4644      	mov	r4, r8
 800071e:	4313      	orrs	r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	40e2      	lsrs	r2, r4
 8000724:	001c      	movs	r4, r3
 8000726:	465b      	mov	r3, fp
 8000728:	0015      	movs	r5, r2
 800072a:	2b00      	cmp	r3, #0
 800072c:	dad4      	bge.n	80006d8 <__udivmoddi4+0x12c>
 800072e:	4642      	mov	r2, r8
 8000730:	002f      	movs	r7, r5
 8000732:	2320      	movs	r3, #32
 8000734:	0026      	movs	r6, r4
 8000736:	4097      	lsls	r7, r2
 8000738:	1a9b      	subs	r3, r3, r2
 800073a:	40de      	lsrs	r6, r3
 800073c:	003b      	movs	r3, r7
 800073e:	4333      	orrs	r3, r6
 8000740:	e7cd      	b.n	80006de <__udivmoddi4+0x132>
 8000742:	46c0      	nop			; (mov r8, r8)

08000744 <__aeabi_fadd>:
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	4646      	mov	r6, r8
 8000748:	46d6      	mov	lr, sl
 800074a:	464f      	mov	r7, r9
 800074c:	024d      	lsls	r5, r1, #9
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	b5c0      	push	{r6, r7, lr}
 8000752:	0a52      	lsrs	r2, r2, #9
 8000754:	0a6e      	lsrs	r6, r5, #9
 8000756:	0047      	lsls	r7, r0, #1
 8000758:	46b0      	mov	r8, r6
 800075a:	0e3f      	lsrs	r7, r7, #24
 800075c:	004e      	lsls	r6, r1, #1
 800075e:	0fc4      	lsrs	r4, r0, #31
 8000760:	00d0      	lsls	r0, r2, #3
 8000762:	4694      	mov	ip, r2
 8000764:	003b      	movs	r3, r7
 8000766:	4682      	mov	sl, r0
 8000768:	0e36      	lsrs	r6, r6, #24
 800076a:	0fc9      	lsrs	r1, r1, #31
 800076c:	09ad      	lsrs	r5, r5, #6
 800076e:	428c      	cmp	r4, r1
 8000770:	d06d      	beq.n	800084e <__aeabi_fadd+0x10a>
 8000772:	1bb8      	subs	r0, r7, r6
 8000774:	4681      	mov	r9, r0
 8000776:	2800      	cmp	r0, #0
 8000778:	dd4d      	ble.n	8000816 <__aeabi_fadd+0xd2>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_fadd+0x3c>
 800077e:	e088      	b.n	8000892 <__aeabi_fadd+0x14e>
 8000780:	2fff      	cmp	r7, #255	; 0xff
 8000782:	d05a      	beq.n	800083a <__aeabi_fadd+0xf6>
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	04db      	lsls	r3, r3, #19
 8000788:	431d      	orrs	r5, r3
 800078a:	464b      	mov	r3, r9
 800078c:	2201      	movs	r2, #1
 800078e:	2b1b      	cmp	r3, #27
 8000790:	dc0a      	bgt.n	80007a8 <__aeabi_fadd+0x64>
 8000792:	002b      	movs	r3, r5
 8000794:	464a      	mov	r2, r9
 8000796:	4649      	mov	r1, r9
 8000798:	40d3      	lsrs	r3, r2
 800079a:	2220      	movs	r2, #32
 800079c:	1a52      	subs	r2, r2, r1
 800079e:	4095      	lsls	r5, r2
 80007a0:	002a      	movs	r2, r5
 80007a2:	1e55      	subs	r5, r2, #1
 80007a4:	41aa      	sbcs	r2, r5
 80007a6:	431a      	orrs	r2, r3
 80007a8:	4653      	mov	r3, sl
 80007aa:	1a9a      	subs	r2, r3, r2
 80007ac:	0153      	lsls	r3, r2, #5
 80007ae:	d400      	bmi.n	80007b2 <__aeabi_fadd+0x6e>
 80007b0:	e0b9      	b.n	8000926 <__aeabi_fadd+0x1e2>
 80007b2:	0192      	lsls	r2, r2, #6
 80007b4:	0996      	lsrs	r6, r2, #6
 80007b6:	0030      	movs	r0, r6
 80007b8:	f002 fd50 	bl	800325c <__clzsi2>
 80007bc:	3805      	subs	r0, #5
 80007be:	4086      	lsls	r6, r0
 80007c0:	4287      	cmp	r7, r0
 80007c2:	dd00      	ble.n	80007c6 <__aeabi_fadd+0x82>
 80007c4:	e0d4      	b.n	8000970 <__aeabi_fadd+0x22c>
 80007c6:	0033      	movs	r3, r6
 80007c8:	1bc7      	subs	r7, r0, r7
 80007ca:	2020      	movs	r0, #32
 80007cc:	3701      	adds	r7, #1
 80007ce:	40fb      	lsrs	r3, r7
 80007d0:	1bc7      	subs	r7, r0, r7
 80007d2:	40be      	lsls	r6, r7
 80007d4:	0032      	movs	r2, r6
 80007d6:	1e56      	subs	r6, r2, #1
 80007d8:	41b2      	sbcs	r2, r6
 80007da:	2700      	movs	r7, #0
 80007dc:	431a      	orrs	r2, r3
 80007de:	0753      	lsls	r3, r2, #29
 80007e0:	d004      	beq.n	80007ec <__aeabi_fadd+0xa8>
 80007e2:	230f      	movs	r3, #15
 80007e4:	4013      	ands	r3, r2
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d000      	beq.n	80007ec <__aeabi_fadd+0xa8>
 80007ea:	3204      	adds	r2, #4
 80007ec:	0153      	lsls	r3, r2, #5
 80007ee:	d400      	bmi.n	80007f2 <__aeabi_fadd+0xae>
 80007f0:	e09c      	b.n	800092c <__aeabi_fadd+0x1e8>
 80007f2:	1c7b      	adds	r3, r7, #1
 80007f4:	2ffe      	cmp	r7, #254	; 0xfe
 80007f6:	d100      	bne.n	80007fa <__aeabi_fadd+0xb6>
 80007f8:	e09a      	b.n	8000930 <__aeabi_fadd+0x1ec>
 80007fa:	0192      	lsls	r2, r2, #6
 80007fc:	0a52      	lsrs	r2, r2, #9
 80007fe:	4694      	mov	ip, r2
 8000800:	b2db      	uxtb	r3, r3
 8000802:	05d8      	lsls	r0, r3, #23
 8000804:	4663      	mov	r3, ip
 8000806:	07e4      	lsls	r4, r4, #31
 8000808:	4318      	orrs	r0, r3
 800080a:	4320      	orrs	r0, r4
 800080c:	bce0      	pop	{r5, r6, r7}
 800080e:	46ba      	mov	sl, r7
 8000810:	46b1      	mov	r9, r6
 8000812:	46a8      	mov	r8, r5
 8000814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000816:	2800      	cmp	r0, #0
 8000818:	d049      	beq.n	80008ae <__aeabi_fadd+0x16a>
 800081a:	1bf3      	subs	r3, r6, r7
 800081c:	2f00      	cmp	r7, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0xde>
 8000820:	e0b6      	b.n	8000990 <__aeabi_fadd+0x24c>
 8000822:	4652      	mov	r2, sl
 8000824:	2a00      	cmp	r2, #0
 8000826:	d060      	beq.n	80008ea <__aeabi_fadd+0x1a6>
 8000828:	3b01      	subs	r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fadd+0xec>
 800082e:	e0fc      	b.n	8000a2a <__aeabi_fadd+0x2e6>
 8000830:	2eff      	cmp	r6, #255	; 0xff
 8000832:	d000      	beq.n	8000836 <__aeabi_fadd+0xf2>
 8000834:	e0b4      	b.n	80009a0 <__aeabi_fadd+0x25c>
 8000836:	000c      	movs	r4, r1
 8000838:	4642      	mov	r2, r8
 800083a:	2a00      	cmp	r2, #0
 800083c:	d078      	beq.n	8000930 <__aeabi_fadd+0x1ec>
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	03c0      	lsls	r0, r0, #15
 8000842:	4310      	orrs	r0, r2
 8000844:	0242      	lsls	r2, r0, #9
 8000846:	0a53      	lsrs	r3, r2, #9
 8000848:	469c      	mov	ip, r3
 800084a:	23ff      	movs	r3, #255	; 0xff
 800084c:	e7d9      	b.n	8000802 <__aeabi_fadd+0xbe>
 800084e:	1bb9      	subs	r1, r7, r6
 8000850:	2900      	cmp	r1, #0
 8000852:	dd71      	ble.n	8000938 <__aeabi_fadd+0x1f4>
 8000854:	2e00      	cmp	r6, #0
 8000856:	d03f      	beq.n	80008d8 <__aeabi_fadd+0x194>
 8000858:	2fff      	cmp	r7, #255	; 0xff
 800085a:	d0ee      	beq.n	800083a <__aeabi_fadd+0xf6>
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	04db      	lsls	r3, r3, #19
 8000860:	431d      	orrs	r5, r3
 8000862:	2201      	movs	r2, #1
 8000864:	291b      	cmp	r1, #27
 8000866:	dc07      	bgt.n	8000878 <__aeabi_fadd+0x134>
 8000868:	002a      	movs	r2, r5
 800086a:	2320      	movs	r3, #32
 800086c:	40ca      	lsrs	r2, r1
 800086e:	1a59      	subs	r1, r3, r1
 8000870:	408d      	lsls	r5, r1
 8000872:	1e6b      	subs	r3, r5, #1
 8000874:	419d      	sbcs	r5, r3
 8000876:	432a      	orrs	r2, r5
 8000878:	4452      	add	r2, sl
 800087a:	0153      	lsls	r3, r2, #5
 800087c:	d553      	bpl.n	8000926 <__aeabi_fadd+0x1e2>
 800087e:	3701      	adds	r7, #1
 8000880:	2fff      	cmp	r7, #255	; 0xff
 8000882:	d055      	beq.n	8000930 <__aeabi_fadd+0x1ec>
 8000884:	2301      	movs	r3, #1
 8000886:	497b      	ldr	r1, [pc, #492]	; (8000a74 <__aeabi_fadd+0x330>)
 8000888:	4013      	ands	r3, r2
 800088a:	0852      	lsrs	r2, r2, #1
 800088c:	400a      	ands	r2, r1
 800088e:	431a      	orrs	r2, r3
 8000890:	e7a5      	b.n	80007de <__aeabi_fadd+0x9a>
 8000892:	2d00      	cmp	r5, #0
 8000894:	d02c      	beq.n	80008f0 <__aeabi_fadd+0x1ac>
 8000896:	2301      	movs	r3, #1
 8000898:	425b      	negs	r3, r3
 800089a:	469c      	mov	ip, r3
 800089c:	44e1      	add	r9, ip
 800089e:	464b      	mov	r3, r9
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fadd+0x162>
 80008a4:	e0ad      	b.n	8000a02 <__aeabi_fadd+0x2be>
 80008a6:	2fff      	cmp	r7, #255	; 0xff
 80008a8:	d000      	beq.n	80008ac <__aeabi_fadd+0x168>
 80008aa:	e76e      	b.n	800078a <__aeabi_fadd+0x46>
 80008ac:	e7c5      	b.n	800083a <__aeabi_fadd+0xf6>
 80008ae:	20fe      	movs	r0, #254	; 0xfe
 80008b0:	1c7e      	adds	r6, r7, #1
 80008b2:	4230      	tst	r0, r6
 80008b4:	d160      	bne.n	8000978 <__aeabi_fadd+0x234>
 80008b6:	2f00      	cmp	r7, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x178>
 80008ba:	e093      	b.n	80009e4 <__aeabi_fadd+0x2a0>
 80008bc:	4652      	mov	r2, sl
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fadd+0x180>
 80008c2:	e0b6      	b.n	8000a32 <__aeabi_fadd+0x2ee>
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d09c      	beq.n	8000802 <__aeabi_fadd+0xbe>
 80008c8:	1b52      	subs	r2, r2, r5
 80008ca:	0150      	lsls	r0, r2, #5
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_fadd+0x18c>
 80008ce:	e0c3      	b.n	8000a58 <__aeabi_fadd+0x314>
 80008d0:	4653      	mov	r3, sl
 80008d2:	000c      	movs	r4, r1
 80008d4:	1aea      	subs	r2, r5, r3
 80008d6:	e782      	b.n	80007de <__aeabi_fadd+0x9a>
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d009      	beq.n	80008f0 <__aeabi_fadd+0x1ac>
 80008dc:	3901      	subs	r1, #1
 80008de:	2900      	cmp	r1, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fadd+0x1a0>
 80008e2:	e08b      	b.n	80009fc <__aeabi_fadd+0x2b8>
 80008e4:	2fff      	cmp	r7, #255	; 0xff
 80008e6:	d1bc      	bne.n	8000862 <__aeabi_fadd+0x11e>
 80008e8:	e7a7      	b.n	800083a <__aeabi_fadd+0xf6>
 80008ea:	000c      	movs	r4, r1
 80008ec:	4642      	mov	r2, r8
 80008ee:	0037      	movs	r7, r6
 80008f0:	2fff      	cmp	r7, #255	; 0xff
 80008f2:	d0a2      	beq.n	800083a <__aeabi_fadd+0xf6>
 80008f4:	0252      	lsls	r2, r2, #9
 80008f6:	0a53      	lsrs	r3, r2, #9
 80008f8:	469c      	mov	ip, r3
 80008fa:	b2fb      	uxtb	r3, r7
 80008fc:	e781      	b.n	8000802 <__aeabi_fadd+0xbe>
 80008fe:	21fe      	movs	r1, #254	; 0xfe
 8000900:	3701      	adds	r7, #1
 8000902:	4239      	tst	r1, r7
 8000904:	d165      	bne.n	80009d2 <__aeabi_fadd+0x28e>
 8000906:	2b00      	cmp	r3, #0
 8000908:	d17e      	bne.n	8000a08 <__aeabi_fadd+0x2c4>
 800090a:	2800      	cmp	r0, #0
 800090c:	d100      	bne.n	8000910 <__aeabi_fadd+0x1cc>
 800090e:	e0aa      	b.n	8000a66 <__aeabi_fadd+0x322>
 8000910:	2d00      	cmp	r5, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x1d2>
 8000914:	e775      	b.n	8000802 <__aeabi_fadd+0xbe>
 8000916:	002a      	movs	r2, r5
 8000918:	4452      	add	r2, sl
 800091a:	2700      	movs	r7, #0
 800091c:	0153      	lsls	r3, r2, #5
 800091e:	d502      	bpl.n	8000926 <__aeabi_fadd+0x1e2>
 8000920:	4b55      	ldr	r3, [pc, #340]	; (8000a78 <__aeabi_fadd+0x334>)
 8000922:	3701      	adds	r7, #1
 8000924:	401a      	ands	r2, r3
 8000926:	0753      	lsls	r3, r2, #29
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x1e8>
 800092a:	e75a      	b.n	80007e2 <__aeabi_fadd+0x9e>
 800092c:	08d2      	lsrs	r2, r2, #3
 800092e:	e7df      	b.n	80008f0 <__aeabi_fadd+0x1ac>
 8000930:	2200      	movs	r2, #0
 8000932:	23ff      	movs	r3, #255	; 0xff
 8000934:	4694      	mov	ip, r2
 8000936:	e764      	b.n	8000802 <__aeabi_fadd+0xbe>
 8000938:	2900      	cmp	r1, #0
 800093a:	d0e0      	beq.n	80008fe <__aeabi_fadd+0x1ba>
 800093c:	1bf3      	subs	r3, r6, r7
 800093e:	2f00      	cmp	r7, #0
 8000940:	d03e      	beq.n	80009c0 <__aeabi_fadd+0x27c>
 8000942:	2eff      	cmp	r6, #255	; 0xff
 8000944:	d100      	bne.n	8000948 <__aeabi_fadd+0x204>
 8000946:	e777      	b.n	8000838 <__aeabi_fadd+0xf4>
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	0001      	movs	r1, r0
 800094c:	04d2      	lsls	r2, r2, #19
 800094e:	4311      	orrs	r1, r2
 8000950:	468a      	mov	sl, r1
 8000952:	2201      	movs	r2, #1
 8000954:	2b1b      	cmp	r3, #27
 8000956:	dc08      	bgt.n	800096a <__aeabi_fadd+0x226>
 8000958:	4652      	mov	r2, sl
 800095a:	2120      	movs	r1, #32
 800095c:	4650      	mov	r0, sl
 800095e:	40da      	lsrs	r2, r3
 8000960:	1acb      	subs	r3, r1, r3
 8000962:	4098      	lsls	r0, r3
 8000964:	1e43      	subs	r3, r0, #1
 8000966:	4198      	sbcs	r0, r3
 8000968:	4302      	orrs	r2, r0
 800096a:	0037      	movs	r7, r6
 800096c:	1952      	adds	r2, r2, r5
 800096e:	e784      	b.n	800087a <__aeabi_fadd+0x136>
 8000970:	4a41      	ldr	r2, [pc, #260]	; (8000a78 <__aeabi_fadd+0x334>)
 8000972:	1a3f      	subs	r7, r7, r0
 8000974:	4032      	ands	r2, r6
 8000976:	e732      	b.n	80007de <__aeabi_fadd+0x9a>
 8000978:	4653      	mov	r3, sl
 800097a:	1b5e      	subs	r6, r3, r5
 800097c:	0173      	lsls	r3, r6, #5
 800097e:	d42d      	bmi.n	80009dc <__aeabi_fadd+0x298>
 8000980:	2e00      	cmp	r6, #0
 8000982:	d000      	beq.n	8000986 <__aeabi_fadd+0x242>
 8000984:	e717      	b.n	80007b6 <__aeabi_fadd+0x72>
 8000986:	2200      	movs	r2, #0
 8000988:	2400      	movs	r4, #0
 800098a:	2300      	movs	r3, #0
 800098c:	4694      	mov	ip, r2
 800098e:	e738      	b.n	8000802 <__aeabi_fadd+0xbe>
 8000990:	2eff      	cmp	r6, #255	; 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fadd+0x252>
 8000994:	e74f      	b.n	8000836 <__aeabi_fadd+0xf2>
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	4650      	mov	r0, sl
 800099a:	04d2      	lsls	r2, r2, #19
 800099c:	4310      	orrs	r0, r2
 800099e:	4682      	mov	sl, r0
 80009a0:	2201      	movs	r2, #1
 80009a2:	2b1b      	cmp	r3, #27
 80009a4:	dc08      	bgt.n	80009b8 <__aeabi_fadd+0x274>
 80009a6:	4652      	mov	r2, sl
 80009a8:	2420      	movs	r4, #32
 80009aa:	4650      	mov	r0, sl
 80009ac:	40da      	lsrs	r2, r3
 80009ae:	1ae3      	subs	r3, r4, r3
 80009b0:	4098      	lsls	r0, r3
 80009b2:	1e43      	subs	r3, r0, #1
 80009b4:	4198      	sbcs	r0, r3
 80009b6:	4302      	orrs	r2, r0
 80009b8:	000c      	movs	r4, r1
 80009ba:	0037      	movs	r7, r6
 80009bc:	1aaa      	subs	r2, r5, r2
 80009be:	e6f5      	b.n	80007ac <__aeabi_fadd+0x68>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d093      	beq.n	80008ec <__aeabi_fadd+0x1a8>
 80009c4:	3b01      	subs	r3, #1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d04f      	beq.n	8000a6a <__aeabi_fadd+0x326>
 80009ca:	2eff      	cmp	r6, #255	; 0xff
 80009cc:	d1c1      	bne.n	8000952 <__aeabi_fadd+0x20e>
 80009ce:	4642      	mov	r2, r8
 80009d0:	e733      	b.n	800083a <__aeabi_fadd+0xf6>
 80009d2:	2fff      	cmp	r7, #255	; 0xff
 80009d4:	d0ac      	beq.n	8000930 <__aeabi_fadd+0x1ec>
 80009d6:	4455      	add	r5, sl
 80009d8:	086a      	lsrs	r2, r5, #1
 80009da:	e7a4      	b.n	8000926 <__aeabi_fadd+0x1e2>
 80009dc:	4653      	mov	r3, sl
 80009de:	000c      	movs	r4, r1
 80009e0:	1aee      	subs	r6, r5, r3
 80009e2:	e6e8      	b.n	80007b6 <__aeabi_fadd+0x72>
 80009e4:	4653      	mov	r3, sl
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d128      	bne.n	8000a3c <__aeabi_fadd+0x2f8>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fadd+0x2ac>
 80009ee:	e722      	b.n	8000836 <__aeabi_fadd+0xf2>
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	03db      	lsls	r3, r3, #15
 80009f4:	469c      	mov	ip, r3
 80009f6:	2400      	movs	r4, #0
 80009f8:	23ff      	movs	r3, #255	; 0xff
 80009fa:	e702      	b.n	8000802 <__aeabi_fadd+0xbe>
 80009fc:	002a      	movs	r2, r5
 80009fe:	4452      	add	r2, sl
 8000a00:	e73b      	b.n	800087a <__aeabi_fadd+0x136>
 8000a02:	4653      	mov	r3, sl
 8000a04:	1b5a      	subs	r2, r3, r5
 8000a06:	e6d1      	b.n	80007ac <__aeabi_fadd+0x68>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_fadd+0x2ca>
 8000a0c:	e714      	b.n	8000838 <__aeabi_fadd+0xf4>
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fadd+0x2d0>
 8000a12:	e712      	b.n	800083a <__aeabi_fadd+0xf6>
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	03db      	lsls	r3, r3, #15
 8000a18:	421a      	tst	r2, r3
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fadd+0x2da>
 8000a1c:	e70d      	b.n	800083a <__aeabi_fadd+0xf6>
 8000a1e:	4641      	mov	r1, r8
 8000a20:	4219      	tst	r1, r3
 8000a22:	d000      	beq.n	8000a26 <__aeabi_fadd+0x2e2>
 8000a24:	e709      	b.n	800083a <__aeabi_fadd+0xf6>
 8000a26:	4642      	mov	r2, r8
 8000a28:	e707      	b.n	800083a <__aeabi_fadd+0xf6>
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	0037      	movs	r7, r6
 8000a2e:	1aaa      	subs	r2, r5, r2
 8000a30:	e6bc      	b.n	80007ac <__aeabi_fadd+0x68>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d013      	beq.n	8000a5e <__aeabi_fadd+0x31a>
 8000a36:	000c      	movs	r4, r1
 8000a38:	46c4      	mov	ip, r8
 8000a3a:	e6e2      	b.n	8000802 <__aeabi_fadd+0xbe>
 8000a3c:	2d00      	cmp	r5, #0
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_fadd+0x2fe>
 8000a40:	e6fb      	b.n	800083a <__aeabi_fadd+0xf6>
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	03db      	lsls	r3, r3, #15
 8000a46:	421a      	tst	r2, r3
 8000a48:	d100      	bne.n	8000a4c <__aeabi_fadd+0x308>
 8000a4a:	e6f6      	b.n	800083a <__aeabi_fadd+0xf6>
 8000a4c:	4640      	mov	r0, r8
 8000a4e:	4218      	tst	r0, r3
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fadd+0x310>
 8000a52:	e6f2      	b.n	800083a <__aeabi_fadd+0xf6>
 8000a54:	000c      	movs	r4, r1
 8000a56:	e6ef      	b.n	8000838 <__aeabi_fadd+0xf4>
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fadd+0x31a>
 8000a5c:	e763      	b.n	8000926 <__aeabi_fadd+0x1e2>
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2400      	movs	r4, #0
 8000a62:	4694      	mov	ip, r2
 8000a64:	e6cd      	b.n	8000802 <__aeabi_fadd+0xbe>
 8000a66:	46c4      	mov	ip, r8
 8000a68:	e6cb      	b.n	8000802 <__aeabi_fadd+0xbe>
 8000a6a:	002a      	movs	r2, r5
 8000a6c:	0037      	movs	r7, r6
 8000a6e:	4452      	add	r2, sl
 8000a70:	e703      	b.n	800087a <__aeabi_fadd+0x136>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	7dffffff 	.word	0x7dffffff
 8000a78:	fbffffff 	.word	0xfbffffff

08000a7c <__aeabi_fdiv>:
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	464f      	mov	r7, r9
 8000a80:	4646      	mov	r6, r8
 8000a82:	46d6      	mov	lr, sl
 8000a84:	0245      	lsls	r5, r0, #9
 8000a86:	b5c0      	push	{r6, r7, lr}
 8000a88:	0047      	lsls	r7, r0, #1
 8000a8a:	1c0c      	adds	r4, r1, #0
 8000a8c:	0a6d      	lsrs	r5, r5, #9
 8000a8e:	0e3f      	lsrs	r7, r7, #24
 8000a90:	0fc6      	lsrs	r6, r0, #31
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d066      	beq.n	8000b64 <__aeabi_fdiv+0xe8>
 8000a96:	2fff      	cmp	r7, #255	; 0xff
 8000a98:	d06c      	beq.n	8000b74 <__aeabi_fdiv+0xf8>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	00ea      	lsls	r2, r5, #3
 8000a9e:	2580      	movs	r5, #128	; 0x80
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	04ed      	lsls	r5, r5, #19
 8000aa6:	4315      	orrs	r5, r2
 8000aa8:	3f7f      	subs	r7, #127	; 0x7f
 8000aaa:	0260      	lsls	r0, r4, #9
 8000aac:	0061      	lsls	r1, r4, #1
 8000aae:	0a43      	lsrs	r3, r0, #9
 8000ab0:	4698      	mov	r8, r3
 8000ab2:	0e09      	lsrs	r1, r1, #24
 8000ab4:	0fe4      	lsrs	r4, r4, #31
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d048      	beq.n	8000b4c <__aeabi_fdiv+0xd0>
 8000aba:	29ff      	cmp	r1, #255	; 0xff
 8000abc:	d010      	beq.n	8000ae0 <__aeabi_fdiv+0x64>
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	00d8      	lsls	r0, r3, #3
 8000ac2:	04d2      	lsls	r2, r2, #19
 8000ac4:	4302      	orrs	r2, r0
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	2000      	movs	r0, #0
 8000aca:	397f      	subs	r1, #127	; 0x7f
 8000acc:	464a      	mov	r2, r9
 8000ace:	0033      	movs	r3, r6
 8000ad0:	1a7f      	subs	r7, r7, r1
 8000ad2:	4302      	orrs	r2, r0
 8000ad4:	496c      	ldr	r1, [pc, #432]	; (8000c88 <__aeabi_fdiv+0x20c>)
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	588a      	ldr	r2, [r1, r2]
 8000ada:	4063      	eors	r3, r4
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4697      	mov	pc, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d16d      	bne.n	8000bc0 <__aeabi_fdiv+0x144>
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	3fff      	subs	r7, #255	; 0xff
 8000ae8:	e033      	b.n	8000b52 <__aeabi_fdiv+0xd6>
 8000aea:	2300      	movs	r3, #0
 8000aec:	4698      	mov	r8, r3
 8000aee:	0026      	movs	r6, r4
 8000af0:	4645      	mov	r5, r8
 8000af2:	4682      	mov	sl, r0
 8000af4:	4653      	mov	r3, sl
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d100      	bne.n	8000afc <__aeabi_fdiv+0x80>
 8000afa:	e07f      	b.n	8000bfc <__aeabi_fdiv+0x180>
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fdiv+0x86>
 8000b00:	e094      	b.n	8000c2c <__aeabi_fdiv+0x1b0>
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d017      	beq.n	8000b36 <__aeabi_fdiv+0xba>
 8000b06:	0038      	movs	r0, r7
 8000b08:	307f      	adds	r0, #127	; 0x7f
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	dd5f      	ble.n	8000bce <__aeabi_fdiv+0x152>
 8000b0e:	076b      	lsls	r3, r5, #29
 8000b10:	d004      	beq.n	8000b1c <__aeabi_fdiv+0xa0>
 8000b12:	230f      	movs	r3, #15
 8000b14:	402b      	ands	r3, r5
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d000      	beq.n	8000b1c <__aeabi_fdiv+0xa0>
 8000b1a:	3504      	adds	r5, #4
 8000b1c:	012b      	lsls	r3, r5, #4
 8000b1e:	d503      	bpl.n	8000b28 <__aeabi_fdiv+0xac>
 8000b20:	0038      	movs	r0, r7
 8000b22:	4b5a      	ldr	r3, [pc, #360]	; (8000c8c <__aeabi_fdiv+0x210>)
 8000b24:	3080      	adds	r0, #128	; 0x80
 8000b26:	401d      	ands	r5, r3
 8000b28:	28fe      	cmp	r0, #254	; 0xfe
 8000b2a:	dc67      	bgt.n	8000bfc <__aeabi_fdiv+0x180>
 8000b2c:	01ad      	lsls	r5, r5, #6
 8000b2e:	0a6d      	lsrs	r5, r5, #9
 8000b30:	b2c0      	uxtb	r0, r0
 8000b32:	e002      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000b34:	001e      	movs	r6, r3
 8000b36:	2000      	movs	r0, #0
 8000b38:	2500      	movs	r5, #0
 8000b3a:	05c0      	lsls	r0, r0, #23
 8000b3c:	4328      	orrs	r0, r5
 8000b3e:	07f6      	lsls	r6, r6, #31
 8000b40:	4330      	orrs	r0, r6
 8000b42:	bce0      	pop	{r5, r6, r7}
 8000b44:	46ba      	mov	sl, r7
 8000b46:	46b1      	mov	r9, r6
 8000b48:	46a8      	mov	r8, r5
 8000b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d12b      	bne.n	8000ba8 <__aeabi_fdiv+0x12c>
 8000b50:	2001      	movs	r0, #1
 8000b52:	464a      	mov	r2, r9
 8000b54:	0033      	movs	r3, r6
 8000b56:	494e      	ldr	r1, [pc, #312]	; (8000c90 <__aeabi_fdiv+0x214>)
 8000b58:	4302      	orrs	r2, r0
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	588a      	ldr	r2, [r1, r2]
 8000b5e:	4063      	eors	r3, r4
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4697      	mov	pc, r2
 8000b64:	2d00      	cmp	r5, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0x114>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e79a      	b.n	8000aaa <__aeabi_fdiv+0x2e>
 8000b74:	2d00      	cmp	r5, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0x108>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	; 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e792      	b.n	8000aaa <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	; 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e78c      	b.n	8000aaa <__aeabi_fdiv+0x2e>
 8000b90:	0028      	movs	r0, r5
 8000b92:	f002 fb63 	bl	800325c <__clzsi2>
 8000b96:	2776      	movs	r7, #118	; 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409d      	lsls	r5, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e780      	b.n	8000aaa <__aeabi_fdiv+0x2e>
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f002 fb57 	bl	800325c <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	2176      	movs	r1, #118	; 0x76
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	4249      	negs	r1, r1
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e785      	b.n	8000acc <__aeabi_fdiv+0x50>
 8000bc0:	21ff      	movs	r1, #255	; 0xff
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	e782      	b.n	8000acc <__aeabi_fdiv+0x50>
 8000bc6:	001e      	movs	r6, r3
 8000bc8:	20ff      	movs	r0, #255	; 0xff
 8000bca:	2500      	movs	r5, #0
 8000bcc:	e7b5      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	1a1b      	subs	r3, r3, r0
 8000bd2:	2b1b      	cmp	r3, #27
 8000bd4:	dcaf      	bgt.n	8000b36 <__aeabi_fdiv+0xba>
 8000bd6:	379e      	adds	r7, #158	; 0x9e
 8000bd8:	0029      	movs	r1, r5
 8000bda:	40bd      	lsls	r5, r7
 8000bdc:	40d9      	lsrs	r1, r3
 8000bde:	1e6a      	subs	r2, r5, #1
 8000be0:	4195      	sbcs	r5, r2
 8000be2:	430d      	orrs	r5, r1
 8000be4:	076b      	lsls	r3, r5, #29
 8000be6:	d004      	beq.n	8000bf2 <__aeabi_fdiv+0x176>
 8000be8:	230f      	movs	r3, #15
 8000bea:	402b      	ands	r3, r5
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fdiv+0x176>
 8000bf0:	3504      	adds	r5, #4
 8000bf2:	016b      	lsls	r3, r5, #5
 8000bf4:	d544      	bpl.n	8000c80 <__aeabi_fdiv+0x204>
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	e79e      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000bfc:	20ff      	movs	r0, #255	; 0xff
 8000bfe:	2500      	movs	r5, #0
 8000c00:	e79b      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000c02:	2580      	movs	r5, #128	; 0x80
 8000c04:	2600      	movs	r6, #0
 8000c06:	20ff      	movs	r0, #255	; 0xff
 8000c08:	03ed      	lsls	r5, r5, #15
 8000c0a:	e796      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4698      	mov	r8, r3
 8000c10:	2080      	movs	r0, #128	; 0x80
 8000c12:	03c0      	lsls	r0, r0, #15
 8000c14:	4205      	tst	r5, r0
 8000c16:	d009      	beq.n	8000c2c <__aeabi_fdiv+0x1b0>
 8000c18:	4643      	mov	r3, r8
 8000c1a:	4203      	tst	r3, r0
 8000c1c:	d106      	bne.n	8000c2c <__aeabi_fdiv+0x1b0>
 8000c1e:	4645      	mov	r5, r8
 8000c20:	4305      	orrs	r5, r0
 8000c22:	026d      	lsls	r5, r5, #9
 8000c24:	0026      	movs	r6, r4
 8000c26:	20ff      	movs	r0, #255	; 0xff
 8000c28:	0a6d      	lsrs	r5, r5, #9
 8000c2a:	e786      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000c2c:	2080      	movs	r0, #128	; 0x80
 8000c2e:	03c0      	lsls	r0, r0, #15
 8000c30:	4305      	orrs	r5, r0
 8000c32:	026d      	lsls	r5, r5, #9
 8000c34:	20ff      	movs	r0, #255	; 0xff
 8000c36:	0a6d      	lsrs	r5, r5, #9
 8000c38:	e77f      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000c3a:	4641      	mov	r1, r8
 8000c3c:	016a      	lsls	r2, r5, #5
 8000c3e:	0148      	lsls	r0, r1, #5
 8000c40:	4282      	cmp	r2, r0
 8000c42:	d219      	bcs.n	8000c78 <__aeabi_fdiv+0x1fc>
 8000c44:	211b      	movs	r1, #27
 8000c46:	2500      	movs	r5, #0
 8000c48:	3f01      	subs	r7, #1
 8000c4a:	2601      	movs	r6, #1
 8000c4c:	0014      	movs	r4, r2
 8000c4e:	006d      	lsls	r5, r5, #1
 8000c50:	0052      	lsls	r2, r2, #1
 8000c52:	2c00      	cmp	r4, #0
 8000c54:	db01      	blt.n	8000c5a <__aeabi_fdiv+0x1de>
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d801      	bhi.n	8000c5e <__aeabi_fdiv+0x1e2>
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	4335      	orrs	r5, r6
 8000c5e:	3901      	subs	r1, #1
 8000c60:	2900      	cmp	r1, #0
 8000c62:	d1f3      	bne.n	8000c4c <__aeabi_fdiv+0x1d0>
 8000c64:	1e50      	subs	r0, r2, #1
 8000c66:	4182      	sbcs	r2, r0
 8000c68:	0038      	movs	r0, r7
 8000c6a:	307f      	adds	r0, #127	; 0x7f
 8000c6c:	001e      	movs	r6, r3
 8000c6e:	4315      	orrs	r5, r2
 8000c70:	2800      	cmp	r0, #0
 8000c72:	dd00      	ble.n	8000c76 <__aeabi_fdiv+0x1fa>
 8000c74:	e74b      	b.n	8000b0e <__aeabi_fdiv+0x92>
 8000c76:	e7aa      	b.n	8000bce <__aeabi_fdiv+0x152>
 8000c78:	211a      	movs	r1, #26
 8000c7a:	2501      	movs	r5, #1
 8000c7c:	1a12      	subs	r2, r2, r0
 8000c7e:	e7e4      	b.n	8000c4a <__aeabi_fdiv+0x1ce>
 8000c80:	01ad      	lsls	r5, r5, #6
 8000c82:	2000      	movs	r0, #0
 8000c84:	0a6d      	lsrs	r5, r5, #9
 8000c86:	e758      	b.n	8000b3a <__aeabi_fdiv+0xbe>
 8000c88:	0800af20 	.word	0x0800af20
 8000c8c:	f7ffffff 	.word	0xf7ffffff
 8000c90:	0800af60 	.word	0x0800af60

08000c94 <__eqsf2>:
 8000c94:	b570      	push	{r4, r5, r6, lr}
 8000c96:	0042      	lsls	r2, r0, #1
 8000c98:	024e      	lsls	r6, r1, #9
 8000c9a:	004c      	lsls	r4, r1, #1
 8000c9c:	0245      	lsls	r5, r0, #9
 8000c9e:	0a6d      	lsrs	r5, r5, #9
 8000ca0:	0e12      	lsrs	r2, r2, #24
 8000ca2:	0fc3      	lsrs	r3, r0, #31
 8000ca4:	0a76      	lsrs	r6, r6, #9
 8000ca6:	0e24      	lsrs	r4, r4, #24
 8000ca8:	0fc9      	lsrs	r1, r1, #31
 8000caa:	2aff      	cmp	r2, #255	; 0xff
 8000cac:	d00f      	beq.n	8000cce <__eqsf2+0x3a>
 8000cae:	2cff      	cmp	r4, #255	; 0xff
 8000cb0:	d011      	beq.n	8000cd6 <__eqsf2+0x42>
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	d000      	beq.n	8000cba <__eqsf2+0x26>
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d1fc      	bne.n	8000cb8 <__eqsf2+0x24>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d00d      	beq.n	8000cde <__eqsf2+0x4a>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	d1f8      	bne.n	8000cb8 <__eqsf2+0x24>
 8000cc6:	0028      	movs	r0, r5
 8000cc8:	1e45      	subs	r5, r0, #1
 8000cca:	41a8      	sbcs	r0, r5
 8000ccc:	e7f4      	b.n	8000cb8 <__eqsf2+0x24>
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d1f1      	bne.n	8000cb8 <__eqsf2+0x24>
 8000cd4:	e7eb      	b.n	8000cae <__eqsf2+0x1a>
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d1ed      	bne.n	8000cb8 <__eqsf2+0x24>
 8000cdc:	e7e9      	b.n	8000cb2 <__eqsf2+0x1e>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e7ea      	b.n	8000cb8 <__eqsf2+0x24>
 8000ce2:	46c0      	nop			; (mov r8, r8)

08000ce4 <__gesf2>:
 8000ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce6:	0042      	lsls	r2, r0, #1
 8000ce8:	0246      	lsls	r6, r0, #9
 8000cea:	024d      	lsls	r5, r1, #9
 8000cec:	004c      	lsls	r4, r1, #1
 8000cee:	0fc3      	lsrs	r3, r0, #31
 8000cf0:	0a76      	lsrs	r6, r6, #9
 8000cf2:	0e12      	lsrs	r2, r2, #24
 8000cf4:	0a6d      	lsrs	r5, r5, #9
 8000cf6:	0e24      	lsrs	r4, r4, #24
 8000cf8:	0fc8      	lsrs	r0, r1, #31
 8000cfa:	2aff      	cmp	r2, #255	; 0xff
 8000cfc:	d01f      	beq.n	8000d3e <__gesf2+0x5a>
 8000cfe:	2cff      	cmp	r4, #255	; 0xff
 8000d00:	d010      	beq.n	8000d24 <__gesf2+0x40>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d11f      	bne.n	8000d46 <__gesf2+0x62>
 8000d06:	4271      	negs	r1, r6
 8000d08:	4171      	adcs	r1, r6
 8000d0a:	2c00      	cmp	r4, #0
 8000d0c:	d101      	bne.n	8000d12 <__gesf2+0x2e>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d01e      	beq.n	8000d50 <__gesf2+0x6c>
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d10e      	bne.n	8000d34 <__gesf2+0x50>
 8000d16:	4283      	cmp	r3, r0
 8000d18:	d01e      	beq.n	8000d58 <__gesf2+0x74>
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	1e58      	subs	r0, r3, #1
 8000d1e:	4008      	ands	r0, r1
 8000d20:	3801      	subs	r0, #1
 8000d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d126      	bne.n	8000d76 <__gesf2+0x92>
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	d1f4      	bne.n	8000d16 <__gesf2+0x32>
 8000d2c:	4271      	negs	r1, r6
 8000d2e:	4171      	adcs	r1, r6
 8000d30:	2900      	cmp	r1, #0
 8000d32:	d0f0      	beq.n	8000d16 <__gesf2+0x32>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d1f4      	bne.n	8000d22 <__gesf2+0x3e>
 8000d38:	2001      	movs	r0, #1
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	e7f1      	b.n	8000d22 <__gesf2+0x3e>
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d119      	bne.n	8000d76 <__gesf2+0x92>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d0ee      	beq.n	8000d24 <__gesf2+0x40>
 8000d46:	2c00      	cmp	r4, #0
 8000d48:	d1e5      	bne.n	8000d16 <__gesf2+0x32>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d1e3      	bne.n	8000d16 <__gesf2+0x32>
 8000d4e:	e7e4      	b.n	8000d1a <__gesf2+0x36>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e5      	beq.n	8000d22 <__gesf2+0x3e>
 8000d56:	e7e0      	b.n	8000d1a <__gesf2+0x36>
 8000d58:	42a2      	cmp	r2, r4
 8000d5a:	dc05      	bgt.n	8000d68 <__gesf2+0x84>
 8000d5c:	dbea      	blt.n	8000d34 <__gesf2+0x50>
 8000d5e:	42ae      	cmp	r6, r5
 8000d60:	d802      	bhi.n	8000d68 <__gesf2+0x84>
 8000d62:	d3e7      	bcc.n	8000d34 <__gesf2+0x50>
 8000d64:	2000      	movs	r0, #0
 8000d66:	e7dc      	b.n	8000d22 <__gesf2+0x3e>
 8000d68:	4241      	negs	r1, r0
 8000d6a:	4141      	adcs	r1, r0
 8000d6c:	4248      	negs	r0, r1
 8000d6e:	2102      	movs	r1, #2
 8000d70:	4008      	ands	r0, r1
 8000d72:	3801      	subs	r0, #1
 8000d74:	e7d5      	b.n	8000d22 <__gesf2+0x3e>
 8000d76:	2002      	movs	r0, #2
 8000d78:	4240      	negs	r0, r0
 8000d7a:	e7d2      	b.n	8000d22 <__gesf2+0x3e>

08000d7c <__lesf2>:
 8000d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7e:	0042      	lsls	r2, r0, #1
 8000d80:	0246      	lsls	r6, r0, #9
 8000d82:	024d      	lsls	r5, r1, #9
 8000d84:	004c      	lsls	r4, r1, #1
 8000d86:	0fc3      	lsrs	r3, r0, #31
 8000d88:	0a76      	lsrs	r6, r6, #9
 8000d8a:	0e12      	lsrs	r2, r2, #24
 8000d8c:	0a6d      	lsrs	r5, r5, #9
 8000d8e:	0e24      	lsrs	r4, r4, #24
 8000d90:	0fc8      	lsrs	r0, r1, #31
 8000d92:	2aff      	cmp	r2, #255	; 0xff
 8000d94:	d00d      	beq.n	8000db2 <__lesf2+0x36>
 8000d96:	2cff      	cmp	r4, #255	; 0xff
 8000d98:	d00f      	beq.n	8000dba <__lesf2+0x3e>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d123      	bne.n	8000de6 <__lesf2+0x6a>
 8000d9e:	4271      	negs	r1, r6
 8000da0:	4171      	adcs	r1, r6
 8000da2:	2c00      	cmp	r4, #0
 8000da4:	d10f      	bne.n	8000dc6 <__lesf2+0x4a>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d10d      	bne.n	8000dc6 <__lesf2+0x4a>
 8000daa:	2000      	movs	r0, #0
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d014      	beq.n	8000dda <__lesf2+0x5e>
 8000db0:	e00d      	b.n	8000dce <__lesf2+0x52>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d110      	bne.n	8000dd8 <__lesf2+0x5c>
 8000db6:	2cff      	cmp	r4, #255	; 0xff
 8000db8:	d115      	bne.n	8000de6 <__lesf2+0x6a>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d10c      	bne.n	8000dd8 <__lesf2+0x5c>
 8000dbe:	2a00      	cmp	r2, #0
 8000dc0:	d103      	bne.n	8000dca <__lesf2+0x4e>
 8000dc2:	4271      	negs	r1, r6
 8000dc4:	4171      	adcs	r1, r6
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d108      	bne.n	8000ddc <__lesf2+0x60>
 8000dca:	4283      	cmp	r3, r0
 8000dcc:	d010      	beq.n	8000df0 <__lesf2+0x74>
 8000dce:	2102      	movs	r1, #2
 8000dd0:	1e58      	subs	r0, r3, #1
 8000dd2:	4008      	ands	r0, r1
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	e000      	b.n	8000dda <__lesf2+0x5e>
 8000dd8:	2002      	movs	r0, #2
 8000dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d1fc      	bne.n	8000dda <__lesf2+0x5e>
 8000de0:	2001      	movs	r0, #1
 8000de2:	4240      	negs	r0, r0
 8000de4:	e7f9      	b.n	8000dda <__lesf2+0x5e>
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d1ef      	bne.n	8000dca <__lesf2+0x4e>
 8000dea:	2d00      	cmp	r5, #0
 8000dec:	d1ed      	bne.n	8000dca <__lesf2+0x4e>
 8000dee:	e7ee      	b.n	8000dce <__lesf2+0x52>
 8000df0:	42a2      	cmp	r2, r4
 8000df2:	dc05      	bgt.n	8000e00 <__lesf2+0x84>
 8000df4:	dbf2      	blt.n	8000ddc <__lesf2+0x60>
 8000df6:	42ae      	cmp	r6, r5
 8000df8:	d802      	bhi.n	8000e00 <__lesf2+0x84>
 8000dfa:	d3ef      	bcc.n	8000ddc <__lesf2+0x60>
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e7ec      	b.n	8000dda <__lesf2+0x5e>
 8000e00:	4241      	negs	r1, r0
 8000e02:	4141      	adcs	r1, r0
 8000e04:	4248      	negs	r0, r1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4008      	ands	r0, r1
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	e7e5      	b.n	8000dda <__lesf2+0x5e>
 8000e0e:	46c0      	nop			; (mov r8, r8)

08000e10 <__aeabi_fmul>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	4657      	mov	r7, sl
 8000e14:	464e      	mov	r6, r9
 8000e16:	4645      	mov	r5, r8
 8000e18:	46de      	mov	lr, fp
 8000e1a:	0244      	lsls	r4, r0, #9
 8000e1c:	b5e0      	push	{r5, r6, r7, lr}
 8000e1e:	0045      	lsls	r5, r0, #1
 8000e20:	1c0f      	adds	r7, r1, #0
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	0e2d      	lsrs	r5, r5, #24
 8000e26:	0fc6      	lsrs	r6, r0, #31
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d047      	beq.n	8000ebc <__aeabi_fmul+0xac>
 8000e2c:	2dff      	cmp	r5, #255	; 0xff
 8000e2e:	d04d      	beq.n	8000ecc <__aeabi_fmul+0xbc>
 8000e30:	2300      	movs	r3, #0
 8000e32:	2080      	movs	r0, #128	; 0x80
 8000e34:	469a      	mov	sl, r3
 8000e36:	469b      	mov	fp, r3
 8000e38:	00e4      	lsls	r4, r4, #3
 8000e3a:	04c0      	lsls	r0, r0, #19
 8000e3c:	4304      	orrs	r4, r0
 8000e3e:	3d7f      	subs	r5, #127	; 0x7f
 8000e40:	0278      	lsls	r0, r7, #9
 8000e42:	0a43      	lsrs	r3, r0, #9
 8000e44:	4699      	mov	r9, r3
 8000e46:	007a      	lsls	r2, r7, #1
 8000e48:	0ffb      	lsrs	r3, r7, #31
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	464b      	mov	r3, r9
 8000e50:	d044      	beq.n	8000edc <__aeabi_fmul+0xcc>
 8000e52:	2aff      	cmp	r2, #255	; 0xff
 8000e54:	d011      	beq.n	8000e7a <__aeabi_fmul+0x6a>
 8000e56:	00d8      	lsls	r0, r3, #3
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	04db      	lsls	r3, r3, #19
 8000e5c:	4303      	orrs	r3, r0
 8000e5e:	4699      	mov	r9, r3
 8000e60:	2000      	movs	r0, #0
 8000e62:	3a7f      	subs	r2, #127	; 0x7f
 8000e64:	18ad      	adds	r5, r5, r2
 8000e66:	4647      	mov	r7, r8
 8000e68:	4653      	mov	r3, sl
 8000e6a:	4077      	eors	r7, r6
 8000e6c:	1c69      	adds	r1, r5, #1
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	d83f      	bhi.n	8000ef2 <__aeabi_fmul+0xe2>
 8000e72:	4a72      	ldr	r2, [pc, #456]	; (800103c <__aeabi_fmul+0x22c>)
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	58d3      	ldr	r3, [r2, r3]
 8000e78:	469f      	mov	pc, r3
 8000e7a:	35ff      	adds	r5, #255	; 0xff
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fmul+0x72>
 8000e80:	e079      	b.n	8000f76 <__aeabi_fmul+0x166>
 8000e82:	4652      	mov	r2, sl
 8000e84:	2302      	movs	r3, #2
 8000e86:	431a      	orrs	r2, r3
 8000e88:	4692      	mov	sl, r2
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	e7eb      	b.n	8000e66 <__aeabi_fmul+0x56>
 8000e8e:	4647      	mov	r7, r8
 8000e90:	464c      	mov	r4, r9
 8000e92:	4683      	mov	fp, r0
 8000e94:	465b      	mov	r3, fp
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d028      	beq.n	8000eec <__aeabi_fmul+0xdc>
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fmul+0x90>
 8000e9e:	e0c6      	b.n	800102e <__aeabi_fmul+0x21e>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d14f      	bne.n	8000f44 <__aeabi_fmul+0x134>
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	05c0      	lsls	r0, r0, #23
 8000eaa:	07ff      	lsls	r7, r7, #31
 8000eac:	4320      	orrs	r0, r4
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb2:	46bb      	mov	fp, r7
 8000eb4:	46b2      	mov	sl, r6
 8000eb6:	46a9      	mov	r9, r5
 8000eb8:	46a0      	mov	r8, r4
 8000eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d171      	bne.n	8000fa4 <__aeabi_fmul+0x194>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	469b      	mov	fp, r3
 8000eca:	e7b9      	b.n	8000e40 <__aeabi_fmul+0x30>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d163      	bne.n	8000f98 <__aeabi_fmul+0x188>
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	3b06      	subs	r3, #6
 8000ed6:	25ff      	movs	r5, #255	; 0xff
 8000ed8:	469b      	mov	fp, r3
 8000eda:	e7b1      	b.n	8000e40 <__aeabi_fmul+0x30>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d150      	bne.n	8000f82 <__aeabi_fmul+0x172>
 8000ee0:	4652      	mov	r2, sl
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	4692      	mov	sl, r2
 8000ee8:	2001      	movs	r0, #1
 8000eea:	e7bc      	b.n	8000e66 <__aeabi_fmul+0x56>
 8000eec:	20ff      	movs	r0, #255	; 0xff
 8000eee:	2400      	movs	r4, #0
 8000ef0:	e7da      	b.n	8000ea8 <__aeabi_fmul+0x98>
 8000ef2:	4648      	mov	r0, r9
 8000ef4:	0c26      	lsrs	r6, r4, #16
 8000ef6:	0424      	lsls	r4, r4, #16
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	0404      	lsls	r4, r0, #16
 8000efc:	0c24      	lsrs	r4, r4, #16
 8000efe:	464b      	mov	r3, r9
 8000f00:	0020      	movs	r0, r4
 8000f02:	0c1b      	lsrs	r3, r3, #16
 8000f04:	4350      	muls	r0, r2
 8000f06:	4374      	muls	r4, r6
 8000f08:	435a      	muls	r2, r3
 8000f0a:	435e      	muls	r6, r3
 8000f0c:	1912      	adds	r2, r2, r4
 8000f0e:	0c03      	lsrs	r3, r0, #16
 8000f10:	189b      	adds	r3, r3, r2
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d903      	bls.n	8000f1e <__aeabi_fmul+0x10e>
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	0252      	lsls	r2, r2, #9
 8000f1a:	4694      	mov	ip, r2
 8000f1c:	4466      	add	r6, ip
 8000f1e:	0400      	lsls	r0, r0, #16
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	0c00      	lsrs	r0, r0, #16
 8000f24:	1812      	adds	r2, r2, r0
 8000f26:	0194      	lsls	r4, r2, #6
 8000f28:	1e60      	subs	r0, r4, #1
 8000f2a:	4184      	sbcs	r4, r0
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	0e92      	lsrs	r2, r2, #26
 8000f30:	199b      	adds	r3, r3, r6
 8000f32:	4314      	orrs	r4, r2
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	431c      	orrs	r4, r3
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	d572      	bpl.n	8001022 <__aeabi_fmul+0x212>
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	0863      	lsrs	r3, r4, #1
 8000f40:	4004      	ands	r4, r0
 8000f42:	431c      	orrs	r4, r3
 8000f44:	0008      	movs	r0, r1
 8000f46:	307f      	adds	r0, #127	; 0x7f
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	dd3c      	ble.n	8000fc6 <__aeabi_fmul+0x1b6>
 8000f4c:	0763      	lsls	r3, r4, #29
 8000f4e:	d004      	beq.n	8000f5a <__aeabi_fmul+0x14a>
 8000f50:	230f      	movs	r3, #15
 8000f52:	4023      	ands	r3, r4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d000      	beq.n	8000f5a <__aeabi_fmul+0x14a>
 8000f58:	3404      	adds	r4, #4
 8000f5a:	0123      	lsls	r3, r4, #4
 8000f5c:	d503      	bpl.n	8000f66 <__aeabi_fmul+0x156>
 8000f5e:	3180      	adds	r1, #128	; 0x80
 8000f60:	0008      	movs	r0, r1
 8000f62:	4b37      	ldr	r3, [pc, #220]	; (8001040 <__aeabi_fmul+0x230>)
 8000f64:	401c      	ands	r4, r3
 8000f66:	28fe      	cmp	r0, #254	; 0xfe
 8000f68:	dcc0      	bgt.n	8000eec <__aeabi_fmul+0xdc>
 8000f6a:	01a4      	lsls	r4, r4, #6
 8000f6c:	0a64      	lsrs	r4, r4, #9
 8000f6e:	b2c0      	uxtb	r0, r0
 8000f70:	e79a      	b.n	8000ea8 <__aeabi_fmul+0x98>
 8000f72:	0037      	movs	r7, r6
 8000f74:	e78e      	b.n	8000e94 <__aeabi_fmul+0x84>
 8000f76:	4652      	mov	r2, sl
 8000f78:	2303      	movs	r3, #3
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	4692      	mov	sl, r2
 8000f7e:	2003      	movs	r0, #3
 8000f80:	e771      	b.n	8000e66 <__aeabi_fmul+0x56>
 8000f82:	4648      	mov	r0, r9
 8000f84:	f002 f96a 	bl	800325c <__clzsi2>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	1f43      	subs	r3, r0, #5
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	1a2d      	subs	r5, r5, r0
 8000f90:	4691      	mov	r9, r2
 8000f92:	2000      	movs	r0, #0
 8000f94:	3d76      	subs	r5, #118	; 0x76
 8000f96:	e766      	b.n	8000e66 <__aeabi_fmul+0x56>
 8000f98:	230c      	movs	r3, #12
 8000f9a:	469a      	mov	sl, r3
 8000f9c:	3b09      	subs	r3, #9
 8000f9e:	25ff      	movs	r5, #255	; 0xff
 8000fa0:	469b      	mov	fp, r3
 8000fa2:	e74d      	b.n	8000e40 <__aeabi_fmul+0x30>
 8000fa4:	0020      	movs	r0, r4
 8000fa6:	f002 f959 	bl	800325c <__clzsi2>
 8000faa:	2576      	movs	r5, #118	; 0x76
 8000fac:	1f43      	subs	r3, r0, #5
 8000fae:	409c      	lsls	r4, r3
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	426d      	negs	r5, r5
 8000fb4:	469a      	mov	sl, r3
 8000fb6:	469b      	mov	fp, r3
 8000fb8:	1a2d      	subs	r5, r5, r0
 8000fba:	e741      	b.n	8000e40 <__aeabi_fmul+0x30>
 8000fbc:	2480      	movs	r4, #128	; 0x80
 8000fbe:	2700      	movs	r7, #0
 8000fc0:	20ff      	movs	r0, #255	; 0xff
 8000fc2:	03e4      	lsls	r4, r4, #15
 8000fc4:	e770      	b.n	8000ea8 <__aeabi_fmul+0x98>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	1a1b      	subs	r3, r3, r0
 8000fca:	2b1b      	cmp	r3, #27
 8000fcc:	dd00      	ble.n	8000fd0 <__aeabi_fmul+0x1c0>
 8000fce:	e769      	b.n	8000ea4 <__aeabi_fmul+0x94>
 8000fd0:	319e      	adds	r1, #158	; 0x9e
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	408c      	lsls	r4, r1
 8000fd6:	40d8      	lsrs	r0, r3
 8000fd8:	1e63      	subs	r3, r4, #1
 8000fda:	419c      	sbcs	r4, r3
 8000fdc:	4304      	orrs	r4, r0
 8000fde:	0763      	lsls	r3, r4, #29
 8000fe0:	d004      	beq.n	8000fec <__aeabi_fmul+0x1dc>
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	4023      	ands	r3, r4
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fmul+0x1dc>
 8000fea:	3404      	adds	r4, #4
 8000fec:	0163      	lsls	r3, r4, #5
 8000fee:	d51a      	bpl.n	8001026 <__aeabi_fmul+0x216>
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	e758      	b.n	8000ea8 <__aeabi_fmul+0x98>
 8000ff6:	2080      	movs	r0, #128	; 0x80
 8000ff8:	03c0      	lsls	r0, r0, #15
 8000ffa:	4204      	tst	r4, r0
 8000ffc:	d009      	beq.n	8001012 <__aeabi_fmul+0x202>
 8000ffe:	464b      	mov	r3, r9
 8001000:	4203      	tst	r3, r0
 8001002:	d106      	bne.n	8001012 <__aeabi_fmul+0x202>
 8001004:	464c      	mov	r4, r9
 8001006:	4304      	orrs	r4, r0
 8001008:	0264      	lsls	r4, r4, #9
 800100a:	4647      	mov	r7, r8
 800100c:	20ff      	movs	r0, #255	; 0xff
 800100e:	0a64      	lsrs	r4, r4, #9
 8001010:	e74a      	b.n	8000ea8 <__aeabi_fmul+0x98>
 8001012:	2080      	movs	r0, #128	; 0x80
 8001014:	03c0      	lsls	r0, r0, #15
 8001016:	4304      	orrs	r4, r0
 8001018:	0264      	lsls	r4, r4, #9
 800101a:	0037      	movs	r7, r6
 800101c:	20ff      	movs	r0, #255	; 0xff
 800101e:	0a64      	lsrs	r4, r4, #9
 8001020:	e742      	b.n	8000ea8 <__aeabi_fmul+0x98>
 8001022:	0029      	movs	r1, r5
 8001024:	e78e      	b.n	8000f44 <__aeabi_fmul+0x134>
 8001026:	01a4      	lsls	r4, r4, #6
 8001028:	2000      	movs	r0, #0
 800102a:	0a64      	lsrs	r4, r4, #9
 800102c:	e73c      	b.n	8000ea8 <__aeabi_fmul+0x98>
 800102e:	2080      	movs	r0, #128	; 0x80
 8001030:	03c0      	lsls	r0, r0, #15
 8001032:	4304      	orrs	r4, r0
 8001034:	0264      	lsls	r4, r4, #9
 8001036:	20ff      	movs	r0, #255	; 0xff
 8001038:	0a64      	lsrs	r4, r4, #9
 800103a:	e735      	b.n	8000ea8 <__aeabi_fmul+0x98>
 800103c:	0800afa0 	.word	0x0800afa0
 8001040:	f7ffffff 	.word	0xf7ffffff

08001044 <__aeabi_fsub>:
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	4646      	mov	r6, r8
 8001048:	46d6      	mov	lr, sl
 800104a:	464f      	mov	r7, r9
 800104c:	0243      	lsls	r3, r0, #9
 800104e:	0a5b      	lsrs	r3, r3, #9
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	4694      	mov	ip, r2
 8001054:	024a      	lsls	r2, r1, #9
 8001056:	b5c0      	push	{r6, r7, lr}
 8001058:	0044      	lsls	r4, r0, #1
 800105a:	0a56      	lsrs	r6, r2, #9
 800105c:	1c05      	adds	r5, r0, #0
 800105e:	46b0      	mov	r8, r6
 8001060:	0e24      	lsrs	r4, r4, #24
 8001062:	004e      	lsls	r6, r1, #1
 8001064:	0992      	lsrs	r2, r2, #6
 8001066:	001f      	movs	r7, r3
 8001068:	0020      	movs	r0, r4
 800106a:	4692      	mov	sl, r2
 800106c:	0fed      	lsrs	r5, r5, #31
 800106e:	0e36      	lsrs	r6, r6, #24
 8001070:	0fc9      	lsrs	r1, r1, #31
 8001072:	2eff      	cmp	r6, #255	; 0xff
 8001074:	d100      	bne.n	8001078 <__aeabi_fsub+0x34>
 8001076:	e07f      	b.n	8001178 <__aeabi_fsub+0x134>
 8001078:	2201      	movs	r2, #1
 800107a:	4051      	eors	r1, r2
 800107c:	428d      	cmp	r5, r1
 800107e:	d051      	beq.n	8001124 <__aeabi_fsub+0xe0>
 8001080:	1ba2      	subs	r2, r4, r6
 8001082:	4691      	mov	r9, r2
 8001084:	2a00      	cmp	r2, #0
 8001086:	dc00      	bgt.n	800108a <__aeabi_fsub+0x46>
 8001088:	e07e      	b.n	8001188 <__aeabi_fsub+0x144>
 800108a:	2e00      	cmp	r6, #0
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x4c>
 800108e:	e099      	b.n	80011c4 <__aeabi_fsub+0x180>
 8001090:	2cff      	cmp	r4, #255	; 0xff
 8001092:	d100      	bne.n	8001096 <__aeabi_fsub+0x52>
 8001094:	e08c      	b.n	80011b0 <__aeabi_fsub+0x16c>
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	4652      	mov	r2, sl
 800109a:	04db      	lsls	r3, r3, #19
 800109c:	431a      	orrs	r2, r3
 800109e:	4692      	mov	sl, r2
 80010a0:	464a      	mov	r2, r9
 80010a2:	2301      	movs	r3, #1
 80010a4:	2a1b      	cmp	r2, #27
 80010a6:	dc08      	bgt.n	80010ba <__aeabi_fsub+0x76>
 80010a8:	4653      	mov	r3, sl
 80010aa:	2120      	movs	r1, #32
 80010ac:	40d3      	lsrs	r3, r2
 80010ae:	1a89      	subs	r1, r1, r2
 80010b0:	4652      	mov	r2, sl
 80010b2:	408a      	lsls	r2, r1
 80010b4:	1e51      	subs	r1, r2, #1
 80010b6:	418a      	sbcs	r2, r1
 80010b8:	4313      	orrs	r3, r2
 80010ba:	4662      	mov	r2, ip
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	015a      	lsls	r2, r3, #5
 80010c0:	d400      	bmi.n	80010c4 <__aeabi_fsub+0x80>
 80010c2:	e0f3      	b.n	80012ac <__aeabi_fsub+0x268>
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	099e      	lsrs	r6, r3, #6
 80010c8:	0030      	movs	r0, r6
 80010ca:	f002 f8c7 	bl	800325c <__clzsi2>
 80010ce:	3805      	subs	r0, #5
 80010d0:	4086      	lsls	r6, r0
 80010d2:	4284      	cmp	r4, r0
 80010d4:	dd00      	ble.n	80010d8 <__aeabi_fsub+0x94>
 80010d6:	e0f7      	b.n	80012c8 <__aeabi_fsub+0x284>
 80010d8:	0032      	movs	r2, r6
 80010da:	1b04      	subs	r4, r0, r4
 80010dc:	2020      	movs	r0, #32
 80010de:	3401      	adds	r4, #1
 80010e0:	40e2      	lsrs	r2, r4
 80010e2:	1b04      	subs	r4, r0, r4
 80010e4:	40a6      	lsls	r6, r4
 80010e6:	0033      	movs	r3, r6
 80010e8:	1e5e      	subs	r6, r3, #1
 80010ea:	41b3      	sbcs	r3, r6
 80010ec:	2400      	movs	r4, #0
 80010ee:	4313      	orrs	r3, r2
 80010f0:	075a      	lsls	r2, r3, #29
 80010f2:	d004      	beq.n	80010fe <__aeabi_fsub+0xba>
 80010f4:	220f      	movs	r2, #15
 80010f6:	401a      	ands	r2, r3
 80010f8:	2a04      	cmp	r2, #4
 80010fa:	d000      	beq.n	80010fe <__aeabi_fsub+0xba>
 80010fc:	3304      	adds	r3, #4
 80010fe:	015a      	lsls	r2, r3, #5
 8001100:	d400      	bmi.n	8001104 <__aeabi_fsub+0xc0>
 8001102:	e0d6      	b.n	80012b2 <__aeabi_fsub+0x26e>
 8001104:	1c62      	adds	r2, r4, #1
 8001106:	2cfe      	cmp	r4, #254	; 0xfe
 8001108:	d100      	bne.n	800110c <__aeabi_fsub+0xc8>
 800110a:	e0da      	b.n	80012c2 <__aeabi_fsub+0x27e>
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	0a5f      	lsrs	r7, r3, #9
 8001110:	b2d0      	uxtb	r0, r2
 8001112:	05c0      	lsls	r0, r0, #23
 8001114:	4338      	orrs	r0, r7
 8001116:	07ed      	lsls	r5, r5, #31
 8001118:	4328      	orrs	r0, r5
 800111a:	bce0      	pop	{r5, r6, r7}
 800111c:	46ba      	mov	sl, r7
 800111e:	46b1      	mov	r9, r6
 8001120:	46a8      	mov	r8, r5
 8001122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001124:	1ba2      	subs	r2, r4, r6
 8001126:	4691      	mov	r9, r2
 8001128:	2a00      	cmp	r2, #0
 800112a:	dd63      	ble.n	80011f4 <__aeabi_fsub+0x1b0>
 800112c:	2e00      	cmp	r6, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0xee>
 8001130:	e099      	b.n	8001266 <__aeabi_fsub+0x222>
 8001132:	2cff      	cmp	r4, #255	; 0xff
 8001134:	d03c      	beq.n	80011b0 <__aeabi_fsub+0x16c>
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	4652      	mov	r2, sl
 800113a:	04db      	lsls	r3, r3, #19
 800113c:	431a      	orrs	r2, r3
 800113e:	4692      	mov	sl, r2
 8001140:	464a      	mov	r2, r9
 8001142:	2301      	movs	r3, #1
 8001144:	2a1b      	cmp	r2, #27
 8001146:	dc08      	bgt.n	800115a <__aeabi_fsub+0x116>
 8001148:	4653      	mov	r3, sl
 800114a:	2120      	movs	r1, #32
 800114c:	40d3      	lsrs	r3, r2
 800114e:	1a89      	subs	r1, r1, r2
 8001150:	4652      	mov	r2, sl
 8001152:	408a      	lsls	r2, r1
 8001154:	1e51      	subs	r1, r2, #1
 8001156:	418a      	sbcs	r2, r1
 8001158:	4313      	orrs	r3, r2
 800115a:	4463      	add	r3, ip
 800115c:	015a      	lsls	r2, r3, #5
 800115e:	d400      	bmi.n	8001162 <__aeabi_fsub+0x11e>
 8001160:	e0a4      	b.n	80012ac <__aeabi_fsub+0x268>
 8001162:	3401      	adds	r4, #1
 8001164:	2cff      	cmp	r4, #255	; 0xff
 8001166:	d100      	bne.n	800116a <__aeabi_fsub+0x126>
 8001168:	e0ab      	b.n	80012c2 <__aeabi_fsub+0x27e>
 800116a:	2201      	movs	r2, #1
 800116c:	4997      	ldr	r1, [pc, #604]	; (80013cc <__aeabi_fsub+0x388>)
 800116e:	401a      	ands	r2, r3
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	400b      	ands	r3, r1
 8001174:	4313      	orrs	r3, r2
 8001176:	e7bb      	b.n	80010f0 <__aeabi_fsub+0xac>
 8001178:	2a00      	cmp	r2, #0
 800117a:	d032      	beq.n	80011e2 <__aeabi_fsub+0x19e>
 800117c:	428d      	cmp	r5, r1
 800117e:	d035      	beq.n	80011ec <__aeabi_fsub+0x1a8>
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	4252      	negs	r2, r2
 8001184:	4691      	mov	r9, r2
 8001186:	44a1      	add	r9, r4
 8001188:	464a      	mov	r2, r9
 800118a:	2a00      	cmp	r2, #0
 800118c:	d051      	beq.n	8001232 <__aeabi_fsub+0x1ee>
 800118e:	1b30      	subs	r0, r6, r4
 8001190:	2c00      	cmp	r4, #0
 8001192:	d000      	beq.n	8001196 <__aeabi_fsub+0x152>
 8001194:	e09c      	b.n	80012d0 <__aeabi_fsub+0x28c>
 8001196:	4663      	mov	r3, ip
 8001198:	2b00      	cmp	r3, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x15a>
 800119c:	e0df      	b.n	800135e <__aeabi_fsub+0x31a>
 800119e:	3801      	subs	r0, #1
 80011a0:	2800      	cmp	r0, #0
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x162>
 80011a4:	e0f7      	b.n	8001396 <__aeabi_fsub+0x352>
 80011a6:	2eff      	cmp	r6, #255	; 0xff
 80011a8:	d000      	beq.n	80011ac <__aeabi_fsub+0x168>
 80011aa:	e099      	b.n	80012e0 <__aeabi_fsub+0x29c>
 80011ac:	000d      	movs	r5, r1
 80011ae:	4643      	mov	r3, r8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d100      	bne.n	80011b6 <__aeabi_fsub+0x172>
 80011b4:	e085      	b.n	80012c2 <__aeabi_fsub+0x27e>
 80011b6:	2780      	movs	r7, #128	; 0x80
 80011b8:	03ff      	lsls	r7, r7, #15
 80011ba:	431f      	orrs	r7, r3
 80011bc:	027f      	lsls	r7, r7, #9
 80011be:	20ff      	movs	r0, #255	; 0xff
 80011c0:	0a7f      	lsrs	r7, r7, #9
 80011c2:	e7a6      	b.n	8001112 <__aeabi_fsub+0xce>
 80011c4:	4652      	mov	r2, sl
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	d074      	beq.n	80012b4 <__aeabi_fsub+0x270>
 80011ca:	2201      	movs	r2, #1
 80011cc:	4252      	negs	r2, r2
 80011ce:	4690      	mov	r8, r2
 80011d0:	44c1      	add	r9, r8
 80011d2:	464a      	mov	r2, r9
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_fsub+0x196>
 80011d8:	e0c8      	b.n	800136c <__aeabi_fsub+0x328>
 80011da:	2cff      	cmp	r4, #255	; 0xff
 80011dc:	d000      	beq.n	80011e0 <__aeabi_fsub+0x19c>
 80011de:	e75f      	b.n	80010a0 <__aeabi_fsub+0x5c>
 80011e0:	e7e6      	b.n	80011b0 <__aeabi_fsub+0x16c>
 80011e2:	2201      	movs	r2, #1
 80011e4:	4051      	eors	r1, r2
 80011e6:	42a9      	cmp	r1, r5
 80011e8:	d000      	beq.n	80011ec <__aeabi_fsub+0x1a8>
 80011ea:	e749      	b.n	8001080 <__aeabi_fsub+0x3c>
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	4252      	negs	r2, r2
 80011f0:	4691      	mov	r9, r2
 80011f2:	44a1      	add	r9, r4
 80011f4:	464a      	mov	r2, r9
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d043      	beq.n	8001282 <__aeabi_fsub+0x23e>
 80011fa:	1b31      	subs	r1, r6, r4
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d100      	bne.n	8001202 <__aeabi_fsub+0x1be>
 8001200:	e08c      	b.n	800131c <__aeabi_fsub+0x2d8>
 8001202:	2eff      	cmp	r6, #255	; 0xff
 8001204:	d100      	bne.n	8001208 <__aeabi_fsub+0x1c4>
 8001206:	e092      	b.n	800132e <__aeabi_fsub+0x2ea>
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	4662      	mov	r2, ip
 800120c:	04db      	lsls	r3, r3, #19
 800120e:	431a      	orrs	r2, r3
 8001210:	4694      	mov	ip, r2
 8001212:	2301      	movs	r3, #1
 8001214:	291b      	cmp	r1, #27
 8001216:	dc09      	bgt.n	800122c <__aeabi_fsub+0x1e8>
 8001218:	2020      	movs	r0, #32
 800121a:	4663      	mov	r3, ip
 800121c:	4662      	mov	r2, ip
 800121e:	40cb      	lsrs	r3, r1
 8001220:	1a41      	subs	r1, r0, r1
 8001222:	408a      	lsls	r2, r1
 8001224:	0011      	movs	r1, r2
 8001226:	1e48      	subs	r0, r1, #1
 8001228:	4181      	sbcs	r1, r0
 800122a:	430b      	orrs	r3, r1
 800122c:	0034      	movs	r4, r6
 800122e:	4453      	add	r3, sl
 8001230:	e794      	b.n	800115c <__aeabi_fsub+0x118>
 8001232:	22fe      	movs	r2, #254	; 0xfe
 8001234:	1c66      	adds	r6, r4, #1
 8001236:	4232      	tst	r2, r6
 8001238:	d164      	bne.n	8001304 <__aeabi_fsub+0x2c0>
 800123a:	2c00      	cmp	r4, #0
 800123c:	d000      	beq.n	8001240 <__aeabi_fsub+0x1fc>
 800123e:	e082      	b.n	8001346 <__aeabi_fsub+0x302>
 8001240:	4663      	mov	r3, ip
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <__aeabi_fsub+0x204>
 8001246:	e0ab      	b.n	80013a0 <__aeabi_fsub+0x35c>
 8001248:	4653      	mov	r3, sl
 800124a:	2b00      	cmp	r3, #0
 800124c:	d100      	bne.n	8001250 <__aeabi_fsub+0x20c>
 800124e:	e760      	b.n	8001112 <__aeabi_fsub+0xce>
 8001250:	4663      	mov	r3, ip
 8001252:	4652      	mov	r2, sl
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	015a      	lsls	r2, r3, #5
 8001258:	d400      	bmi.n	800125c <__aeabi_fsub+0x218>
 800125a:	e0aa      	b.n	80013b2 <__aeabi_fsub+0x36e>
 800125c:	4663      	mov	r3, ip
 800125e:	4652      	mov	r2, sl
 8001260:	000d      	movs	r5, r1
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	e744      	b.n	80010f0 <__aeabi_fsub+0xac>
 8001266:	4652      	mov	r2, sl
 8001268:	2a00      	cmp	r2, #0
 800126a:	d023      	beq.n	80012b4 <__aeabi_fsub+0x270>
 800126c:	2201      	movs	r2, #1
 800126e:	4252      	negs	r2, r2
 8001270:	4690      	mov	r8, r2
 8001272:	44c1      	add	r9, r8
 8001274:	464a      	mov	r2, r9
 8001276:	2a00      	cmp	r2, #0
 8001278:	d075      	beq.n	8001366 <__aeabi_fsub+0x322>
 800127a:	2cff      	cmp	r4, #255	; 0xff
 800127c:	d000      	beq.n	8001280 <__aeabi_fsub+0x23c>
 800127e:	e75f      	b.n	8001140 <__aeabi_fsub+0xfc>
 8001280:	e796      	b.n	80011b0 <__aeabi_fsub+0x16c>
 8001282:	26fe      	movs	r6, #254	; 0xfe
 8001284:	3401      	adds	r4, #1
 8001286:	4226      	tst	r6, r4
 8001288:	d153      	bne.n	8001332 <__aeabi_fsub+0x2ee>
 800128a:	2800      	cmp	r0, #0
 800128c:	d172      	bne.n	8001374 <__aeabi_fsub+0x330>
 800128e:	4663      	mov	r3, ip
 8001290:	2b00      	cmp	r3, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_fsub+0x252>
 8001294:	e093      	b.n	80013be <__aeabi_fsub+0x37a>
 8001296:	4653      	mov	r3, sl
 8001298:	2b00      	cmp	r3, #0
 800129a:	d100      	bne.n	800129e <__aeabi_fsub+0x25a>
 800129c:	e739      	b.n	8001112 <__aeabi_fsub+0xce>
 800129e:	4463      	add	r3, ip
 80012a0:	2400      	movs	r4, #0
 80012a2:	015a      	lsls	r2, r3, #5
 80012a4:	d502      	bpl.n	80012ac <__aeabi_fsub+0x268>
 80012a6:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <__aeabi_fsub+0x38c>)
 80012a8:	3401      	adds	r4, #1
 80012aa:	4013      	ands	r3, r2
 80012ac:	075a      	lsls	r2, r3, #29
 80012ae:	d000      	beq.n	80012b2 <__aeabi_fsub+0x26e>
 80012b0:	e720      	b.n	80010f4 <__aeabi_fsub+0xb0>
 80012b2:	08db      	lsrs	r3, r3, #3
 80012b4:	2cff      	cmp	r4, #255	; 0xff
 80012b6:	d100      	bne.n	80012ba <__aeabi_fsub+0x276>
 80012b8:	e77a      	b.n	80011b0 <__aeabi_fsub+0x16c>
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	0a5f      	lsrs	r7, r3, #9
 80012be:	b2e0      	uxtb	r0, r4
 80012c0:	e727      	b.n	8001112 <__aeabi_fsub+0xce>
 80012c2:	20ff      	movs	r0, #255	; 0xff
 80012c4:	2700      	movs	r7, #0
 80012c6:	e724      	b.n	8001112 <__aeabi_fsub+0xce>
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <__aeabi_fsub+0x38c>)
 80012ca:	1a24      	subs	r4, r4, r0
 80012cc:	4033      	ands	r3, r6
 80012ce:	e70f      	b.n	80010f0 <__aeabi_fsub+0xac>
 80012d0:	2eff      	cmp	r6, #255	; 0xff
 80012d2:	d100      	bne.n	80012d6 <__aeabi_fsub+0x292>
 80012d4:	e76a      	b.n	80011ac <__aeabi_fsub+0x168>
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	4662      	mov	r2, ip
 80012da:	04db      	lsls	r3, r3, #19
 80012dc:	431a      	orrs	r2, r3
 80012de:	4694      	mov	ip, r2
 80012e0:	2301      	movs	r3, #1
 80012e2:	281b      	cmp	r0, #27
 80012e4:	dc09      	bgt.n	80012fa <__aeabi_fsub+0x2b6>
 80012e6:	2420      	movs	r4, #32
 80012e8:	4663      	mov	r3, ip
 80012ea:	4662      	mov	r2, ip
 80012ec:	40c3      	lsrs	r3, r0
 80012ee:	1a20      	subs	r0, r4, r0
 80012f0:	4082      	lsls	r2, r0
 80012f2:	0010      	movs	r0, r2
 80012f4:	1e44      	subs	r4, r0, #1
 80012f6:	41a0      	sbcs	r0, r4
 80012f8:	4303      	orrs	r3, r0
 80012fa:	4652      	mov	r2, sl
 80012fc:	000d      	movs	r5, r1
 80012fe:	0034      	movs	r4, r6
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	e6dc      	b.n	80010be <__aeabi_fsub+0x7a>
 8001304:	4663      	mov	r3, ip
 8001306:	4652      	mov	r2, sl
 8001308:	1a9e      	subs	r6, r3, r2
 800130a:	0173      	lsls	r3, r6, #5
 800130c:	d417      	bmi.n	800133e <__aeabi_fsub+0x2fa>
 800130e:	2e00      	cmp	r6, #0
 8001310:	d000      	beq.n	8001314 <__aeabi_fsub+0x2d0>
 8001312:	e6d9      	b.n	80010c8 <__aeabi_fsub+0x84>
 8001314:	2500      	movs	r5, #0
 8001316:	2000      	movs	r0, #0
 8001318:	2700      	movs	r7, #0
 800131a:	e6fa      	b.n	8001112 <__aeabi_fsub+0xce>
 800131c:	4663      	mov	r3, ip
 800131e:	2b00      	cmp	r3, #0
 8001320:	d044      	beq.n	80013ac <__aeabi_fsub+0x368>
 8001322:	3901      	subs	r1, #1
 8001324:	2900      	cmp	r1, #0
 8001326:	d04c      	beq.n	80013c2 <__aeabi_fsub+0x37e>
 8001328:	2eff      	cmp	r6, #255	; 0xff
 800132a:	d000      	beq.n	800132e <__aeabi_fsub+0x2ea>
 800132c:	e771      	b.n	8001212 <__aeabi_fsub+0x1ce>
 800132e:	4643      	mov	r3, r8
 8001330:	e73e      	b.n	80011b0 <__aeabi_fsub+0x16c>
 8001332:	2cff      	cmp	r4, #255	; 0xff
 8001334:	d0c5      	beq.n	80012c2 <__aeabi_fsub+0x27e>
 8001336:	4652      	mov	r2, sl
 8001338:	4462      	add	r2, ip
 800133a:	0853      	lsrs	r3, r2, #1
 800133c:	e7b6      	b.n	80012ac <__aeabi_fsub+0x268>
 800133e:	4663      	mov	r3, ip
 8001340:	000d      	movs	r5, r1
 8001342:	1ad6      	subs	r6, r2, r3
 8001344:	e6c0      	b.n	80010c8 <__aeabi_fsub+0x84>
 8001346:	4662      	mov	r2, ip
 8001348:	2a00      	cmp	r2, #0
 800134a:	d116      	bne.n	800137a <__aeabi_fsub+0x336>
 800134c:	4653      	mov	r3, sl
 800134e:	2b00      	cmp	r3, #0
 8001350:	d000      	beq.n	8001354 <__aeabi_fsub+0x310>
 8001352:	e72b      	b.n	80011ac <__aeabi_fsub+0x168>
 8001354:	2780      	movs	r7, #128	; 0x80
 8001356:	2500      	movs	r5, #0
 8001358:	20ff      	movs	r0, #255	; 0xff
 800135a:	03ff      	lsls	r7, r7, #15
 800135c:	e6d9      	b.n	8001112 <__aeabi_fsub+0xce>
 800135e:	000d      	movs	r5, r1
 8001360:	4643      	mov	r3, r8
 8001362:	0034      	movs	r4, r6
 8001364:	e7a6      	b.n	80012b4 <__aeabi_fsub+0x270>
 8001366:	4653      	mov	r3, sl
 8001368:	4463      	add	r3, ip
 800136a:	e6f7      	b.n	800115c <__aeabi_fsub+0x118>
 800136c:	4663      	mov	r3, ip
 800136e:	4652      	mov	r2, sl
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	e6a4      	b.n	80010be <__aeabi_fsub+0x7a>
 8001374:	4662      	mov	r2, ip
 8001376:	2a00      	cmp	r2, #0
 8001378:	d0d9      	beq.n	800132e <__aeabi_fsub+0x2ea>
 800137a:	4652      	mov	r2, sl
 800137c:	2a00      	cmp	r2, #0
 800137e:	d100      	bne.n	8001382 <__aeabi_fsub+0x33e>
 8001380:	e716      	b.n	80011b0 <__aeabi_fsub+0x16c>
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	03d2      	lsls	r2, r2, #15
 8001386:	4213      	tst	r3, r2
 8001388:	d100      	bne.n	800138c <__aeabi_fsub+0x348>
 800138a:	e711      	b.n	80011b0 <__aeabi_fsub+0x16c>
 800138c:	4640      	mov	r0, r8
 800138e:	4210      	tst	r0, r2
 8001390:	d000      	beq.n	8001394 <__aeabi_fsub+0x350>
 8001392:	e70d      	b.n	80011b0 <__aeabi_fsub+0x16c>
 8001394:	e70a      	b.n	80011ac <__aeabi_fsub+0x168>
 8001396:	4652      	mov	r2, sl
 8001398:	000d      	movs	r5, r1
 800139a:	0034      	movs	r4, r6
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	e68e      	b.n	80010be <__aeabi_fsub+0x7a>
 80013a0:	4653      	mov	r3, sl
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <__aeabi_fsub+0x374>
 80013a6:	000d      	movs	r5, r1
 80013a8:	4647      	mov	r7, r8
 80013aa:	e6b2      	b.n	8001112 <__aeabi_fsub+0xce>
 80013ac:	4643      	mov	r3, r8
 80013ae:	0034      	movs	r4, r6
 80013b0:	e780      	b.n	80012b4 <__aeabi_fsub+0x270>
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d000      	beq.n	80013b8 <__aeabi_fsub+0x374>
 80013b6:	e779      	b.n	80012ac <__aeabi_fsub+0x268>
 80013b8:	2500      	movs	r5, #0
 80013ba:	2700      	movs	r7, #0
 80013bc:	e6a9      	b.n	8001112 <__aeabi_fsub+0xce>
 80013be:	4647      	mov	r7, r8
 80013c0:	e6a7      	b.n	8001112 <__aeabi_fsub+0xce>
 80013c2:	4653      	mov	r3, sl
 80013c4:	0034      	movs	r4, r6
 80013c6:	4463      	add	r3, ip
 80013c8:	e6c8      	b.n	800115c <__aeabi_fsub+0x118>
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	7dffffff 	.word	0x7dffffff
 80013d0:	fbffffff 	.word	0xfbffffff

080013d4 <__aeabi_fcmpun>:
 80013d4:	0242      	lsls	r2, r0, #9
 80013d6:	024b      	lsls	r3, r1, #9
 80013d8:	0040      	lsls	r0, r0, #1
 80013da:	0049      	lsls	r1, r1, #1
 80013dc:	0a52      	lsrs	r2, r2, #9
 80013de:	0a5b      	lsrs	r3, r3, #9
 80013e0:	0e09      	lsrs	r1, r1, #24
 80013e2:	0e00      	lsrs	r0, r0, #24
 80013e4:	28ff      	cmp	r0, #255	; 0xff
 80013e6:	d006      	beq.n	80013f6 <__aeabi_fcmpun+0x22>
 80013e8:	2000      	movs	r0, #0
 80013ea:	29ff      	cmp	r1, #255	; 0xff
 80013ec:	d102      	bne.n	80013f4 <__aeabi_fcmpun+0x20>
 80013ee:	0018      	movs	r0, r3
 80013f0:	1e43      	subs	r3, r0, #1
 80013f2:	4198      	sbcs	r0, r3
 80013f4:	4770      	bx	lr
 80013f6:	38fe      	subs	r0, #254	; 0xfe
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d1fb      	bne.n	80013f4 <__aeabi_fcmpun+0x20>
 80013fc:	e7f4      	b.n	80013e8 <__aeabi_fcmpun+0x14>
 80013fe:	46c0      	nop			; (mov r8, r8)

08001400 <__aeabi_i2f>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	2800      	cmp	r0, #0
 8001404:	d013      	beq.n	800142e <__aeabi_i2f+0x2e>
 8001406:	17c3      	asrs	r3, r0, #31
 8001408:	18c5      	adds	r5, r0, r3
 800140a:	405d      	eors	r5, r3
 800140c:	0fc4      	lsrs	r4, r0, #31
 800140e:	0028      	movs	r0, r5
 8001410:	f001 ff24 	bl	800325c <__clzsi2>
 8001414:	239e      	movs	r3, #158	; 0x9e
 8001416:	0001      	movs	r1, r0
 8001418:	1a1b      	subs	r3, r3, r0
 800141a:	2b96      	cmp	r3, #150	; 0x96
 800141c:	dc0f      	bgt.n	800143e <__aeabi_i2f+0x3e>
 800141e:	2808      	cmp	r0, #8
 8001420:	dd01      	ble.n	8001426 <__aeabi_i2f+0x26>
 8001422:	3908      	subs	r1, #8
 8001424:	408d      	lsls	r5, r1
 8001426:	026d      	lsls	r5, r5, #9
 8001428:	0a6d      	lsrs	r5, r5, #9
 800142a:	b2d8      	uxtb	r0, r3
 800142c:	e002      	b.n	8001434 <__aeabi_i2f+0x34>
 800142e:	2400      	movs	r4, #0
 8001430:	2000      	movs	r0, #0
 8001432:	2500      	movs	r5, #0
 8001434:	05c0      	lsls	r0, r0, #23
 8001436:	4328      	orrs	r0, r5
 8001438:	07e4      	lsls	r4, r4, #31
 800143a:	4320      	orrs	r0, r4
 800143c:	bd70      	pop	{r4, r5, r6, pc}
 800143e:	2b99      	cmp	r3, #153	; 0x99
 8001440:	dd0b      	ble.n	800145a <__aeabi_i2f+0x5a>
 8001442:	2205      	movs	r2, #5
 8001444:	002e      	movs	r6, r5
 8001446:	1a12      	subs	r2, r2, r0
 8001448:	40d6      	lsrs	r6, r2
 800144a:	0002      	movs	r2, r0
 800144c:	321b      	adds	r2, #27
 800144e:	4095      	lsls	r5, r2
 8001450:	0028      	movs	r0, r5
 8001452:	1e45      	subs	r5, r0, #1
 8001454:	41a8      	sbcs	r0, r5
 8001456:	0035      	movs	r5, r6
 8001458:	4305      	orrs	r5, r0
 800145a:	2905      	cmp	r1, #5
 800145c:	dd01      	ble.n	8001462 <__aeabi_i2f+0x62>
 800145e:	1f4a      	subs	r2, r1, #5
 8001460:	4095      	lsls	r5, r2
 8001462:	002a      	movs	r2, r5
 8001464:	4e08      	ldr	r6, [pc, #32]	; (8001488 <__aeabi_i2f+0x88>)
 8001466:	4032      	ands	r2, r6
 8001468:	0768      	lsls	r0, r5, #29
 800146a:	d009      	beq.n	8001480 <__aeabi_i2f+0x80>
 800146c:	200f      	movs	r0, #15
 800146e:	4028      	ands	r0, r5
 8001470:	2804      	cmp	r0, #4
 8001472:	d005      	beq.n	8001480 <__aeabi_i2f+0x80>
 8001474:	3204      	adds	r2, #4
 8001476:	0150      	lsls	r0, r2, #5
 8001478:	d502      	bpl.n	8001480 <__aeabi_i2f+0x80>
 800147a:	239f      	movs	r3, #159	; 0x9f
 800147c:	4032      	ands	r2, r6
 800147e:	1a5b      	subs	r3, r3, r1
 8001480:	0192      	lsls	r2, r2, #6
 8001482:	0a55      	lsrs	r5, r2, #9
 8001484:	b2d8      	uxtb	r0, r3
 8001486:	e7d5      	b.n	8001434 <__aeabi_i2f+0x34>
 8001488:	fbffffff 	.word	0xfbffffff

0800148c <__aeabi_dadd>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	464f      	mov	r7, r9
 8001490:	46d6      	mov	lr, sl
 8001492:	4646      	mov	r6, r8
 8001494:	000d      	movs	r5, r1
 8001496:	0001      	movs	r1, r0
 8001498:	0018      	movs	r0, r3
 800149a:	b5c0      	push	{r6, r7, lr}
 800149c:	0017      	movs	r7, r2
 800149e:	032b      	lsls	r3, r5, #12
 80014a0:	0a5a      	lsrs	r2, r3, #9
 80014a2:	0f4b      	lsrs	r3, r1, #29
 80014a4:	4313      	orrs	r3, r2
 80014a6:	00ca      	lsls	r2, r1, #3
 80014a8:	4691      	mov	r9, r2
 80014aa:	0302      	lsls	r2, r0, #12
 80014ac:	006e      	lsls	r6, r5, #1
 80014ae:	0041      	lsls	r1, r0, #1
 80014b0:	0a52      	lsrs	r2, r2, #9
 80014b2:	0fec      	lsrs	r4, r5, #31
 80014b4:	0f7d      	lsrs	r5, r7, #29
 80014b6:	4315      	orrs	r5, r2
 80014b8:	0d76      	lsrs	r6, r6, #21
 80014ba:	0d49      	lsrs	r1, r1, #21
 80014bc:	0fc0      	lsrs	r0, r0, #31
 80014be:	4682      	mov	sl, r0
 80014c0:	46ac      	mov	ip, r5
 80014c2:	00ff      	lsls	r7, r7, #3
 80014c4:	1a72      	subs	r2, r6, r1
 80014c6:	4284      	cmp	r4, r0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x40>
 80014ca:	e098      	b.n	80015fe <__aeabi_dadd+0x172>
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	dc00      	bgt.n	80014d2 <__aeabi_dadd+0x46>
 80014d0:	e081      	b.n	80015d6 <__aeabi_dadd+0x14a>
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dadd+0x4c>
 80014d6:	e0b6      	b.n	8001646 <__aeabi_dadd+0x1ba>
 80014d8:	49c9      	ldr	r1, [pc, #804]	; (8001800 <__aeabi_dadd+0x374>)
 80014da:	428e      	cmp	r6, r1
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dadd+0x54>
 80014de:	e172      	b.n	80017c6 <__aeabi_dadd+0x33a>
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0028      	movs	r0, r5
 80014e4:	0409      	lsls	r1, r1, #16
 80014e6:	4308      	orrs	r0, r1
 80014e8:	4684      	mov	ip, r0
 80014ea:	2a38      	cmp	r2, #56	; 0x38
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x64>
 80014ee:	e15e      	b.n	80017ae <__aeabi_dadd+0x322>
 80014f0:	2a1f      	cmp	r2, #31
 80014f2:	dd00      	ble.n	80014f6 <__aeabi_dadd+0x6a>
 80014f4:	e1ee      	b.n	80018d4 <__aeabi_dadd+0x448>
 80014f6:	2020      	movs	r0, #32
 80014f8:	0039      	movs	r1, r7
 80014fa:	4665      	mov	r5, ip
 80014fc:	1a80      	subs	r0, r0, r2
 80014fe:	4087      	lsls	r7, r0
 8001500:	40d1      	lsrs	r1, r2
 8001502:	4085      	lsls	r5, r0
 8001504:	430d      	orrs	r5, r1
 8001506:	0039      	movs	r1, r7
 8001508:	1e4f      	subs	r7, r1, #1
 800150a:	41b9      	sbcs	r1, r7
 800150c:	4667      	mov	r7, ip
 800150e:	40d7      	lsrs	r7, r2
 8001510:	4329      	orrs	r1, r5
 8001512:	1bdb      	subs	r3, r3, r7
 8001514:	464a      	mov	r2, r9
 8001516:	1a55      	subs	r5, r2, r1
 8001518:	45a9      	cmp	r9, r5
 800151a:	4189      	sbcs	r1, r1
 800151c:	4249      	negs	r1, r1
 800151e:	1a5b      	subs	r3, r3, r1
 8001520:	4698      	mov	r8, r3
 8001522:	4643      	mov	r3, r8
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	d400      	bmi.n	800152a <__aeabi_dadd+0x9e>
 8001528:	e0cc      	b.n	80016c4 <__aeabi_dadd+0x238>
 800152a:	4643      	mov	r3, r8
 800152c:	025b      	lsls	r3, r3, #9
 800152e:	0a5b      	lsrs	r3, r3, #9
 8001530:	4698      	mov	r8, r3
 8001532:	4643      	mov	r3, r8
 8001534:	2b00      	cmp	r3, #0
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0xae>
 8001538:	e12c      	b.n	8001794 <__aeabi_dadd+0x308>
 800153a:	4640      	mov	r0, r8
 800153c:	f001 fe8e 	bl	800325c <__clzsi2>
 8001540:	0001      	movs	r1, r0
 8001542:	3908      	subs	r1, #8
 8001544:	2220      	movs	r2, #32
 8001546:	0028      	movs	r0, r5
 8001548:	4643      	mov	r3, r8
 800154a:	1a52      	subs	r2, r2, r1
 800154c:	408b      	lsls	r3, r1
 800154e:	40d0      	lsrs	r0, r2
 8001550:	408d      	lsls	r5, r1
 8001552:	4303      	orrs	r3, r0
 8001554:	428e      	cmp	r6, r1
 8001556:	dd00      	ble.n	800155a <__aeabi_dadd+0xce>
 8001558:	e117      	b.n	800178a <__aeabi_dadd+0x2fe>
 800155a:	1b8e      	subs	r6, r1, r6
 800155c:	1c72      	adds	r2, r6, #1
 800155e:	2a1f      	cmp	r2, #31
 8001560:	dd00      	ble.n	8001564 <__aeabi_dadd+0xd8>
 8001562:	e1a7      	b.n	80018b4 <__aeabi_dadd+0x428>
 8001564:	2120      	movs	r1, #32
 8001566:	0018      	movs	r0, r3
 8001568:	002e      	movs	r6, r5
 800156a:	1a89      	subs	r1, r1, r2
 800156c:	408d      	lsls	r5, r1
 800156e:	4088      	lsls	r0, r1
 8001570:	40d6      	lsrs	r6, r2
 8001572:	40d3      	lsrs	r3, r2
 8001574:	1e69      	subs	r1, r5, #1
 8001576:	418d      	sbcs	r5, r1
 8001578:	4330      	orrs	r0, r6
 800157a:	4698      	mov	r8, r3
 800157c:	2600      	movs	r6, #0
 800157e:	4305      	orrs	r5, r0
 8001580:	076b      	lsls	r3, r5, #29
 8001582:	d009      	beq.n	8001598 <__aeabi_dadd+0x10c>
 8001584:	230f      	movs	r3, #15
 8001586:	402b      	ands	r3, r5
 8001588:	2b04      	cmp	r3, #4
 800158a:	d005      	beq.n	8001598 <__aeabi_dadd+0x10c>
 800158c:	1d2b      	adds	r3, r5, #4
 800158e:	42ab      	cmp	r3, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426d      	negs	r5, r5
 8001594:	44a8      	add	r8, r5
 8001596:	001d      	movs	r5, r3
 8001598:	4643      	mov	r3, r8
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	d400      	bmi.n	80015a0 <__aeabi_dadd+0x114>
 800159e:	e094      	b.n	80016ca <__aeabi_dadd+0x23e>
 80015a0:	4b97      	ldr	r3, [pc, #604]	; (8001800 <__aeabi_dadd+0x374>)
 80015a2:	1c72      	adds	r2, r6, #1
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x11e>
 80015a8:	e09d      	b.n	80016e6 <__aeabi_dadd+0x25a>
 80015aa:	4641      	mov	r1, r8
 80015ac:	4b95      	ldr	r3, [pc, #596]	; (8001804 <__aeabi_dadd+0x378>)
 80015ae:	08ed      	lsrs	r5, r5, #3
 80015b0:	4019      	ands	r1, r3
 80015b2:	000b      	movs	r3, r1
 80015b4:	0552      	lsls	r2, r2, #21
 80015b6:	0749      	lsls	r1, r1, #29
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	4329      	orrs	r1, r5
 80015bc:	0b1b      	lsrs	r3, r3, #12
 80015be:	0d52      	lsrs	r2, r2, #21
 80015c0:	0512      	lsls	r2, r2, #20
 80015c2:	4313      	orrs	r3, r2
 80015c4:	07e4      	lsls	r4, r4, #31
 80015c6:	4323      	orrs	r3, r4
 80015c8:	0008      	movs	r0, r1
 80015ca:	0019      	movs	r1, r3
 80015cc:	bce0      	pop	{r5, r6, r7}
 80015ce:	46ba      	mov	sl, r7
 80015d0:	46b1      	mov	r9, r6
 80015d2:	46a8      	mov	r8, r5
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d043      	beq.n	8001662 <__aeabi_dadd+0x1d6>
 80015da:	1b8a      	subs	r2, r1, r6
 80015dc:	2e00      	cmp	r6, #0
 80015de:	d000      	beq.n	80015e2 <__aeabi_dadd+0x156>
 80015e0:	e12a      	b.n	8001838 <__aeabi_dadd+0x3ac>
 80015e2:	464c      	mov	r4, r9
 80015e4:	431c      	orrs	r4, r3
 80015e6:	d100      	bne.n	80015ea <__aeabi_dadd+0x15e>
 80015e8:	e1d1      	b.n	800198e <__aeabi_dadd+0x502>
 80015ea:	1e54      	subs	r4, r2, #1
 80015ec:	2a01      	cmp	r2, #1
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dadd+0x166>
 80015f0:	e21f      	b.n	8001a32 <__aeabi_dadd+0x5a6>
 80015f2:	4d83      	ldr	r5, [pc, #524]	; (8001800 <__aeabi_dadd+0x374>)
 80015f4:	42aa      	cmp	r2, r5
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x16e>
 80015f8:	e272      	b.n	8001ae0 <__aeabi_dadd+0x654>
 80015fa:	0022      	movs	r2, r4
 80015fc:	e123      	b.n	8001846 <__aeabi_dadd+0x3ba>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	dc00      	bgt.n	8001604 <__aeabi_dadd+0x178>
 8001602:	e098      	b.n	8001736 <__aeabi_dadd+0x2aa>
 8001604:	2900      	cmp	r1, #0
 8001606:	d042      	beq.n	800168e <__aeabi_dadd+0x202>
 8001608:	497d      	ldr	r1, [pc, #500]	; (8001800 <__aeabi_dadd+0x374>)
 800160a:	428e      	cmp	r6, r1
 800160c:	d100      	bne.n	8001610 <__aeabi_dadd+0x184>
 800160e:	e0da      	b.n	80017c6 <__aeabi_dadd+0x33a>
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0028      	movs	r0, r5
 8001614:	0409      	lsls	r1, r1, #16
 8001616:	4308      	orrs	r0, r1
 8001618:	4684      	mov	ip, r0
 800161a:	2a38      	cmp	r2, #56	; 0x38
 800161c:	dd00      	ble.n	8001620 <__aeabi_dadd+0x194>
 800161e:	e129      	b.n	8001874 <__aeabi_dadd+0x3e8>
 8001620:	2a1f      	cmp	r2, #31
 8001622:	dc00      	bgt.n	8001626 <__aeabi_dadd+0x19a>
 8001624:	e187      	b.n	8001936 <__aeabi_dadd+0x4aa>
 8001626:	0011      	movs	r1, r2
 8001628:	4665      	mov	r5, ip
 800162a:	3920      	subs	r1, #32
 800162c:	40cd      	lsrs	r5, r1
 800162e:	2a20      	cmp	r2, #32
 8001630:	d004      	beq.n	800163c <__aeabi_dadd+0x1b0>
 8001632:	2040      	movs	r0, #64	; 0x40
 8001634:	4661      	mov	r1, ip
 8001636:	1a82      	subs	r2, r0, r2
 8001638:	4091      	lsls	r1, r2
 800163a:	430f      	orrs	r7, r1
 800163c:	0039      	movs	r1, r7
 800163e:	1e4f      	subs	r7, r1, #1
 8001640:	41b9      	sbcs	r1, r7
 8001642:	430d      	orrs	r5, r1
 8001644:	e11b      	b.n	800187e <__aeabi_dadd+0x3f2>
 8001646:	0029      	movs	r1, r5
 8001648:	4339      	orrs	r1, r7
 800164a:	d100      	bne.n	800164e <__aeabi_dadd+0x1c2>
 800164c:	e0b5      	b.n	80017ba <__aeabi_dadd+0x32e>
 800164e:	1e51      	subs	r1, r2, #1
 8001650:	2a01      	cmp	r2, #1
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x1ca>
 8001654:	e1ab      	b.n	80019ae <__aeabi_dadd+0x522>
 8001656:	486a      	ldr	r0, [pc, #424]	; (8001800 <__aeabi_dadd+0x374>)
 8001658:	4282      	cmp	r2, r0
 800165a:	d100      	bne.n	800165e <__aeabi_dadd+0x1d2>
 800165c:	e1b2      	b.n	80019c4 <__aeabi_dadd+0x538>
 800165e:	000a      	movs	r2, r1
 8001660:	e743      	b.n	80014ea <__aeabi_dadd+0x5e>
 8001662:	4969      	ldr	r1, [pc, #420]	; (8001808 <__aeabi_dadd+0x37c>)
 8001664:	1c75      	adds	r5, r6, #1
 8001666:	420d      	tst	r5, r1
 8001668:	d000      	beq.n	800166c <__aeabi_dadd+0x1e0>
 800166a:	e0cf      	b.n	800180c <__aeabi_dadd+0x380>
 800166c:	2e00      	cmp	r6, #0
 800166e:	d000      	beq.n	8001672 <__aeabi_dadd+0x1e6>
 8001670:	e193      	b.n	800199a <__aeabi_dadd+0x50e>
 8001672:	4649      	mov	r1, r9
 8001674:	4319      	orrs	r1, r3
 8001676:	d100      	bne.n	800167a <__aeabi_dadd+0x1ee>
 8001678:	e1d1      	b.n	8001a1e <__aeabi_dadd+0x592>
 800167a:	4661      	mov	r1, ip
 800167c:	4339      	orrs	r1, r7
 800167e:	d000      	beq.n	8001682 <__aeabi_dadd+0x1f6>
 8001680:	e1e3      	b.n	8001a4a <__aeabi_dadd+0x5be>
 8001682:	4649      	mov	r1, r9
 8001684:	0758      	lsls	r0, r3, #29
 8001686:	08c9      	lsrs	r1, r1, #3
 8001688:	4301      	orrs	r1, r0
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	e026      	b.n	80016dc <__aeabi_dadd+0x250>
 800168e:	0029      	movs	r1, r5
 8001690:	4339      	orrs	r1, r7
 8001692:	d100      	bne.n	8001696 <__aeabi_dadd+0x20a>
 8001694:	e091      	b.n	80017ba <__aeabi_dadd+0x32e>
 8001696:	1e51      	subs	r1, r2, #1
 8001698:	2a01      	cmp	r2, #1
 800169a:	d005      	beq.n	80016a8 <__aeabi_dadd+0x21c>
 800169c:	4858      	ldr	r0, [pc, #352]	; (8001800 <__aeabi_dadd+0x374>)
 800169e:	4282      	cmp	r2, r0
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dadd+0x218>
 80016a2:	e18f      	b.n	80019c4 <__aeabi_dadd+0x538>
 80016a4:	000a      	movs	r2, r1
 80016a6:	e7b8      	b.n	800161a <__aeabi_dadd+0x18e>
 80016a8:	003d      	movs	r5, r7
 80016aa:	444d      	add	r5, r9
 80016ac:	454d      	cmp	r5, r9
 80016ae:	4189      	sbcs	r1, r1
 80016b0:	4463      	add	r3, ip
 80016b2:	4698      	mov	r8, r3
 80016b4:	4249      	negs	r1, r1
 80016b6:	4488      	add	r8, r1
 80016b8:	4643      	mov	r3, r8
 80016ba:	2602      	movs	r6, #2
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	d500      	bpl.n	80016c2 <__aeabi_dadd+0x236>
 80016c0:	e0eb      	b.n	800189a <__aeabi_dadd+0x40e>
 80016c2:	3e01      	subs	r6, #1
 80016c4:	076b      	lsls	r3, r5, #29
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x23e>
 80016c8:	e75c      	b.n	8001584 <__aeabi_dadd+0xf8>
 80016ca:	4643      	mov	r3, r8
 80016cc:	08e9      	lsrs	r1, r5, #3
 80016ce:	075a      	lsls	r2, r3, #29
 80016d0:	4311      	orrs	r1, r2
 80016d2:	0032      	movs	r2, r6
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	484a      	ldr	r0, [pc, #296]	; (8001800 <__aeabi_dadd+0x374>)
 80016d8:	4282      	cmp	r2, r0
 80016da:	d021      	beq.n	8001720 <__aeabi_dadd+0x294>
 80016dc:	031b      	lsls	r3, r3, #12
 80016de:	0552      	lsls	r2, r2, #21
 80016e0:	0b1b      	lsrs	r3, r3, #12
 80016e2:	0d52      	lsrs	r2, r2, #21
 80016e4:	e76c      	b.n	80015c0 <__aeabi_dadd+0x134>
 80016e6:	2300      	movs	r3, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	e769      	b.n	80015c0 <__aeabi_dadd+0x134>
 80016ec:	002a      	movs	r2, r5
 80016ee:	433a      	orrs	r2, r7
 80016f0:	d069      	beq.n	80017c6 <__aeabi_dadd+0x33a>
 80016f2:	464a      	mov	r2, r9
 80016f4:	0758      	lsls	r0, r3, #29
 80016f6:	08d1      	lsrs	r1, r2, #3
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	031b      	lsls	r3, r3, #12
 80016fe:	4308      	orrs	r0, r1
 8001700:	421a      	tst	r2, r3
 8001702:	d007      	beq.n	8001714 <__aeabi_dadd+0x288>
 8001704:	0029      	movs	r1, r5
 8001706:	08ed      	lsrs	r5, r5, #3
 8001708:	421d      	tst	r5, r3
 800170a:	d103      	bne.n	8001714 <__aeabi_dadd+0x288>
 800170c:	002a      	movs	r2, r5
 800170e:	08ff      	lsrs	r7, r7, #3
 8001710:	0748      	lsls	r0, r1, #29
 8001712:	4338      	orrs	r0, r7
 8001714:	0f43      	lsrs	r3, r0, #29
 8001716:	00c1      	lsls	r1, r0, #3
 8001718:	075b      	lsls	r3, r3, #29
 800171a:	08c9      	lsrs	r1, r1, #3
 800171c:	4319      	orrs	r1, r3
 800171e:	0013      	movs	r3, r2
 8001720:	000a      	movs	r2, r1
 8001722:	431a      	orrs	r2, r3
 8001724:	d100      	bne.n	8001728 <__aeabi_dadd+0x29c>
 8001726:	e213      	b.n	8001b50 <__aeabi_dadd+0x6c4>
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	0312      	lsls	r2, r2, #12
 800172c:	4313      	orrs	r3, r2
 800172e:	031b      	lsls	r3, r3, #12
 8001730:	4a33      	ldr	r2, [pc, #204]	; (8001800 <__aeabi_dadd+0x374>)
 8001732:	0b1b      	lsrs	r3, r3, #12
 8001734:	e744      	b.n	80015c0 <__aeabi_dadd+0x134>
 8001736:	2a00      	cmp	r2, #0
 8001738:	d04b      	beq.n	80017d2 <__aeabi_dadd+0x346>
 800173a:	1b8a      	subs	r2, r1, r6
 800173c:	2e00      	cmp	r6, #0
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x2b6>
 8001740:	e0e7      	b.n	8001912 <__aeabi_dadd+0x486>
 8001742:	482f      	ldr	r0, [pc, #188]	; (8001800 <__aeabi_dadd+0x374>)
 8001744:	4281      	cmp	r1, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x2be>
 8001748:	e195      	b.n	8001a76 <__aeabi_dadd+0x5ea>
 800174a:	2080      	movs	r0, #128	; 0x80
 800174c:	0400      	lsls	r0, r0, #16
 800174e:	4303      	orrs	r3, r0
 8001750:	2a38      	cmp	r2, #56	; 0x38
 8001752:	dd00      	ble.n	8001756 <__aeabi_dadd+0x2ca>
 8001754:	e143      	b.n	80019de <__aeabi_dadd+0x552>
 8001756:	2a1f      	cmp	r2, #31
 8001758:	dd00      	ble.n	800175c <__aeabi_dadd+0x2d0>
 800175a:	e1db      	b.n	8001b14 <__aeabi_dadd+0x688>
 800175c:	2020      	movs	r0, #32
 800175e:	001d      	movs	r5, r3
 8001760:	464e      	mov	r6, r9
 8001762:	1a80      	subs	r0, r0, r2
 8001764:	4085      	lsls	r5, r0
 8001766:	40d6      	lsrs	r6, r2
 8001768:	4335      	orrs	r5, r6
 800176a:	464e      	mov	r6, r9
 800176c:	4086      	lsls	r6, r0
 800176e:	0030      	movs	r0, r6
 8001770:	40d3      	lsrs	r3, r2
 8001772:	1e46      	subs	r6, r0, #1
 8001774:	41b0      	sbcs	r0, r6
 8001776:	449c      	add	ip, r3
 8001778:	4305      	orrs	r5, r0
 800177a:	19ed      	adds	r5, r5, r7
 800177c:	42bd      	cmp	r5, r7
 800177e:	419b      	sbcs	r3, r3
 8001780:	425b      	negs	r3, r3
 8001782:	4463      	add	r3, ip
 8001784:	4698      	mov	r8, r3
 8001786:	000e      	movs	r6, r1
 8001788:	e07f      	b.n	800188a <__aeabi_dadd+0x3fe>
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <__aeabi_dadd+0x378>)
 800178c:	1a76      	subs	r6, r6, r1
 800178e:	4013      	ands	r3, r2
 8001790:	4698      	mov	r8, r3
 8001792:	e6f5      	b.n	8001580 <__aeabi_dadd+0xf4>
 8001794:	0028      	movs	r0, r5
 8001796:	f001 fd61 	bl	800325c <__clzsi2>
 800179a:	0001      	movs	r1, r0
 800179c:	3118      	adds	r1, #24
 800179e:	291f      	cmp	r1, #31
 80017a0:	dc00      	bgt.n	80017a4 <__aeabi_dadd+0x318>
 80017a2:	e6cf      	b.n	8001544 <__aeabi_dadd+0xb8>
 80017a4:	002b      	movs	r3, r5
 80017a6:	3808      	subs	r0, #8
 80017a8:	4083      	lsls	r3, r0
 80017aa:	2500      	movs	r5, #0
 80017ac:	e6d2      	b.n	8001554 <__aeabi_dadd+0xc8>
 80017ae:	4662      	mov	r2, ip
 80017b0:	433a      	orrs	r2, r7
 80017b2:	0011      	movs	r1, r2
 80017b4:	1e4f      	subs	r7, r1, #1
 80017b6:	41b9      	sbcs	r1, r7
 80017b8:	e6ac      	b.n	8001514 <__aeabi_dadd+0x88>
 80017ba:	4649      	mov	r1, r9
 80017bc:	0758      	lsls	r0, r3, #29
 80017be:	08c9      	lsrs	r1, r1, #3
 80017c0:	4301      	orrs	r1, r0
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	e787      	b.n	80016d6 <__aeabi_dadd+0x24a>
 80017c6:	4649      	mov	r1, r9
 80017c8:	075a      	lsls	r2, r3, #29
 80017ca:	08c9      	lsrs	r1, r1, #3
 80017cc:	4311      	orrs	r1, r2
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	e7a6      	b.n	8001720 <__aeabi_dadd+0x294>
 80017d2:	490d      	ldr	r1, [pc, #52]	; (8001808 <__aeabi_dadd+0x37c>)
 80017d4:	1c70      	adds	r0, r6, #1
 80017d6:	4208      	tst	r0, r1
 80017d8:	d000      	beq.n	80017dc <__aeabi_dadd+0x350>
 80017da:	e0bb      	b.n	8001954 <__aeabi_dadd+0x4c8>
 80017dc:	2e00      	cmp	r6, #0
 80017de:	d000      	beq.n	80017e2 <__aeabi_dadd+0x356>
 80017e0:	e114      	b.n	8001a0c <__aeabi_dadd+0x580>
 80017e2:	4649      	mov	r1, r9
 80017e4:	4319      	orrs	r1, r3
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x35e>
 80017e8:	e175      	b.n	8001ad6 <__aeabi_dadd+0x64a>
 80017ea:	0029      	movs	r1, r5
 80017ec:	4339      	orrs	r1, r7
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x366>
 80017f0:	e17e      	b.n	8001af0 <__aeabi_dadd+0x664>
 80017f2:	4649      	mov	r1, r9
 80017f4:	0758      	lsls	r0, r3, #29
 80017f6:	08c9      	lsrs	r1, r1, #3
 80017f8:	4301      	orrs	r1, r0
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	e76e      	b.n	80016dc <__aeabi_dadd+0x250>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	ff7fffff 	.word	0xff7fffff
 8001808:	000007fe 	.word	0x000007fe
 800180c:	4649      	mov	r1, r9
 800180e:	1bcd      	subs	r5, r1, r7
 8001810:	4661      	mov	r1, ip
 8001812:	1a58      	subs	r0, r3, r1
 8001814:	45a9      	cmp	r9, r5
 8001816:	4189      	sbcs	r1, r1
 8001818:	4249      	negs	r1, r1
 800181a:	4688      	mov	r8, r1
 800181c:	0001      	movs	r1, r0
 800181e:	4640      	mov	r0, r8
 8001820:	1a09      	subs	r1, r1, r0
 8001822:	4688      	mov	r8, r1
 8001824:	0209      	lsls	r1, r1, #8
 8001826:	d500      	bpl.n	800182a <__aeabi_dadd+0x39e>
 8001828:	e0a6      	b.n	8001978 <__aeabi_dadd+0x4ec>
 800182a:	4641      	mov	r1, r8
 800182c:	4329      	orrs	r1, r5
 800182e:	d000      	beq.n	8001832 <__aeabi_dadd+0x3a6>
 8001830:	e67f      	b.n	8001532 <__aeabi_dadd+0xa6>
 8001832:	2300      	movs	r3, #0
 8001834:	2400      	movs	r4, #0
 8001836:	e751      	b.n	80016dc <__aeabi_dadd+0x250>
 8001838:	4cc7      	ldr	r4, [pc, #796]	; (8001b58 <__aeabi_dadd+0x6cc>)
 800183a:	42a1      	cmp	r1, r4
 800183c:	d100      	bne.n	8001840 <__aeabi_dadd+0x3b4>
 800183e:	e0c7      	b.n	80019d0 <__aeabi_dadd+0x544>
 8001840:	2480      	movs	r4, #128	; 0x80
 8001842:	0424      	lsls	r4, r4, #16
 8001844:	4323      	orrs	r3, r4
 8001846:	2a38      	cmp	r2, #56	; 0x38
 8001848:	dc54      	bgt.n	80018f4 <__aeabi_dadd+0x468>
 800184a:	2a1f      	cmp	r2, #31
 800184c:	dd00      	ble.n	8001850 <__aeabi_dadd+0x3c4>
 800184e:	e0cc      	b.n	80019ea <__aeabi_dadd+0x55e>
 8001850:	2420      	movs	r4, #32
 8001852:	4648      	mov	r0, r9
 8001854:	1aa4      	subs	r4, r4, r2
 8001856:	001d      	movs	r5, r3
 8001858:	464e      	mov	r6, r9
 800185a:	40a0      	lsls	r0, r4
 800185c:	40d6      	lsrs	r6, r2
 800185e:	40a5      	lsls	r5, r4
 8001860:	0004      	movs	r4, r0
 8001862:	40d3      	lsrs	r3, r2
 8001864:	4662      	mov	r2, ip
 8001866:	4335      	orrs	r5, r6
 8001868:	1e66      	subs	r6, r4, #1
 800186a:	41b4      	sbcs	r4, r6
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	469c      	mov	ip, r3
 8001870:	4325      	orrs	r5, r4
 8001872:	e044      	b.n	80018fe <__aeabi_dadd+0x472>
 8001874:	4662      	mov	r2, ip
 8001876:	433a      	orrs	r2, r7
 8001878:	0015      	movs	r5, r2
 800187a:	1e6f      	subs	r7, r5, #1
 800187c:	41bd      	sbcs	r5, r7
 800187e:	444d      	add	r5, r9
 8001880:	454d      	cmp	r5, r9
 8001882:	4189      	sbcs	r1, r1
 8001884:	4249      	negs	r1, r1
 8001886:	4688      	mov	r8, r1
 8001888:	4498      	add	r8, r3
 800188a:	4643      	mov	r3, r8
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_dadd+0x406>
 8001890:	e718      	b.n	80016c4 <__aeabi_dadd+0x238>
 8001892:	4bb1      	ldr	r3, [pc, #708]	; (8001b58 <__aeabi_dadd+0x6cc>)
 8001894:	3601      	adds	r6, #1
 8001896:	429e      	cmp	r6, r3
 8001898:	d049      	beq.n	800192e <__aeabi_dadd+0x4a2>
 800189a:	4642      	mov	r2, r8
 800189c:	4baf      	ldr	r3, [pc, #700]	; (8001b5c <__aeabi_dadd+0x6d0>)
 800189e:	2101      	movs	r1, #1
 80018a0:	401a      	ands	r2, r3
 80018a2:	0013      	movs	r3, r2
 80018a4:	086a      	lsrs	r2, r5, #1
 80018a6:	400d      	ands	r5, r1
 80018a8:	4315      	orrs	r5, r2
 80018aa:	07d9      	lsls	r1, r3, #31
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	4698      	mov	r8, r3
 80018b0:	430d      	orrs	r5, r1
 80018b2:	e665      	b.n	8001580 <__aeabi_dadd+0xf4>
 80018b4:	0018      	movs	r0, r3
 80018b6:	3e1f      	subs	r6, #31
 80018b8:	40f0      	lsrs	r0, r6
 80018ba:	2a20      	cmp	r2, #32
 80018bc:	d003      	beq.n	80018c6 <__aeabi_dadd+0x43a>
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	1a8a      	subs	r2, r1, r2
 80018c2:	4093      	lsls	r3, r2
 80018c4:	431d      	orrs	r5, r3
 80018c6:	1e69      	subs	r1, r5, #1
 80018c8:	418d      	sbcs	r5, r1
 80018ca:	2300      	movs	r3, #0
 80018cc:	2600      	movs	r6, #0
 80018ce:	4698      	mov	r8, r3
 80018d0:	4305      	orrs	r5, r0
 80018d2:	e6f7      	b.n	80016c4 <__aeabi_dadd+0x238>
 80018d4:	0011      	movs	r1, r2
 80018d6:	4665      	mov	r5, ip
 80018d8:	3920      	subs	r1, #32
 80018da:	40cd      	lsrs	r5, r1
 80018dc:	2a20      	cmp	r2, #32
 80018de:	d004      	beq.n	80018ea <__aeabi_dadd+0x45e>
 80018e0:	2040      	movs	r0, #64	; 0x40
 80018e2:	4661      	mov	r1, ip
 80018e4:	1a82      	subs	r2, r0, r2
 80018e6:	4091      	lsls	r1, r2
 80018e8:	430f      	orrs	r7, r1
 80018ea:	0039      	movs	r1, r7
 80018ec:	1e4f      	subs	r7, r1, #1
 80018ee:	41b9      	sbcs	r1, r7
 80018f0:	4329      	orrs	r1, r5
 80018f2:	e60f      	b.n	8001514 <__aeabi_dadd+0x88>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4313      	orrs	r3, r2
 80018f8:	001d      	movs	r5, r3
 80018fa:	1e6b      	subs	r3, r5, #1
 80018fc:	419d      	sbcs	r5, r3
 80018fe:	1b7d      	subs	r5, r7, r5
 8001900:	42af      	cmp	r7, r5
 8001902:	419b      	sbcs	r3, r3
 8001904:	4662      	mov	r2, ip
 8001906:	425b      	negs	r3, r3
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	4698      	mov	r8, r3
 800190c:	4654      	mov	r4, sl
 800190e:	000e      	movs	r6, r1
 8001910:	e607      	b.n	8001522 <__aeabi_dadd+0x96>
 8001912:	4648      	mov	r0, r9
 8001914:	4318      	orrs	r0, r3
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x48e>
 8001918:	e0b3      	b.n	8001a82 <__aeabi_dadd+0x5f6>
 800191a:	1e50      	subs	r0, r2, #1
 800191c:	2a01      	cmp	r2, #1
 800191e:	d100      	bne.n	8001922 <__aeabi_dadd+0x496>
 8001920:	e10d      	b.n	8001b3e <__aeabi_dadd+0x6b2>
 8001922:	4d8d      	ldr	r5, [pc, #564]	; (8001b58 <__aeabi_dadd+0x6cc>)
 8001924:	42aa      	cmp	r2, r5
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x49e>
 8001928:	e0a5      	b.n	8001a76 <__aeabi_dadd+0x5ea>
 800192a:	0002      	movs	r2, r0
 800192c:	e710      	b.n	8001750 <__aeabi_dadd+0x2c4>
 800192e:	0032      	movs	r2, r6
 8001930:	2300      	movs	r3, #0
 8001932:	2100      	movs	r1, #0
 8001934:	e644      	b.n	80015c0 <__aeabi_dadd+0x134>
 8001936:	2120      	movs	r1, #32
 8001938:	0038      	movs	r0, r7
 800193a:	1a89      	subs	r1, r1, r2
 800193c:	4665      	mov	r5, ip
 800193e:	408f      	lsls	r7, r1
 8001940:	408d      	lsls	r5, r1
 8001942:	40d0      	lsrs	r0, r2
 8001944:	1e79      	subs	r1, r7, #1
 8001946:	418f      	sbcs	r7, r1
 8001948:	4305      	orrs	r5, r0
 800194a:	433d      	orrs	r5, r7
 800194c:	4667      	mov	r7, ip
 800194e:	40d7      	lsrs	r7, r2
 8001950:	19db      	adds	r3, r3, r7
 8001952:	e794      	b.n	800187e <__aeabi_dadd+0x3f2>
 8001954:	4a80      	ldr	r2, [pc, #512]	; (8001b58 <__aeabi_dadd+0x6cc>)
 8001956:	4290      	cmp	r0, r2
 8001958:	d100      	bne.n	800195c <__aeabi_dadd+0x4d0>
 800195a:	e0ec      	b.n	8001b36 <__aeabi_dadd+0x6aa>
 800195c:	0039      	movs	r1, r7
 800195e:	4449      	add	r1, r9
 8001960:	4549      	cmp	r1, r9
 8001962:	4192      	sbcs	r2, r2
 8001964:	4463      	add	r3, ip
 8001966:	4252      	negs	r2, r2
 8001968:	189b      	adds	r3, r3, r2
 800196a:	07dd      	lsls	r5, r3, #31
 800196c:	0849      	lsrs	r1, r1, #1
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	4698      	mov	r8, r3
 8001972:	0006      	movs	r6, r0
 8001974:	430d      	orrs	r5, r1
 8001976:	e6a5      	b.n	80016c4 <__aeabi_dadd+0x238>
 8001978:	464a      	mov	r2, r9
 800197a:	1abd      	subs	r5, r7, r2
 800197c:	42af      	cmp	r7, r5
 800197e:	4189      	sbcs	r1, r1
 8001980:	4662      	mov	r2, ip
 8001982:	4249      	negs	r1, r1
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	1a5b      	subs	r3, r3, r1
 8001988:	4698      	mov	r8, r3
 800198a:	4654      	mov	r4, sl
 800198c:	e5d1      	b.n	8001532 <__aeabi_dadd+0xa6>
 800198e:	076c      	lsls	r4, r5, #29
 8001990:	08f9      	lsrs	r1, r7, #3
 8001992:	4321      	orrs	r1, r4
 8001994:	08eb      	lsrs	r3, r5, #3
 8001996:	0004      	movs	r4, r0
 8001998:	e69d      	b.n	80016d6 <__aeabi_dadd+0x24a>
 800199a:	464a      	mov	r2, r9
 800199c:	431a      	orrs	r2, r3
 800199e:	d175      	bne.n	8001a8c <__aeabi_dadd+0x600>
 80019a0:	4661      	mov	r1, ip
 80019a2:	4339      	orrs	r1, r7
 80019a4:	d114      	bne.n	80019d0 <__aeabi_dadd+0x544>
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	2400      	movs	r4, #0
 80019aa:	031b      	lsls	r3, r3, #12
 80019ac:	e6bc      	b.n	8001728 <__aeabi_dadd+0x29c>
 80019ae:	464a      	mov	r2, r9
 80019b0:	1bd5      	subs	r5, r2, r7
 80019b2:	45a9      	cmp	r9, r5
 80019b4:	4189      	sbcs	r1, r1
 80019b6:	4662      	mov	r2, ip
 80019b8:	4249      	negs	r1, r1
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	1a5b      	subs	r3, r3, r1
 80019be:	4698      	mov	r8, r3
 80019c0:	2601      	movs	r6, #1
 80019c2:	e5ae      	b.n	8001522 <__aeabi_dadd+0x96>
 80019c4:	464a      	mov	r2, r9
 80019c6:	08d1      	lsrs	r1, r2, #3
 80019c8:	075a      	lsls	r2, r3, #29
 80019ca:	4311      	orrs	r1, r2
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	e6a7      	b.n	8001720 <__aeabi_dadd+0x294>
 80019d0:	4663      	mov	r3, ip
 80019d2:	08f9      	lsrs	r1, r7, #3
 80019d4:	075a      	lsls	r2, r3, #29
 80019d6:	4654      	mov	r4, sl
 80019d8:	4311      	orrs	r1, r2
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	e6a0      	b.n	8001720 <__aeabi_dadd+0x294>
 80019de:	464a      	mov	r2, r9
 80019e0:	4313      	orrs	r3, r2
 80019e2:	001d      	movs	r5, r3
 80019e4:	1e6b      	subs	r3, r5, #1
 80019e6:	419d      	sbcs	r5, r3
 80019e8:	e6c7      	b.n	800177a <__aeabi_dadd+0x2ee>
 80019ea:	0014      	movs	r4, r2
 80019ec:	001e      	movs	r6, r3
 80019ee:	3c20      	subs	r4, #32
 80019f0:	40e6      	lsrs	r6, r4
 80019f2:	2a20      	cmp	r2, #32
 80019f4:	d005      	beq.n	8001a02 <__aeabi_dadd+0x576>
 80019f6:	2440      	movs	r4, #64	; 0x40
 80019f8:	1aa2      	subs	r2, r4, r2
 80019fa:	4093      	lsls	r3, r2
 80019fc:	464a      	mov	r2, r9
 80019fe:	431a      	orrs	r2, r3
 8001a00:	4691      	mov	r9, r2
 8001a02:	464d      	mov	r5, r9
 8001a04:	1e6b      	subs	r3, r5, #1
 8001a06:	419d      	sbcs	r5, r3
 8001a08:	4335      	orrs	r5, r6
 8001a0a:	e778      	b.n	80018fe <__aeabi_dadd+0x472>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	d000      	beq.n	8001a14 <__aeabi_dadd+0x588>
 8001a12:	e66b      	b.n	80016ec <__aeabi_dadd+0x260>
 8001a14:	076b      	lsls	r3, r5, #29
 8001a16:	08f9      	lsrs	r1, r7, #3
 8001a18:	4319      	orrs	r1, r3
 8001a1a:	08eb      	lsrs	r3, r5, #3
 8001a1c:	e680      	b.n	8001720 <__aeabi_dadd+0x294>
 8001a1e:	4661      	mov	r1, ip
 8001a20:	4339      	orrs	r1, r7
 8001a22:	d054      	beq.n	8001ace <__aeabi_dadd+0x642>
 8001a24:	4663      	mov	r3, ip
 8001a26:	08f9      	lsrs	r1, r7, #3
 8001a28:	075c      	lsls	r4, r3, #29
 8001a2a:	4321      	orrs	r1, r4
 8001a2c:	08db      	lsrs	r3, r3, #3
 8001a2e:	0004      	movs	r4, r0
 8001a30:	e654      	b.n	80016dc <__aeabi_dadd+0x250>
 8001a32:	464a      	mov	r2, r9
 8001a34:	1abd      	subs	r5, r7, r2
 8001a36:	42af      	cmp	r7, r5
 8001a38:	4189      	sbcs	r1, r1
 8001a3a:	4662      	mov	r2, ip
 8001a3c:	4249      	negs	r1, r1
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	1a5b      	subs	r3, r3, r1
 8001a42:	4698      	mov	r8, r3
 8001a44:	0004      	movs	r4, r0
 8001a46:	2601      	movs	r6, #1
 8001a48:	e56b      	b.n	8001522 <__aeabi_dadd+0x96>
 8001a4a:	464a      	mov	r2, r9
 8001a4c:	1bd5      	subs	r5, r2, r7
 8001a4e:	45a9      	cmp	r9, r5
 8001a50:	4189      	sbcs	r1, r1
 8001a52:	4662      	mov	r2, ip
 8001a54:	4249      	negs	r1, r1
 8001a56:	1a9a      	subs	r2, r3, r2
 8001a58:	1a52      	subs	r2, r2, r1
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	0212      	lsls	r2, r2, #8
 8001a5e:	d532      	bpl.n	8001ac6 <__aeabi_dadd+0x63a>
 8001a60:	464a      	mov	r2, r9
 8001a62:	1abd      	subs	r5, r7, r2
 8001a64:	42af      	cmp	r7, r5
 8001a66:	4189      	sbcs	r1, r1
 8001a68:	4662      	mov	r2, ip
 8001a6a:	4249      	negs	r1, r1
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	1a5b      	subs	r3, r3, r1
 8001a70:	4698      	mov	r8, r3
 8001a72:	0004      	movs	r4, r0
 8001a74:	e584      	b.n	8001580 <__aeabi_dadd+0xf4>
 8001a76:	4663      	mov	r3, ip
 8001a78:	08f9      	lsrs	r1, r7, #3
 8001a7a:	075a      	lsls	r2, r3, #29
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	e64e      	b.n	8001720 <__aeabi_dadd+0x294>
 8001a82:	08f9      	lsrs	r1, r7, #3
 8001a84:	0768      	lsls	r0, r5, #29
 8001a86:	4301      	orrs	r1, r0
 8001a88:	08eb      	lsrs	r3, r5, #3
 8001a8a:	e624      	b.n	80016d6 <__aeabi_dadd+0x24a>
 8001a8c:	4662      	mov	r2, ip
 8001a8e:	433a      	orrs	r2, r7
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dadd+0x608>
 8001a92:	e698      	b.n	80017c6 <__aeabi_dadd+0x33a>
 8001a94:	464a      	mov	r2, r9
 8001a96:	08d1      	lsrs	r1, r2, #3
 8001a98:	075a      	lsls	r2, r3, #29
 8001a9a:	4311      	orrs	r1, r2
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	031b      	lsls	r3, r3, #12
 8001aa2:	421a      	tst	r2, r3
 8001aa4:	d008      	beq.n	8001ab8 <__aeabi_dadd+0x62c>
 8001aa6:	4660      	mov	r0, ip
 8001aa8:	08c5      	lsrs	r5, r0, #3
 8001aaa:	421d      	tst	r5, r3
 8001aac:	d104      	bne.n	8001ab8 <__aeabi_dadd+0x62c>
 8001aae:	4654      	mov	r4, sl
 8001ab0:	002a      	movs	r2, r5
 8001ab2:	08f9      	lsrs	r1, r7, #3
 8001ab4:	0743      	lsls	r3, r0, #29
 8001ab6:	4319      	orrs	r1, r3
 8001ab8:	0f4b      	lsrs	r3, r1, #29
 8001aba:	00c9      	lsls	r1, r1, #3
 8001abc:	075b      	lsls	r3, r3, #29
 8001abe:	08c9      	lsrs	r1, r1, #3
 8001ac0:	4319      	orrs	r1, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	e62c      	b.n	8001720 <__aeabi_dadd+0x294>
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	4329      	orrs	r1, r5
 8001aca:	d000      	beq.n	8001ace <__aeabi_dadd+0x642>
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x238>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	000a      	movs	r2, r1
 8001ad2:	2400      	movs	r4, #0
 8001ad4:	e602      	b.n	80016dc <__aeabi_dadd+0x250>
 8001ad6:	076b      	lsls	r3, r5, #29
 8001ad8:	08f9      	lsrs	r1, r7, #3
 8001ada:	4319      	orrs	r1, r3
 8001adc:	08eb      	lsrs	r3, r5, #3
 8001ade:	e5fd      	b.n	80016dc <__aeabi_dadd+0x250>
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	08f9      	lsrs	r1, r7, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4319      	orrs	r1, r3
 8001ae8:	4663      	mov	r3, ip
 8001aea:	0004      	movs	r4, r0
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	e617      	b.n	8001720 <__aeabi_dadd+0x294>
 8001af0:	003d      	movs	r5, r7
 8001af2:	444d      	add	r5, r9
 8001af4:	4463      	add	r3, ip
 8001af6:	454d      	cmp	r5, r9
 8001af8:	4189      	sbcs	r1, r1
 8001afa:	4698      	mov	r8, r3
 8001afc:	4249      	negs	r1, r1
 8001afe:	4488      	add	r8, r1
 8001b00:	4643      	mov	r3, r8
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	d400      	bmi.n	8001b08 <__aeabi_dadd+0x67c>
 8001b06:	e5dd      	b.n	80016c4 <__aeabi_dadd+0x238>
 8001b08:	4642      	mov	r2, r8
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <__aeabi_dadd+0x6d0>)
 8001b0c:	2601      	movs	r6, #1
 8001b0e:	401a      	ands	r2, r3
 8001b10:	4690      	mov	r8, r2
 8001b12:	e5d7      	b.n	80016c4 <__aeabi_dadd+0x238>
 8001b14:	0010      	movs	r0, r2
 8001b16:	001e      	movs	r6, r3
 8001b18:	3820      	subs	r0, #32
 8001b1a:	40c6      	lsrs	r6, r0
 8001b1c:	2a20      	cmp	r2, #32
 8001b1e:	d005      	beq.n	8001b2c <__aeabi_dadd+0x6a0>
 8001b20:	2040      	movs	r0, #64	; 0x40
 8001b22:	1a82      	subs	r2, r0, r2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	464a      	mov	r2, r9
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	4691      	mov	r9, r2
 8001b2c:	464d      	mov	r5, r9
 8001b2e:	1e6b      	subs	r3, r5, #1
 8001b30:	419d      	sbcs	r5, r3
 8001b32:	4335      	orrs	r5, r6
 8001b34:	e621      	b.n	800177a <__aeabi_dadd+0x2ee>
 8001b36:	0002      	movs	r2, r0
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	e540      	b.n	80015c0 <__aeabi_dadd+0x134>
 8001b3e:	464a      	mov	r2, r9
 8001b40:	19d5      	adds	r5, r2, r7
 8001b42:	42bd      	cmp	r5, r7
 8001b44:	4189      	sbcs	r1, r1
 8001b46:	4463      	add	r3, ip
 8001b48:	4698      	mov	r8, r3
 8001b4a:	4249      	negs	r1, r1
 8001b4c:	4488      	add	r8, r1
 8001b4e:	e5b3      	b.n	80016b8 <__aeabi_dadd+0x22c>
 8001b50:	2100      	movs	r1, #0
 8001b52:	4a01      	ldr	r2, [pc, #4]	; (8001b58 <__aeabi_dadd+0x6cc>)
 8001b54:	000b      	movs	r3, r1
 8001b56:	e533      	b.n	80015c0 <__aeabi_dadd+0x134>
 8001b58:	000007ff 	.word	0x000007ff
 8001b5c:	ff7fffff 	.word	0xff7fffff

08001b60 <__aeabi_ddiv>:
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	4657      	mov	r7, sl
 8001b64:	464e      	mov	r6, r9
 8001b66:	4645      	mov	r5, r8
 8001b68:	46de      	mov	lr, fp
 8001b6a:	b5e0      	push	{r5, r6, r7, lr}
 8001b6c:	4681      	mov	r9, r0
 8001b6e:	0005      	movs	r5, r0
 8001b70:	030c      	lsls	r4, r1, #12
 8001b72:	0048      	lsls	r0, r1, #1
 8001b74:	4692      	mov	sl, r2
 8001b76:	001f      	movs	r7, r3
 8001b78:	b085      	sub	sp, #20
 8001b7a:	0b24      	lsrs	r4, r4, #12
 8001b7c:	0d40      	lsrs	r0, r0, #21
 8001b7e:	0fce      	lsrs	r6, r1, #31
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d059      	beq.n	8001c38 <__aeabi_ddiv+0xd8>
 8001b84:	4b87      	ldr	r3, [pc, #540]	; (8001da4 <__aeabi_ddiv+0x244>)
 8001b86:	4298      	cmp	r0, r3
 8001b88:	d100      	bne.n	8001b8c <__aeabi_ddiv+0x2c>
 8001b8a:	e098      	b.n	8001cbe <__aeabi_ddiv+0x15e>
 8001b8c:	0f6b      	lsrs	r3, r5, #29
 8001b8e:	00e4      	lsls	r4, r4, #3
 8001b90:	431c      	orrs	r4, r3
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	4323      	orrs	r3, r4
 8001b98:	4698      	mov	r8, r3
 8001b9a:	4b83      	ldr	r3, [pc, #524]	; (8001da8 <__aeabi_ddiv+0x248>)
 8001b9c:	00ed      	lsls	r5, r5, #3
 8001b9e:	469b      	mov	fp, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	4483      	add	fp, r0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	033c      	lsls	r4, r7, #12
 8001baa:	007b      	lsls	r3, r7, #1
 8001bac:	4650      	mov	r0, sl
 8001bae:	0b24      	lsrs	r4, r4, #12
 8001bb0:	0d5b      	lsrs	r3, r3, #21
 8001bb2:	0fff      	lsrs	r7, r7, #31
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d067      	beq.n	8001c88 <__aeabi_ddiv+0x128>
 8001bb8:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <__aeabi_ddiv+0x244>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d018      	beq.n	8001bf0 <__aeabi_ddiv+0x90>
 8001bbe:	497a      	ldr	r1, [pc, #488]	; (8001da8 <__aeabi_ddiv+0x248>)
 8001bc0:	0f42      	lsrs	r2, r0, #29
 8001bc2:	468c      	mov	ip, r1
 8001bc4:	00e4      	lsls	r4, r4, #3
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	4314      	orrs	r4, r2
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	4463      	add	r3, ip
 8001bce:	0412      	lsls	r2, r2, #16
 8001bd0:	1acb      	subs	r3, r1, r3
 8001bd2:	4314      	orrs	r4, r2
 8001bd4:	469b      	mov	fp, r3
 8001bd6:	00c2      	lsls	r2, r0, #3
 8001bd8:	2000      	movs	r0, #0
 8001bda:	0033      	movs	r3, r6
 8001bdc:	407b      	eors	r3, r7
 8001bde:	469a      	mov	sl, r3
 8001be0:	464b      	mov	r3, r9
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	d900      	bls.n	8001be8 <__aeabi_ddiv+0x88>
 8001be6:	e0ef      	b.n	8001dc8 <__aeabi_ddiv+0x268>
 8001be8:	4970      	ldr	r1, [pc, #448]	; (8001dac <__aeabi_ddiv+0x24c>)
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	58cb      	ldr	r3, [r1, r3]
 8001bee:	469f      	mov	pc, r3
 8001bf0:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <__aeabi_ddiv+0x250>)
 8001bf2:	4652      	mov	r2, sl
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4322      	orrs	r2, r4
 8001bf8:	44e3      	add	fp, ip
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_ddiv+0xa0>
 8001bfe:	e095      	b.n	8001d2c <__aeabi_ddiv+0x1cc>
 8001c00:	4649      	mov	r1, r9
 8001c02:	2302      	movs	r3, #2
 8001c04:	4319      	orrs	r1, r3
 8001c06:	4689      	mov	r9, r1
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	e7e5      	b.n	8001bda <__aeabi_ddiv+0x7a>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2400      	movs	r4, #0
 8001c12:	2500      	movs	r5, #0
 8001c14:	4652      	mov	r2, sl
 8001c16:	051b      	lsls	r3, r3, #20
 8001c18:	4323      	orrs	r3, r4
 8001c1a:	07d2      	lsls	r2, r2, #31
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	0028      	movs	r0, r5
 8001c20:	0019      	movs	r1, r3
 8001c22:	b005      	add	sp, #20
 8001c24:	bcf0      	pop	{r4, r5, r6, r7}
 8001c26:	46bb      	mov	fp, r7
 8001c28:	46b2      	mov	sl, r6
 8001c2a:	46a9      	mov	r9, r5
 8001c2c:	46a0      	mov	r8, r4
 8001c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c30:	2400      	movs	r4, #0
 8001c32:	2500      	movs	r5, #0
 8001c34:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <__aeabi_ddiv+0x244>)
 8001c36:	e7ed      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 8001c38:	464b      	mov	r3, r9
 8001c3a:	4323      	orrs	r3, r4
 8001c3c:	4698      	mov	r8, r3
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_ddiv+0xe2>
 8001c40:	e089      	b.n	8001d56 <__aeabi_ddiv+0x1f6>
 8001c42:	2c00      	cmp	r4, #0
 8001c44:	d100      	bne.n	8001c48 <__aeabi_ddiv+0xe8>
 8001c46:	e1e0      	b.n	800200a <__aeabi_ddiv+0x4aa>
 8001c48:	0020      	movs	r0, r4
 8001c4a:	f001 fb07 	bl	800325c <__clzsi2>
 8001c4e:	0001      	movs	r1, r0
 8001c50:	0002      	movs	r2, r0
 8001c52:	390b      	subs	r1, #11
 8001c54:	231d      	movs	r3, #29
 8001c56:	1a5b      	subs	r3, r3, r1
 8001c58:	4649      	mov	r1, r9
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	40d9      	lsrs	r1, r3
 8001c5e:	3808      	subs	r0, #8
 8001c60:	4084      	lsls	r4, r0
 8001c62:	000b      	movs	r3, r1
 8001c64:	464d      	mov	r5, r9
 8001c66:	4323      	orrs	r3, r4
 8001c68:	4698      	mov	r8, r3
 8001c6a:	4085      	lsls	r5, r0
 8001c6c:	4851      	ldr	r0, [pc, #324]	; (8001db4 <__aeabi_ddiv+0x254>)
 8001c6e:	033c      	lsls	r4, r7, #12
 8001c70:	1a83      	subs	r3, r0, r2
 8001c72:	469b      	mov	fp, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	4699      	mov	r9, r3
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	007b      	lsls	r3, r7, #1
 8001c7c:	4650      	mov	r0, sl
 8001c7e:	0b24      	lsrs	r4, r4, #12
 8001c80:	0d5b      	lsrs	r3, r3, #21
 8001c82:	0fff      	lsrs	r7, r7, #31
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d197      	bne.n	8001bb8 <__aeabi_ddiv+0x58>
 8001c88:	4652      	mov	r2, sl
 8001c8a:	4322      	orrs	r2, r4
 8001c8c:	d055      	beq.n	8001d3a <__aeabi_ddiv+0x1da>
 8001c8e:	2c00      	cmp	r4, #0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_ddiv+0x134>
 8001c92:	e1ca      	b.n	800202a <__aeabi_ddiv+0x4ca>
 8001c94:	0020      	movs	r0, r4
 8001c96:	f001 fae1 	bl	800325c <__clzsi2>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	3a0b      	subs	r2, #11
 8001c9e:	231d      	movs	r3, #29
 8001ca0:	0001      	movs	r1, r0
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	3908      	subs	r1, #8
 8001ca8:	40da      	lsrs	r2, r3
 8001caa:	408c      	lsls	r4, r1
 8001cac:	4314      	orrs	r4, r2
 8001cae:	4652      	mov	r2, sl
 8001cb0:	408a      	lsls	r2, r1
 8001cb2:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <__aeabi_ddiv+0x258>)
 8001cb4:	4458      	add	r0, fp
 8001cb6:	469b      	mov	fp, r3
 8001cb8:	4483      	add	fp, r0
 8001cba:	2000      	movs	r0, #0
 8001cbc:	e78d      	b.n	8001bda <__aeabi_ddiv+0x7a>
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	4323      	orrs	r3, r4
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	d140      	bne.n	8001d48 <__aeabi_ddiv+0x1e8>
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	4699      	mov	r9, r3
 8001cca:	3b06      	subs	r3, #6
 8001ccc:	2500      	movs	r5, #0
 8001cce:	4683      	mov	fp, r0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	e769      	b.n	8001ba8 <__aeabi_ddiv+0x48>
 8001cd4:	46b2      	mov	sl, r6
 8001cd6:	9b00      	ldr	r3, [sp, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d0a9      	beq.n	8001c30 <__aeabi_ddiv+0xd0>
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_ddiv+0x182>
 8001ce0:	e211      	b.n	8002106 <__aeabi_ddiv+0x5a6>
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d093      	beq.n	8001c0e <__aeabi_ddiv+0xae>
 8001ce6:	4a35      	ldr	r2, [pc, #212]	; (8001dbc <__aeabi_ddiv+0x25c>)
 8001ce8:	445a      	add	r2, fp
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	dc00      	bgt.n	8001cf0 <__aeabi_ddiv+0x190>
 8001cee:	e13c      	b.n	8001f6a <__aeabi_ddiv+0x40a>
 8001cf0:	076b      	lsls	r3, r5, #29
 8001cf2:	d000      	beq.n	8001cf6 <__aeabi_ddiv+0x196>
 8001cf4:	e1a7      	b.n	8002046 <__aeabi_ddiv+0x4e6>
 8001cf6:	08ed      	lsrs	r5, r5, #3
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	d506      	bpl.n	8001d0c <__aeabi_ddiv+0x1ac>
 8001cfe:	4642      	mov	r2, r8
 8001d00:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <__aeabi_ddiv+0x260>)
 8001d02:	401a      	ands	r2, r3
 8001d04:	4690      	mov	r8, r2
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	00d2      	lsls	r2, r2, #3
 8001d0a:	445a      	add	r2, fp
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <__aeabi_ddiv+0x264>)
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dc8e      	bgt.n	8001c30 <__aeabi_ddiv+0xd0>
 8001d12:	4643      	mov	r3, r8
 8001d14:	0552      	lsls	r2, r2, #21
 8001d16:	0758      	lsls	r0, r3, #29
 8001d18:	025c      	lsls	r4, r3, #9
 8001d1a:	4305      	orrs	r5, r0
 8001d1c:	0b24      	lsrs	r4, r4, #12
 8001d1e:	0d53      	lsrs	r3, r2, #21
 8001d20:	e778      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 8001d22:	46ba      	mov	sl, r7
 8001d24:	46a0      	mov	r8, r4
 8001d26:	0015      	movs	r5, r2
 8001d28:	9000      	str	r0, [sp, #0]
 8001d2a:	e7d4      	b.n	8001cd6 <__aeabi_ddiv+0x176>
 8001d2c:	464a      	mov	r2, r9
 8001d2e:	2303      	movs	r3, #3
 8001d30:	431a      	orrs	r2, r3
 8001d32:	4691      	mov	r9, r2
 8001d34:	2003      	movs	r0, #3
 8001d36:	4652      	mov	r2, sl
 8001d38:	e74f      	b.n	8001bda <__aeabi_ddiv+0x7a>
 8001d3a:	4649      	mov	r1, r9
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	4319      	orrs	r1, r3
 8001d40:	4689      	mov	r9, r1
 8001d42:	2400      	movs	r4, #0
 8001d44:	2001      	movs	r0, #1
 8001d46:	e748      	b.n	8001bda <__aeabi_ddiv+0x7a>
 8001d48:	230c      	movs	r3, #12
 8001d4a:	4699      	mov	r9, r3
 8001d4c:	3b09      	subs	r3, #9
 8001d4e:	46a0      	mov	r8, r4
 8001d50:	4683      	mov	fp, r0
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	e728      	b.n	8001ba8 <__aeabi_ddiv+0x48>
 8001d56:	2304      	movs	r3, #4
 8001d58:	4699      	mov	r9, r3
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	469b      	mov	fp, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	2500      	movs	r5, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	e720      	b.n	8001ba8 <__aeabi_ddiv+0x48>
 8001d66:	2300      	movs	r3, #0
 8001d68:	2480      	movs	r4, #128	; 0x80
 8001d6a:	469a      	mov	sl, r3
 8001d6c:	2500      	movs	r5, #0
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <__aeabi_ddiv+0x244>)
 8001d70:	0324      	lsls	r4, r4, #12
 8001d72:	e74f      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	4641      	mov	r1, r8
 8001d78:	031b      	lsls	r3, r3, #12
 8001d7a:	4219      	tst	r1, r3
 8001d7c:	d008      	beq.n	8001d90 <__aeabi_ddiv+0x230>
 8001d7e:	421c      	tst	r4, r3
 8001d80:	d106      	bne.n	8001d90 <__aeabi_ddiv+0x230>
 8001d82:	431c      	orrs	r4, r3
 8001d84:	0324      	lsls	r4, r4, #12
 8001d86:	46ba      	mov	sl, r7
 8001d88:	0015      	movs	r5, r2
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <__aeabi_ddiv+0x244>)
 8001d8c:	0b24      	lsrs	r4, r4, #12
 8001d8e:	e741      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 8001d90:	2480      	movs	r4, #128	; 0x80
 8001d92:	4643      	mov	r3, r8
 8001d94:	0324      	lsls	r4, r4, #12
 8001d96:	431c      	orrs	r4, r3
 8001d98:	0324      	lsls	r4, r4, #12
 8001d9a:	46b2      	mov	sl, r6
 8001d9c:	4b01      	ldr	r3, [pc, #4]	; (8001da4 <__aeabi_ddiv+0x244>)
 8001d9e:	0b24      	lsrs	r4, r4, #12
 8001da0:	e738      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	000007ff 	.word	0x000007ff
 8001da8:	fffffc01 	.word	0xfffffc01
 8001dac:	0800afe0 	.word	0x0800afe0
 8001db0:	fffff801 	.word	0xfffff801
 8001db4:	fffffc0d 	.word	0xfffffc0d
 8001db8:	000003f3 	.word	0x000003f3
 8001dbc:	000003ff 	.word	0x000003ff
 8001dc0:	feffffff 	.word	0xfeffffff
 8001dc4:	000007fe 	.word	0x000007fe
 8001dc8:	4544      	cmp	r4, r8
 8001dca:	d200      	bcs.n	8001dce <__aeabi_ddiv+0x26e>
 8001dcc:	e116      	b.n	8001ffc <__aeabi_ddiv+0x49c>
 8001dce:	d100      	bne.n	8001dd2 <__aeabi_ddiv+0x272>
 8001dd0:	e111      	b.n	8001ff6 <__aeabi_ddiv+0x496>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	469c      	mov	ip, r3
 8001dd8:	002e      	movs	r6, r5
 8001dda:	4640      	mov	r0, r8
 8001ddc:	2500      	movs	r5, #0
 8001dde:	44e3      	add	fp, ip
 8001de0:	0223      	lsls	r3, r4, #8
 8001de2:	0e14      	lsrs	r4, r2, #24
 8001de4:	431c      	orrs	r4, r3
 8001de6:	0c1b      	lsrs	r3, r3, #16
 8001de8:	4699      	mov	r9, r3
 8001dea:	0423      	lsls	r3, r4, #16
 8001dec:	0c1f      	lsrs	r7, r3, #16
 8001dee:	0212      	lsls	r2, r2, #8
 8001df0:	4649      	mov	r1, r9
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	9701      	str	r7, [sp, #4]
 8001df6:	f7fe fa29 	bl	800024c <__aeabi_uidivmod>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	437a      	muls	r2, r7
 8001dfe:	040b      	lsls	r3, r1, #16
 8001e00:	0c31      	lsrs	r1, r6, #16
 8001e02:	4680      	mov	r8, r0
 8001e04:	4319      	orrs	r1, r3
 8001e06:	428a      	cmp	r2, r1
 8001e08:	d90b      	bls.n	8001e22 <__aeabi_ddiv+0x2c2>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	425b      	negs	r3, r3
 8001e0e:	469c      	mov	ip, r3
 8001e10:	1909      	adds	r1, r1, r4
 8001e12:	44e0      	add	r8, ip
 8001e14:	428c      	cmp	r4, r1
 8001e16:	d804      	bhi.n	8001e22 <__aeabi_ddiv+0x2c2>
 8001e18:	428a      	cmp	r2, r1
 8001e1a:	d902      	bls.n	8001e22 <__aeabi_ddiv+0x2c2>
 8001e1c:	1e83      	subs	r3, r0, #2
 8001e1e:	4698      	mov	r8, r3
 8001e20:	1909      	adds	r1, r1, r4
 8001e22:	1a88      	subs	r0, r1, r2
 8001e24:	4649      	mov	r1, r9
 8001e26:	f7fe fa11 	bl	800024c <__aeabi_uidivmod>
 8001e2a:	0409      	lsls	r1, r1, #16
 8001e2c:	468c      	mov	ip, r1
 8001e2e:	0431      	lsls	r1, r6, #16
 8001e30:	4666      	mov	r6, ip
 8001e32:	9a01      	ldr	r2, [sp, #4]
 8001e34:	0c09      	lsrs	r1, r1, #16
 8001e36:	4342      	muls	r2, r0
 8001e38:	0003      	movs	r3, r0
 8001e3a:	4331      	orrs	r1, r6
 8001e3c:	428a      	cmp	r2, r1
 8001e3e:	d904      	bls.n	8001e4a <__aeabi_ddiv+0x2ea>
 8001e40:	1909      	adds	r1, r1, r4
 8001e42:	3b01      	subs	r3, #1
 8001e44:	428c      	cmp	r4, r1
 8001e46:	d800      	bhi.n	8001e4a <__aeabi_ddiv+0x2ea>
 8001e48:	e111      	b.n	800206e <__aeabi_ddiv+0x50e>
 8001e4a:	1a89      	subs	r1, r1, r2
 8001e4c:	4642      	mov	r2, r8
 8001e4e:	9e00      	ldr	r6, [sp, #0]
 8001e50:	0412      	lsls	r2, r2, #16
 8001e52:	431a      	orrs	r2, r3
 8001e54:	0c33      	lsrs	r3, r6, #16
 8001e56:	001f      	movs	r7, r3
 8001e58:	0c10      	lsrs	r0, r2, #16
 8001e5a:	4690      	mov	r8, r2
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	0413      	lsls	r3, r2, #16
 8001e60:	0432      	lsls	r2, r6, #16
 8001e62:	0c16      	lsrs	r6, r2, #16
 8001e64:	0032      	movs	r2, r6
 8001e66:	0c1b      	lsrs	r3, r3, #16
 8001e68:	435a      	muls	r2, r3
 8001e6a:	9603      	str	r6, [sp, #12]
 8001e6c:	437b      	muls	r3, r7
 8001e6e:	4346      	muls	r6, r0
 8001e70:	4378      	muls	r0, r7
 8001e72:	0c17      	lsrs	r7, r2, #16
 8001e74:	46bc      	mov	ip, r7
 8001e76:	199b      	adds	r3, r3, r6
 8001e78:	4463      	add	r3, ip
 8001e7a:	429e      	cmp	r6, r3
 8001e7c:	d903      	bls.n	8001e86 <__aeabi_ddiv+0x326>
 8001e7e:	2680      	movs	r6, #128	; 0x80
 8001e80:	0276      	lsls	r6, r6, #9
 8001e82:	46b4      	mov	ip, r6
 8001e84:	4460      	add	r0, ip
 8001e86:	0c1e      	lsrs	r6, r3, #16
 8001e88:	1830      	adds	r0, r6, r0
 8001e8a:	0416      	lsls	r6, r2, #16
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	0c36      	lsrs	r6, r6, #16
 8001e90:	199e      	adds	r6, r3, r6
 8001e92:	4281      	cmp	r1, r0
 8001e94:	d200      	bcs.n	8001e98 <__aeabi_ddiv+0x338>
 8001e96:	e09c      	b.n	8001fd2 <__aeabi_ddiv+0x472>
 8001e98:	d100      	bne.n	8001e9c <__aeabi_ddiv+0x33c>
 8001e9a:	e097      	b.n	8001fcc <__aeabi_ddiv+0x46c>
 8001e9c:	1bae      	subs	r6, r5, r6
 8001e9e:	1a09      	subs	r1, r1, r0
 8001ea0:	42b5      	cmp	r5, r6
 8001ea2:	4180      	sbcs	r0, r0
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	1a08      	subs	r0, r1, r0
 8001ea8:	4284      	cmp	r4, r0
 8001eaa:	d100      	bne.n	8001eae <__aeabi_ddiv+0x34e>
 8001eac:	e111      	b.n	80020d2 <__aeabi_ddiv+0x572>
 8001eae:	4649      	mov	r1, r9
 8001eb0:	f7fe f9cc 	bl	800024c <__aeabi_uidivmod>
 8001eb4:	9a01      	ldr	r2, [sp, #4]
 8001eb6:	040b      	lsls	r3, r1, #16
 8001eb8:	4342      	muls	r2, r0
 8001eba:	0c31      	lsrs	r1, r6, #16
 8001ebc:	0005      	movs	r5, r0
 8001ebe:	4319      	orrs	r1, r3
 8001ec0:	428a      	cmp	r2, r1
 8001ec2:	d907      	bls.n	8001ed4 <__aeabi_ddiv+0x374>
 8001ec4:	1909      	adds	r1, r1, r4
 8001ec6:	3d01      	subs	r5, #1
 8001ec8:	428c      	cmp	r4, r1
 8001eca:	d803      	bhi.n	8001ed4 <__aeabi_ddiv+0x374>
 8001ecc:	428a      	cmp	r2, r1
 8001ece:	d901      	bls.n	8001ed4 <__aeabi_ddiv+0x374>
 8001ed0:	1e85      	subs	r5, r0, #2
 8001ed2:	1909      	adds	r1, r1, r4
 8001ed4:	1a88      	subs	r0, r1, r2
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	f7fe f9b8 	bl	800024c <__aeabi_uidivmod>
 8001edc:	0409      	lsls	r1, r1, #16
 8001ede:	468c      	mov	ip, r1
 8001ee0:	0431      	lsls	r1, r6, #16
 8001ee2:	4666      	mov	r6, ip
 8001ee4:	9a01      	ldr	r2, [sp, #4]
 8001ee6:	0c09      	lsrs	r1, r1, #16
 8001ee8:	4342      	muls	r2, r0
 8001eea:	0003      	movs	r3, r0
 8001eec:	4331      	orrs	r1, r6
 8001eee:	428a      	cmp	r2, r1
 8001ef0:	d907      	bls.n	8001f02 <__aeabi_ddiv+0x3a2>
 8001ef2:	1909      	adds	r1, r1, r4
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	428c      	cmp	r4, r1
 8001ef8:	d803      	bhi.n	8001f02 <__aeabi_ddiv+0x3a2>
 8001efa:	428a      	cmp	r2, r1
 8001efc:	d901      	bls.n	8001f02 <__aeabi_ddiv+0x3a2>
 8001efe:	1e83      	subs	r3, r0, #2
 8001f00:	1909      	adds	r1, r1, r4
 8001f02:	9e03      	ldr	r6, [sp, #12]
 8001f04:	1a89      	subs	r1, r1, r2
 8001f06:	0032      	movs	r2, r6
 8001f08:	042d      	lsls	r5, r5, #16
 8001f0a:	431d      	orrs	r5, r3
 8001f0c:	9f02      	ldr	r7, [sp, #8]
 8001f0e:	042b      	lsls	r3, r5, #16
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	435a      	muls	r2, r3
 8001f14:	437b      	muls	r3, r7
 8001f16:	469c      	mov	ip, r3
 8001f18:	0c28      	lsrs	r0, r5, #16
 8001f1a:	4346      	muls	r6, r0
 8001f1c:	0c13      	lsrs	r3, r2, #16
 8001f1e:	44b4      	add	ip, r6
 8001f20:	4463      	add	r3, ip
 8001f22:	4378      	muls	r0, r7
 8001f24:	429e      	cmp	r6, r3
 8001f26:	d903      	bls.n	8001f30 <__aeabi_ddiv+0x3d0>
 8001f28:	2680      	movs	r6, #128	; 0x80
 8001f2a:	0276      	lsls	r6, r6, #9
 8001f2c:	46b4      	mov	ip, r6
 8001f2e:	4460      	add	r0, ip
 8001f30:	0c1e      	lsrs	r6, r3, #16
 8001f32:	0412      	lsls	r2, r2, #16
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	0c12      	lsrs	r2, r2, #16
 8001f38:	1830      	adds	r0, r6, r0
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	4281      	cmp	r1, r0
 8001f3e:	d306      	bcc.n	8001f4e <__aeabi_ddiv+0x3ee>
 8001f40:	d002      	beq.n	8001f48 <__aeabi_ddiv+0x3e8>
 8001f42:	2301      	movs	r3, #1
 8001f44:	431d      	orrs	r5, r3
 8001f46:	e6ce      	b.n	8001ce6 <__aeabi_ddiv+0x186>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d100      	bne.n	8001f4e <__aeabi_ddiv+0x3ee>
 8001f4c:	e6cb      	b.n	8001ce6 <__aeabi_ddiv+0x186>
 8001f4e:	1861      	adds	r1, r4, r1
 8001f50:	1e6e      	subs	r6, r5, #1
 8001f52:	42a1      	cmp	r1, r4
 8001f54:	d200      	bcs.n	8001f58 <__aeabi_ddiv+0x3f8>
 8001f56:	e0a4      	b.n	80020a2 <__aeabi_ddiv+0x542>
 8001f58:	4281      	cmp	r1, r0
 8001f5a:	d200      	bcs.n	8001f5e <__aeabi_ddiv+0x3fe>
 8001f5c:	e0c9      	b.n	80020f2 <__aeabi_ddiv+0x592>
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_ddiv+0x402>
 8001f60:	e0d9      	b.n	8002116 <__aeabi_ddiv+0x5b6>
 8001f62:	0035      	movs	r5, r6
 8001f64:	e7ed      	b.n	8001f42 <__aeabi_ddiv+0x3e2>
 8001f66:	2501      	movs	r5, #1
 8001f68:	426d      	negs	r5, r5
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	1a89      	subs	r1, r1, r2
 8001f6e:	2938      	cmp	r1, #56	; 0x38
 8001f70:	dd00      	ble.n	8001f74 <__aeabi_ddiv+0x414>
 8001f72:	e64c      	b.n	8001c0e <__aeabi_ddiv+0xae>
 8001f74:	291f      	cmp	r1, #31
 8001f76:	dc00      	bgt.n	8001f7a <__aeabi_ddiv+0x41a>
 8001f78:	e07f      	b.n	800207a <__aeabi_ddiv+0x51a>
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	1a9a      	subs	r2, r3, r2
 8001f80:	4643      	mov	r3, r8
 8001f82:	40d3      	lsrs	r3, r2
 8001f84:	2920      	cmp	r1, #32
 8001f86:	d004      	beq.n	8001f92 <__aeabi_ddiv+0x432>
 8001f88:	4644      	mov	r4, r8
 8001f8a:	4a65      	ldr	r2, [pc, #404]	; (8002120 <__aeabi_ddiv+0x5c0>)
 8001f8c:	445a      	add	r2, fp
 8001f8e:	4094      	lsls	r4, r2
 8001f90:	4325      	orrs	r5, r4
 8001f92:	1e6a      	subs	r2, r5, #1
 8001f94:	4195      	sbcs	r5, r2
 8001f96:	2207      	movs	r2, #7
 8001f98:	432b      	orrs	r3, r5
 8001f9a:	0015      	movs	r5, r2
 8001f9c:	2400      	movs	r4, #0
 8001f9e:	401d      	ands	r5, r3
 8001fa0:	421a      	tst	r2, r3
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_ddiv+0x446>
 8001fa4:	e0a1      	b.n	80020ea <__aeabi_ddiv+0x58a>
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	2400      	movs	r4, #0
 8001faa:	401a      	ands	r2, r3
 8001fac:	2a04      	cmp	r2, #4
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_ddiv+0x452>
 8001fb0:	e098      	b.n	80020e4 <__aeabi_ddiv+0x584>
 8001fb2:	1d1a      	adds	r2, r3, #4
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	419b      	sbcs	r3, r3
 8001fb8:	425b      	negs	r3, r3
 8001fba:	18e4      	adds	r4, r4, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	0222      	lsls	r2, r4, #8
 8001fc0:	d400      	bmi.n	8001fc4 <__aeabi_ddiv+0x464>
 8001fc2:	e08f      	b.n	80020e4 <__aeabi_ddiv+0x584>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2400      	movs	r4, #0
 8001fc8:	2500      	movs	r5, #0
 8001fca:	e623      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 8001fcc:	42b5      	cmp	r5, r6
 8001fce:	d300      	bcc.n	8001fd2 <__aeabi_ddiv+0x472>
 8001fd0:	e764      	b.n	8001e9c <__aeabi_ddiv+0x33c>
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	9b00      	ldr	r3, [sp, #0]
 8001fd8:	469c      	mov	ip, r3
 8001fda:	4465      	add	r5, ip
 8001fdc:	001f      	movs	r7, r3
 8001fde:	429d      	cmp	r5, r3
 8001fe0:	419b      	sbcs	r3, r3
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	191b      	adds	r3, r3, r4
 8001fe6:	18c9      	adds	r1, r1, r3
 8001fe8:	428c      	cmp	r4, r1
 8001fea:	d23a      	bcs.n	8002062 <__aeabi_ddiv+0x502>
 8001fec:	4288      	cmp	r0, r1
 8001fee:	d863      	bhi.n	80020b8 <__aeabi_ddiv+0x558>
 8001ff0:	d060      	beq.n	80020b4 <__aeabi_ddiv+0x554>
 8001ff2:	4690      	mov	r8, r2
 8001ff4:	e752      	b.n	8001e9c <__aeabi_ddiv+0x33c>
 8001ff6:	42aa      	cmp	r2, r5
 8001ff8:	d900      	bls.n	8001ffc <__aeabi_ddiv+0x49c>
 8001ffa:	e6ea      	b.n	8001dd2 <__aeabi_ddiv+0x272>
 8001ffc:	4643      	mov	r3, r8
 8001ffe:	07de      	lsls	r6, r3, #31
 8002000:	0858      	lsrs	r0, r3, #1
 8002002:	086b      	lsrs	r3, r5, #1
 8002004:	431e      	orrs	r6, r3
 8002006:	07ed      	lsls	r5, r5, #31
 8002008:	e6ea      	b.n	8001de0 <__aeabi_ddiv+0x280>
 800200a:	4648      	mov	r0, r9
 800200c:	f001 f926 	bl	800325c <__clzsi2>
 8002010:	0001      	movs	r1, r0
 8002012:	0002      	movs	r2, r0
 8002014:	3115      	adds	r1, #21
 8002016:	3220      	adds	r2, #32
 8002018:	291c      	cmp	r1, #28
 800201a:	dc00      	bgt.n	800201e <__aeabi_ddiv+0x4be>
 800201c:	e61a      	b.n	8001c54 <__aeabi_ddiv+0xf4>
 800201e:	464b      	mov	r3, r9
 8002020:	3808      	subs	r0, #8
 8002022:	4083      	lsls	r3, r0
 8002024:	2500      	movs	r5, #0
 8002026:	4698      	mov	r8, r3
 8002028:	e620      	b.n	8001c6c <__aeabi_ddiv+0x10c>
 800202a:	f001 f917 	bl	800325c <__clzsi2>
 800202e:	0003      	movs	r3, r0
 8002030:	001a      	movs	r2, r3
 8002032:	3215      	adds	r2, #21
 8002034:	3020      	adds	r0, #32
 8002036:	2a1c      	cmp	r2, #28
 8002038:	dc00      	bgt.n	800203c <__aeabi_ddiv+0x4dc>
 800203a:	e630      	b.n	8001c9e <__aeabi_ddiv+0x13e>
 800203c:	4654      	mov	r4, sl
 800203e:	3b08      	subs	r3, #8
 8002040:	2200      	movs	r2, #0
 8002042:	409c      	lsls	r4, r3
 8002044:	e635      	b.n	8001cb2 <__aeabi_ddiv+0x152>
 8002046:	230f      	movs	r3, #15
 8002048:	402b      	ands	r3, r5
 800204a:	2b04      	cmp	r3, #4
 800204c:	d100      	bne.n	8002050 <__aeabi_ddiv+0x4f0>
 800204e:	e652      	b.n	8001cf6 <__aeabi_ddiv+0x196>
 8002050:	2305      	movs	r3, #5
 8002052:	425b      	negs	r3, r3
 8002054:	42ab      	cmp	r3, r5
 8002056:	419b      	sbcs	r3, r3
 8002058:	3504      	adds	r5, #4
 800205a:	425b      	negs	r3, r3
 800205c:	08ed      	lsrs	r5, r5, #3
 800205e:	4498      	add	r8, r3
 8002060:	e64a      	b.n	8001cf8 <__aeabi_ddiv+0x198>
 8002062:	428c      	cmp	r4, r1
 8002064:	d1c5      	bne.n	8001ff2 <__aeabi_ddiv+0x492>
 8002066:	42af      	cmp	r7, r5
 8002068:	d9c0      	bls.n	8001fec <__aeabi_ddiv+0x48c>
 800206a:	4690      	mov	r8, r2
 800206c:	e716      	b.n	8001e9c <__aeabi_ddiv+0x33c>
 800206e:	428a      	cmp	r2, r1
 8002070:	d800      	bhi.n	8002074 <__aeabi_ddiv+0x514>
 8002072:	e6ea      	b.n	8001e4a <__aeabi_ddiv+0x2ea>
 8002074:	1e83      	subs	r3, r0, #2
 8002076:	1909      	adds	r1, r1, r4
 8002078:	e6e7      	b.n	8001e4a <__aeabi_ddiv+0x2ea>
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <__aeabi_ddiv+0x5c4>)
 800207c:	0028      	movs	r0, r5
 800207e:	445a      	add	r2, fp
 8002080:	4643      	mov	r3, r8
 8002082:	4095      	lsls	r5, r2
 8002084:	4093      	lsls	r3, r2
 8002086:	40c8      	lsrs	r0, r1
 8002088:	1e6a      	subs	r2, r5, #1
 800208a:	4195      	sbcs	r5, r2
 800208c:	4644      	mov	r4, r8
 800208e:	4303      	orrs	r3, r0
 8002090:	432b      	orrs	r3, r5
 8002092:	40cc      	lsrs	r4, r1
 8002094:	075a      	lsls	r2, r3, #29
 8002096:	d092      	beq.n	8001fbe <__aeabi_ddiv+0x45e>
 8002098:	220f      	movs	r2, #15
 800209a:	401a      	ands	r2, r3
 800209c:	2a04      	cmp	r2, #4
 800209e:	d188      	bne.n	8001fb2 <__aeabi_ddiv+0x452>
 80020a0:	e78d      	b.n	8001fbe <__aeabi_ddiv+0x45e>
 80020a2:	0035      	movs	r5, r6
 80020a4:	4281      	cmp	r1, r0
 80020a6:	d000      	beq.n	80020aa <__aeabi_ddiv+0x54a>
 80020a8:	e74b      	b.n	8001f42 <__aeabi_ddiv+0x3e2>
 80020aa:	9a00      	ldr	r2, [sp, #0]
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d000      	beq.n	80020b2 <__aeabi_ddiv+0x552>
 80020b0:	e747      	b.n	8001f42 <__aeabi_ddiv+0x3e2>
 80020b2:	e618      	b.n	8001ce6 <__aeabi_ddiv+0x186>
 80020b4:	42ae      	cmp	r6, r5
 80020b6:	d99c      	bls.n	8001ff2 <__aeabi_ddiv+0x492>
 80020b8:	2302      	movs	r3, #2
 80020ba:	425b      	negs	r3, r3
 80020bc:	469c      	mov	ip, r3
 80020be:	9b00      	ldr	r3, [sp, #0]
 80020c0:	44e0      	add	r8, ip
 80020c2:	469c      	mov	ip, r3
 80020c4:	4465      	add	r5, ip
 80020c6:	429d      	cmp	r5, r3
 80020c8:	419b      	sbcs	r3, r3
 80020ca:	425b      	negs	r3, r3
 80020cc:	191b      	adds	r3, r3, r4
 80020ce:	18c9      	adds	r1, r1, r3
 80020d0:	e6e4      	b.n	8001e9c <__aeabi_ddiv+0x33c>
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <__aeabi_ddiv+0x5c8>)
 80020d4:	445a      	add	r2, fp
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	dc00      	bgt.n	80020dc <__aeabi_ddiv+0x57c>
 80020da:	e744      	b.n	8001f66 <__aeabi_ddiv+0x406>
 80020dc:	2301      	movs	r3, #1
 80020de:	2500      	movs	r5, #0
 80020e0:	4498      	add	r8, r3
 80020e2:	e609      	b.n	8001cf8 <__aeabi_ddiv+0x198>
 80020e4:	0765      	lsls	r5, r4, #29
 80020e6:	0264      	lsls	r4, r4, #9
 80020e8:	0b24      	lsrs	r4, r4, #12
 80020ea:	08db      	lsrs	r3, r3, #3
 80020ec:	431d      	orrs	r5, r3
 80020ee:	2300      	movs	r3, #0
 80020f0:	e590      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 80020f2:	9e00      	ldr	r6, [sp, #0]
 80020f4:	3d02      	subs	r5, #2
 80020f6:	0072      	lsls	r2, r6, #1
 80020f8:	42b2      	cmp	r2, r6
 80020fa:	41bf      	sbcs	r7, r7
 80020fc:	427f      	negs	r7, r7
 80020fe:	193c      	adds	r4, r7, r4
 8002100:	1909      	adds	r1, r1, r4
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	e7ce      	b.n	80020a4 <__aeabi_ddiv+0x544>
 8002106:	2480      	movs	r4, #128	; 0x80
 8002108:	4643      	mov	r3, r8
 800210a:	0324      	lsls	r4, r4, #12
 800210c:	431c      	orrs	r4, r3
 800210e:	0324      	lsls	r4, r4, #12
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <__aeabi_ddiv+0x5cc>)
 8002112:	0b24      	lsrs	r4, r4, #12
 8002114:	e57e      	b.n	8001c14 <__aeabi_ddiv+0xb4>
 8002116:	9a00      	ldr	r2, [sp, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3ea      	bcc.n	80020f2 <__aeabi_ddiv+0x592>
 800211c:	0035      	movs	r5, r6
 800211e:	e7c4      	b.n	80020aa <__aeabi_ddiv+0x54a>
 8002120:	0000043e 	.word	0x0000043e
 8002124:	0000041e 	.word	0x0000041e
 8002128:	000003ff 	.word	0x000003ff
 800212c:	000007ff 	.word	0x000007ff

08002130 <__eqdf2>:
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	464f      	mov	r7, r9
 8002134:	4646      	mov	r6, r8
 8002136:	46d6      	mov	lr, sl
 8002138:	4694      	mov	ip, r2
 800213a:	4691      	mov	r9, r2
 800213c:	031a      	lsls	r2, r3, #12
 800213e:	0b12      	lsrs	r2, r2, #12
 8002140:	4d18      	ldr	r5, [pc, #96]	; (80021a4 <__eqdf2+0x74>)
 8002142:	b5c0      	push	{r6, r7, lr}
 8002144:	004c      	lsls	r4, r1, #1
 8002146:	030f      	lsls	r7, r1, #12
 8002148:	4692      	mov	sl, r2
 800214a:	005a      	lsls	r2, r3, #1
 800214c:	0006      	movs	r6, r0
 800214e:	4680      	mov	r8, r0
 8002150:	0b3f      	lsrs	r7, r7, #12
 8002152:	2001      	movs	r0, #1
 8002154:	0d64      	lsrs	r4, r4, #21
 8002156:	0fc9      	lsrs	r1, r1, #31
 8002158:	0d52      	lsrs	r2, r2, #21
 800215a:	0fdb      	lsrs	r3, r3, #31
 800215c:	42ac      	cmp	r4, r5
 800215e:	d00a      	beq.n	8002176 <__eqdf2+0x46>
 8002160:	42aa      	cmp	r2, r5
 8002162:	d003      	beq.n	800216c <__eqdf2+0x3c>
 8002164:	4294      	cmp	r4, r2
 8002166:	d101      	bne.n	800216c <__eqdf2+0x3c>
 8002168:	4557      	cmp	r7, sl
 800216a:	d00d      	beq.n	8002188 <__eqdf2+0x58>
 800216c:	bce0      	pop	{r5, r6, r7}
 800216e:	46ba      	mov	sl, r7
 8002170:	46b1      	mov	r9, r6
 8002172:	46a8      	mov	r8, r5
 8002174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002176:	003d      	movs	r5, r7
 8002178:	4335      	orrs	r5, r6
 800217a:	d1f7      	bne.n	800216c <__eqdf2+0x3c>
 800217c:	42a2      	cmp	r2, r4
 800217e:	d1f5      	bne.n	800216c <__eqdf2+0x3c>
 8002180:	4652      	mov	r2, sl
 8002182:	4665      	mov	r5, ip
 8002184:	432a      	orrs	r2, r5
 8002186:	d1f1      	bne.n	800216c <__eqdf2+0x3c>
 8002188:	2001      	movs	r0, #1
 800218a:	45c8      	cmp	r8, r9
 800218c:	d1ee      	bne.n	800216c <__eqdf2+0x3c>
 800218e:	4299      	cmp	r1, r3
 8002190:	d006      	beq.n	80021a0 <__eqdf2+0x70>
 8002192:	2c00      	cmp	r4, #0
 8002194:	d1ea      	bne.n	800216c <__eqdf2+0x3c>
 8002196:	433e      	orrs	r6, r7
 8002198:	0030      	movs	r0, r6
 800219a:	1e46      	subs	r6, r0, #1
 800219c:	41b0      	sbcs	r0, r6
 800219e:	e7e5      	b.n	800216c <__eqdf2+0x3c>
 80021a0:	2000      	movs	r0, #0
 80021a2:	e7e3      	b.n	800216c <__eqdf2+0x3c>
 80021a4:	000007ff 	.word	0x000007ff

080021a8 <__gedf2>:
 80021a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021aa:	464e      	mov	r6, r9
 80021ac:	4645      	mov	r5, r8
 80021ae:	4657      	mov	r7, sl
 80021b0:	46de      	mov	lr, fp
 80021b2:	0004      	movs	r4, r0
 80021b4:	0018      	movs	r0, r3
 80021b6:	b5e0      	push	{r5, r6, r7, lr}
 80021b8:	0016      	movs	r6, r2
 80021ba:	031b      	lsls	r3, r3, #12
 80021bc:	0b1b      	lsrs	r3, r3, #12
 80021be:	4d32      	ldr	r5, [pc, #200]	; (8002288 <__gedf2+0xe0>)
 80021c0:	030f      	lsls	r7, r1, #12
 80021c2:	004a      	lsls	r2, r1, #1
 80021c4:	4699      	mov	r9, r3
 80021c6:	0043      	lsls	r3, r0, #1
 80021c8:	46a4      	mov	ip, r4
 80021ca:	46b0      	mov	r8, r6
 80021cc:	0b3f      	lsrs	r7, r7, #12
 80021ce:	0d52      	lsrs	r2, r2, #21
 80021d0:	0fc9      	lsrs	r1, r1, #31
 80021d2:	0d5b      	lsrs	r3, r3, #21
 80021d4:	0fc0      	lsrs	r0, r0, #31
 80021d6:	42aa      	cmp	r2, r5
 80021d8:	d029      	beq.n	800222e <__gedf2+0x86>
 80021da:	42ab      	cmp	r3, r5
 80021dc:	d018      	beq.n	8002210 <__gedf2+0x68>
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d12a      	bne.n	8002238 <__gedf2+0x90>
 80021e2:	433c      	orrs	r4, r7
 80021e4:	46a3      	mov	fp, r4
 80021e6:	4265      	negs	r5, r4
 80021e8:	4165      	adcs	r5, r4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <__gedf2+0x4c>
 80021ee:	464c      	mov	r4, r9
 80021f0:	4326      	orrs	r6, r4
 80021f2:	d027      	beq.n	8002244 <__gedf2+0x9c>
 80021f4:	2d00      	cmp	r5, #0
 80021f6:	d115      	bne.n	8002224 <__gedf2+0x7c>
 80021f8:	4281      	cmp	r1, r0
 80021fa:	d028      	beq.n	800224e <__gedf2+0xa6>
 80021fc:	2002      	movs	r0, #2
 80021fe:	3901      	subs	r1, #1
 8002200:	4008      	ands	r0, r1
 8002202:	3801      	subs	r0, #1
 8002204:	bcf0      	pop	{r4, r5, r6, r7}
 8002206:	46bb      	mov	fp, r7
 8002208:	46b2      	mov	sl, r6
 800220a:	46a9      	mov	r9, r5
 800220c:	46a0      	mov	r8, r4
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002210:	464d      	mov	r5, r9
 8002212:	432e      	orrs	r6, r5
 8002214:	d12f      	bne.n	8002276 <__gedf2+0xce>
 8002216:	2a00      	cmp	r2, #0
 8002218:	d1ee      	bne.n	80021f8 <__gedf2+0x50>
 800221a:	433c      	orrs	r4, r7
 800221c:	4265      	negs	r5, r4
 800221e:	4165      	adcs	r5, r4
 8002220:	2d00      	cmp	r5, #0
 8002222:	d0e9      	beq.n	80021f8 <__gedf2+0x50>
 8002224:	2800      	cmp	r0, #0
 8002226:	d1ed      	bne.n	8002204 <__gedf2+0x5c>
 8002228:	2001      	movs	r0, #1
 800222a:	4240      	negs	r0, r0
 800222c:	e7ea      	b.n	8002204 <__gedf2+0x5c>
 800222e:	003d      	movs	r5, r7
 8002230:	4325      	orrs	r5, r4
 8002232:	d120      	bne.n	8002276 <__gedf2+0xce>
 8002234:	4293      	cmp	r3, r2
 8002236:	d0eb      	beq.n	8002210 <__gedf2+0x68>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1dd      	bne.n	80021f8 <__gedf2+0x50>
 800223c:	464c      	mov	r4, r9
 800223e:	4326      	orrs	r6, r4
 8002240:	d1da      	bne.n	80021f8 <__gedf2+0x50>
 8002242:	e7db      	b.n	80021fc <__gedf2+0x54>
 8002244:	465b      	mov	r3, fp
 8002246:	2000      	movs	r0, #0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0db      	beq.n	8002204 <__gedf2+0x5c>
 800224c:	e7d6      	b.n	80021fc <__gedf2+0x54>
 800224e:	429a      	cmp	r2, r3
 8002250:	dc0a      	bgt.n	8002268 <__gedf2+0xc0>
 8002252:	dbe7      	blt.n	8002224 <__gedf2+0x7c>
 8002254:	454f      	cmp	r7, r9
 8002256:	d8d1      	bhi.n	80021fc <__gedf2+0x54>
 8002258:	d010      	beq.n	800227c <__gedf2+0xd4>
 800225a:	2000      	movs	r0, #0
 800225c:	454f      	cmp	r7, r9
 800225e:	d2d1      	bcs.n	8002204 <__gedf2+0x5c>
 8002260:	2900      	cmp	r1, #0
 8002262:	d0e1      	beq.n	8002228 <__gedf2+0x80>
 8002264:	0008      	movs	r0, r1
 8002266:	e7cd      	b.n	8002204 <__gedf2+0x5c>
 8002268:	4243      	negs	r3, r0
 800226a:	4158      	adcs	r0, r3
 800226c:	2302      	movs	r3, #2
 800226e:	4240      	negs	r0, r0
 8002270:	4018      	ands	r0, r3
 8002272:	3801      	subs	r0, #1
 8002274:	e7c6      	b.n	8002204 <__gedf2+0x5c>
 8002276:	2002      	movs	r0, #2
 8002278:	4240      	negs	r0, r0
 800227a:	e7c3      	b.n	8002204 <__gedf2+0x5c>
 800227c:	45c4      	cmp	ip, r8
 800227e:	d8bd      	bhi.n	80021fc <__gedf2+0x54>
 8002280:	2000      	movs	r0, #0
 8002282:	45c4      	cmp	ip, r8
 8002284:	d2be      	bcs.n	8002204 <__gedf2+0x5c>
 8002286:	e7eb      	b.n	8002260 <__gedf2+0xb8>
 8002288:	000007ff 	.word	0x000007ff

0800228c <__ledf2>:
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	464e      	mov	r6, r9
 8002290:	4645      	mov	r5, r8
 8002292:	4657      	mov	r7, sl
 8002294:	46de      	mov	lr, fp
 8002296:	0004      	movs	r4, r0
 8002298:	0018      	movs	r0, r3
 800229a:	b5e0      	push	{r5, r6, r7, lr}
 800229c:	0016      	movs	r6, r2
 800229e:	031b      	lsls	r3, r3, #12
 80022a0:	0b1b      	lsrs	r3, r3, #12
 80022a2:	4d31      	ldr	r5, [pc, #196]	; (8002368 <__ledf2+0xdc>)
 80022a4:	030f      	lsls	r7, r1, #12
 80022a6:	004a      	lsls	r2, r1, #1
 80022a8:	4699      	mov	r9, r3
 80022aa:	0043      	lsls	r3, r0, #1
 80022ac:	46a4      	mov	ip, r4
 80022ae:	46b0      	mov	r8, r6
 80022b0:	0b3f      	lsrs	r7, r7, #12
 80022b2:	0d52      	lsrs	r2, r2, #21
 80022b4:	0fc9      	lsrs	r1, r1, #31
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	0fc0      	lsrs	r0, r0, #31
 80022ba:	42aa      	cmp	r2, r5
 80022bc:	d011      	beq.n	80022e2 <__ledf2+0x56>
 80022be:	42ab      	cmp	r3, r5
 80022c0:	d014      	beq.n	80022ec <__ledf2+0x60>
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	d12f      	bne.n	8002326 <__ledf2+0x9a>
 80022c6:	433c      	orrs	r4, r7
 80022c8:	46a3      	mov	fp, r4
 80022ca:	4265      	negs	r5, r4
 80022cc:	4165      	adcs	r5, r4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d114      	bne.n	80022fc <__ledf2+0x70>
 80022d2:	464c      	mov	r4, r9
 80022d4:	4326      	orrs	r6, r4
 80022d6:	d111      	bne.n	80022fc <__ledf2+0x70>
 80022d8:	465b      	mov	r3, fp
 80022da:	2000      	movs	r0, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <__ledf2+0x84>
 80022e0:	e010      	b.n	8002304 <__ledf2+0x78>
 80022e2:	003d      	movs	r5, r7
 80022e4:	4325      	orrs	r5, r4
 80022e6:	d112      	bne.n	800230e <__ledf2+0x82>
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d11c      	bne.n	8002326 <__ledf2+0x9a>
 80022ec:	464d      	mov	r5, r9
 80022ee:	432e      	orrs	r6, r5
 80022f0:	d10d      	bne.n	800230e <__ledf2+0x82>
 80022f2:	2a00      	cmp	r2, #0
 80022f4:	d104      	bne.n	8002300 <__ledf2+0x74>
 80022f6:	433c      	orrs	r4, r7
 80022f8:	4265      	negs	r5, r4
 80022fa:	4165      	adcs	r5, r4
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	d10d      	bne.n	800231c <__ledf2+0x90>
 8002300:	4281      	cmp	r1, r0
 8002302:	d016      	beq.n	8002332 <__ledf2+0xa6>
 8002304:	2002      	movs	r0, #2
 8002306:	3901      	subs	r1, #1
 8002308:	4008      	ands	r0, r1
 800230a:	3801      	subs	r0, #1
 800230c:	e000      	b.n	8002310 <__ledf2+0x84>
 800230e:	2002      	movs	r0, #2
 8002310:	bcf0      	pop	{r4, r5, r6, r7}
 8002312:	46bb      	mov	fp, r7
 8002314:	46b2      	mov	sl, r6
 8002316:	46a9      	mov	r9, r5
 8002318:	46a0      	mov	r8, r4
 800231a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800231c:	2800      	cmp	r0, #0
 800231e:	d1f7      	bne.n	8002310 <__ledf2+0x84>
 8002320:	2001      	movs	r0, #1
 8002322:	4240      	negs	r0, r0
 8002324:	e7f4      	b.n	8002310 <__ledf2+0x84>
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ea      	bne.n	8002300 <__ledf2+0x74>
 800232a:	464c      	mov	r4, r9
 800232c:	4326      	orrs	r6, r4
 800232e:	d1e7      	bne.n	8002300 <__ledf2+0x74>
 8002330:	e7e8      	b.n	8002304 <__ledf2+0x78>
 8002332:	429a      	cmp	r2, r3
 8002334:	dd06      	ble.n	8002344 <__ledf2+0xb8>
 8002336:	4243      	negs	r3, r0
 8002338:	4158      	adcs	r0, r3
 800233a:	2302      	movs	r3, #2
 800233c:	4240      	negs	r0, r0
 800233e:	4018      	ands	r0, r3
 8002340:	3801      	subs	r0, #1
 8002342:	e7e5      	b.n	8002310 <__ledf2+0x84>
 8002344:	429a      	cmp	r2, r3
 8002346:	dbe9      	blt.n	800231c <__ledf2+0x90>
 8002348:	454f      	cmp	r7, r9
 800234a:	d8db      	bhi.n	8002304 <__ledf2+0x78>
 800234c:	d006      	beq.n	800235c <__ledf2+0xd0>
 800234e:	2000      	movs	r0, #0
 8002350:	454f      	cmp	r7, r9
 8002352:	d2dd      	bcs.n	8002310 <__ledf2+0x84>
 8002354:	2900      	cmp	r1, #0
 8002356:	d0e3      	beq.n	8002320 <__ledf2+0x94>
 8002358:	0008      	movs	r0, r1
 800235a:	e7d9      	b.n	8002310 <__ledf2+0x84>
 800235c:	45c4      	cmp	ip, r8
 800235e:	d8d1      	bhi.n	8002304 <__ledf2+0x78>
 8002360:	2000      	movs	r0, #0
 8002362:	45c4      	cmp	ip, r8
 8002364:	d2d4      	bcs.n	8002310 <__ledf2+0x84>
 8002366:	e7f5      	b.n	8002354 <__ledf2+0xc8>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__aeabi_dmul>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	4698      	mov	r8, r3
 800237a:	030c      	lsls	r4, r1, #12
 800237c:	004b      	lsls	r3, r1, #1
 800237e:	0006      	movs	r6, r0
 8002380:	4692      	mov	sl, r2
 8002382:	b087      	sub	sp, #28
 8002384:	0b24      	lsrs	r4, r4, #12
 8002386:	0d5b      	lsrs	r3, r3, #21
 8002388:	0fcf      	lsrs	r7, r1, #31
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06c      	beq.n	8002468 <__aeabi_dmul+0xfc>
 800238e:	4add      	ldr	r2, [pc, #884]	; (8002704 <__aeabi_dmul+0x398>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d100      	bne.n	8002396 <__aeabi_dmul+0x2a>
 8002394:	e086      	b.n	80024a4 <__aeabi_dmul+0x138>
 8002396:	0f42      	lsrs	r2, r0, #29
 8002398:	00e4      	lsls	r4, r4, #3
 800239a:	4314      	orrs	r4, r2
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	0412      	lsls	r2, r2, #16
 80023a0:	4314      	orrs	r4, r2
 80023a2:	4ad9      	ldr	r2, [pc, #868]	; (8002708 <__aeabi_dmul+0x39c>)
 80023a4:	00c5      	lsls	r5, r0, #3
 80023a6:	4694      	mov	ip, r2
 80023a8:	4463      	add	r3, ip
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2300      	movs	r3, #0
 80023ae:	4699      	mov	r9, r3
 80023b0:	469b      	mov	fp, r3
 80023b2:	4643      	mov	r3, r8
 80023b4:	4642      	mov	r2, r8
 80023b6:	031e      	lsls	r6, r3, #12
 80023b8:	0fd2      	lsrs	r2, r2, #31
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4650      	mov	r0, sl
 80023be:	4690      	mov	r8, r2
 80023c0:	0b36      	lsrs	r6, r6, #12
 80023c2:	0d5b      	lsrs	r3, r3, #21
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dmul+0x5c>
 80023c6:	e078      	b.n	80024ba <__aeabi_dmul+0x14e>
 80023c8:	4ace      	ldr	r2, [pc, #824]	; (8002704 <__aeabi_dmul+0x398>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01d      	beq.n	800240a <__aeabi_dmul+0x9e>
 80023ce:	49ce      	ldr	r1, [pc, #824]	; (8002708 <__aeabi_dmul+0x39c>)
 80023d0:	0f42      	lsrs	r2, r0, #29
 80023d2:	468c      	mov	ip, r1
 80023d4:	9900      	ldr	r1, [sp, #0]
 80023d6:	4463      	add	r3, ip
 80023d8:	00f6      	lsls	r6, r6, #3
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	449c      	add	ip, r3
 80023e2:	0412      	lsls	r2, r2, #16
 80023e4:	4663      	mov	r3, ip
 80023e6:	4316      	orrs	r6, r2
 80023e8:	00c2      	lsls	r2, r0, #3
 80023ea:	2000      	movs	r0, #0
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	9900      	ldr	r1, [sp, #0]
 80023f0:	4643      	mov	r3, r8
 80023f2:	3101      	adds	r1, #1
 80023f4:	468c      	mov	ip, r1
 80023f6:	4649      	mov	r1, r9
 80023f8:	407b      	eors	r3, r7
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	290f      	cmp	r1, #15
 80023fe:	d900      	bls.n	8002402 <__aeabi_dmul+0x96>
 8002400:	e07e      	b.n	8002500 <__aeabi_dmul+0x194>
 8002402:	4bc2      	ldr	r3, [pc, #776]	; (800270c <__aeabi_dmul+0x3a0>)
 8002404:	0089      	lsls	r1, r1, #2
 8002406:	5859      	ldr	r1, [r3, r1]
 8002408:	468f      	mov	pc, r1
 800240a:	4652      	mov	r2, sl
 800240c:	9b00      	ldr	r3, [sp, #0]
 800240e:	4332      	orrs	r2, r6
 8002410:	d000      	beq.n	8002414 <__aeabi_dmul+0xa8>
 8002412:	e156      	b.n	80026c2 <__aeabi_dmul+0x356>
 8002414:	49bb      	ldr	r1, [pc, #748]	; (8002704 <__aeabi_dmul+0x398>)
 8002416:	2600      	movs	r6, #0
 8002418:	468c      	mov	ip, r1
 800241a:	4463      	add	r3, ip
 800241c:	4649      	mov	r1, r9
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2302      	movs	r3, #2
 8002422:	4319      	orrs	r1, r3
 8002424:	4689      	mov	r9, r1
 8002426:	2002      	movs	r0, #2
 8002428:	e7e1      	b.n	80023ee <__aeabi_dmul+0x82>
 800242a:	4643      	mov	r3, r8
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	0034      	movs	r4, r6
 8002430:	0015      	movs	r5, r2
 8002432:	4683      	mov	fp, r0
 8002434:	465b      	mov	r3, fp
 8002436:	2b02      	cmp	r3, #2
 8002438:	d05e      	beq.n	80024f8 <__aeabi_dmul+0x18c>
 800243a:	2b03      	cmp	r3, #3
 800243c:	d100      	bne.n	8002440 <__aeabi_dmul+0xd4>
 800243e:	e1f3      	b.n	8002828 <__aeabi_dmul+0x4bc>
 8002440:	2b01      	cmp	r3, #1
 8002442:	d000      	beq.n	8002446 <__aeabi_dmul+0xda>
 8002444:	e118      	b.n	8002678 <__aeabi_dmul+0x30c>
 8002446:	2200      	movs	r2, #0
 8002448:	2400      	movs	r4, #0
 800244a:	2500      	movs	r5, #0
 800244c:	9b01      	ldr	r3, [sp, #4]
 800244e:	0512      	lsls	r2, r2, #20
 8002450:	4322      	orrs	r2, r4
 8002452:	07db      	lsls	r3, r3, #31
 8002454:	431a      	orrs	r2, r3
 8002456:	0028      	movs	r0, r5
 8002458:	0011      	movs	r1, r2
 800245a:	b007      	add	sp, #28
 800245c:	bcf0      	pop	{r4, r5, r6, r7}
 800245e:	46bb      	mov	fp, r7
 8002460:	46b2      	mov	sl, r6
 8002462:	46a9      	mov	r9, r5
 8002464:	46a0      	mov	r8, r4
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002468:	0025      	movs	r5, r4
 800246a:	4305      	orrs	r5, r0
 800246c:	d100      	bne.n	8002470 <__aeabi_dmul+0x104>
 800246e:	e141      	b.n	80026f4 <__aeabi_dmul+0x388>
 8002470:	2c00      	cmp	r4, #0
 8002472:	d100      	bne.n	8002476 <__aeabi_dmul+0x10a>
 8002474:	e1ad      	b.n	80027d2 <__aeabi_dmul+0x466>
 8002476:	0020      	movs	r0, r4
 8002478:	f000 fef0 	bl	800325c <__clzsi2>
 800247c:	0001      	movs	r1, r0
 800247e:	0002      	movs	r2, r0
 8002480:	390b      	subs	r1, #11
 8002482:	231d      	movs	r3, #29
 8002484:	0010      	movs	r0, r2
 8002486:	1a5b      	subs	r3, r3, r1
 8002488:	0031      	movs	r1, r6
 800248a:	0035      	movs	r5, r6
 800248c:	3808      	subs	r0, #8
 800248e:	4084      	lsls	r4, r0
 8002490:	40d9      	lsrs	r1, r3
 8002492:	4085      	lsls	r5, r0
 8002494:	430c      	orrs	r4, r1
 8002496:	489e      	ldr	r0, [pc, #632]	; (8002710 <__aeabi_dmul+0x3a4>)
 8002498:	1a83      	subs	r3, r0, r2
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	4699      	mov	r9, r3
 80024a0:	469b      	mov	fp, r3
 80024a2:	e786      	b.n	80023b2 <__aeabi_dmul+0x46>
 80024a4:	0005      	movs	r5, r0
 80024a6:	4325      	orrs	r5, r4
 80024a8:	d000      	beq.n	80024ac <__aeabi_dmul+0x140>
 80024aa:	e11c      	b.n	80026e6 <__aeabi_dmul+0x37a>
 80024ac:	2208      	movs	r2, #8
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2302      	movs	r3, #2
 80024b2:	2400      	movs	r4, #0
 80024b4:	4691      	mov	r9, r2
 80024b6:	469b      	mov	fp, r3
 80024b8:	e77b      	b.n	80023b2 <__aeabi_dmul+0x46>
 80024ba:	4652      	mov	r2, sl
 80024bc:	4332      	orrs	r2, r6
 80024be:	d100      	bne.n	80024c2 <__aeabi_dmul+0x156>
 80024c0:	e10a      	b.n	80026d8 <__aeabi_dmul+0x36c>
 80024c2:	2e00      	cmp	r6, #0
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dmul+0x15c>
 80024c6:	e176      	b.n	80027b6 <__aeabi_dmul+0x44a>
 80024c8:	0030      	movs	r0, r6
 80024ca:	f000 fec7 	bl	800325c <__clzsi2>
 80024ce:	0002      	movs	r2, r0
 80024d0:	3a0b      	subs	r2, #11
 80024d2:	231d      	movs	r3, #29
 80024d4:	0001      	movs	r1, r0
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	4652      	mov	r2, sl
 80024da:	3908      	subs	r1, #8
 80024dc:	40da      	lsrs	r2, r3
 80024de:	408e      	lsls	r6, r1
 80024e0:	4316      	orrs	r6, r2
 80024e2:	4652      	mov	r2, sl
 80024e4:	408a      	lsls	r2, r1
 80024e6:	9b00      	ldr	r3, [sp, #0]
 80024e8:	4989      	ldr	r1, [pc, #548]	; (8002710 <__aeabi_dmul+0x3a4>)
 80024ea:	1a18      	subs	r0, r3, r0
 80024ec:	0003      	movs	r3, r0
 80024ee:	468c      	mov	ip, r1
 80024f0:	4463      	add	r3, ip
 80024f2:	2000      	movs	r0, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	e77a      	b.n	80023ee <__aeabi_dmul+0x82>
 80024f8:	2400      	movs	r4, #0
 80024fa:	2500      	movs	r5, #0
 80024fc:	4a81      	ldr	r2, [pc, #516]	; (8002704 <__aeabi_dmul+0x398>)
 80024fe:	e7a5      	b.n	800244c <__aeabi_dmul+0xe0>
 8002500:	0c2f      	lsrs	r7, r5, #16
 8002502:	042d      	lsls	r5, r5, #16
 8002504:	0c2d      	lsrs	r5, r5, #16
 8002506:	002b      	movs	r3, r5
 8002508:	0c11      	lsrs	r1, r2, #16
 800250a:	0412      	lsls	r2, r2, #16
 800250c:	0c12      	lsrs	r2, r2, #16
 800250e:	4353      	muls	r3, r2
 8002510:	4698      	mov	r8, r3
 8002512:	0013      	movs	r3, r2
 8002514:	0028      	movs	r0, r5
 8002516:	437b      	muls	r3, r7
 8002518:	4699      	mov	r9, r3
 800251a:	4348      	muls	r0, r1
 800251c:	4448      	add	r0, r9
 800251e:	4683      	mov	fp, r0
 8002520:	4640      	mov	r0, r8
 8002522:	000b      	movs	r3, r1
 8002524:	0c00      	lsrs	r0, r0, #16
 8002526:	4682      	mov	sl, r0
 8002528:	4658      	mov	r0, fp
 800252a:	437b      	muls	r3, r7
 800252c:	4450      	add	r0, sl
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	4581      	cmp	r9, r0
 8002532:	d906      	bls.n	8002542 <__aeabi_dmul+0x1d6>
 8002534:	469a      	mov	sl, r3
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	025b      	lsls	r3, r3, #9
 800253a:	4699      	mov	r9, r3
 800253c:	44ca      	add	sl, r9
 800253e:	4653      	mov	r3, sl
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	0c03      	lsrs	r3, r0, #16
 8002544:	469b      	mov	fp, r3
 8002546:	4643      	mov	r3, r8
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	0400      	lsls	r0, r0, #16
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	4698      	mov	r8, r3
 8002550:	0003      	movs	r3, r0
 8002552:	4443      	add	r3, r8
 8002554:	9304      	str	r3, [sp, #16]
 8002556:	0c33      	lsrs	r3, r6, #16
 8002558:	4699      	mov	r9, r3
 800255a:	002b      	movs	r3, r5
 800255c:	0436      	lsls	r6, r6, #16
 800255e:	0c36      	lsrs	r6, r6, #16
 8002560:	4373      	muls	r3, r6
 8002562:	4698      	mov	r8, r3
 8002564:	0033      	movs	r3, r6
 8002566:	437b      	muls	r3, r7
 8002568:	469a      	mov	sl, r3
 800256a:	464b      	mov	r3, r9
 800256c:	435d      	muls	r5, r3
 800256e:	435f      	muls	r7, r3
 8002570:	4643      	mov	r3, r8
 8002572:	4455      	add	r5, sl
 8002574:	0c18      	lsrs	r0, r3, #16
 8002576:	1940      	adds	r0, r0, r5
 8002578:	4582      	cmp	sl, r0
 800257a:	d903      	bls.n	8002584 <__aeabi_dmul+0x218>
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	469a      	mov	sl, r3
 8002582:	4457      	add	r7, sl
 8002584:	0c05      	lsrs	r5, r0, #16
 8002586:	19eb      	adds	r3, r5, r7
 8002588:	9305      	str	r3, [sp, #20]
 800258a:	4643      	mov	r3, r8
 800258c:	041d      	lsls	r5, r3, #16
 800258e:	0c2d      	lsrs	r5, r5, #16
 8002590:	0400      	lsls	r0, r0, #16
 8002592:	1940      	adds	r0, r0, r5
 8002594:	0c25      	lsrs	r5, r4, #16
 8002596:	0424      	lsls	r4, r4, #16
 8002598:	0c24      	lsrs	r4, r4, #16
 800259a:	0027      	movs	r7, r4
 800259c:	4357      	muls	r7, r2
 800259e:	436a      	muls	r2, r5
 80025a0:	4690      	mov	r8, r2
 80025a2:	002a      	movs	r2, r5
 80025a4:	0c3b      	lsrs	r3, r7, #16
 80025a6:	469a      	mov	sl, r3
 80025a8:	434a      	muls	r2, r1
 80025aa:	4361      	muls	r1, r4
 80025ac:	4441      	add	r1, r8
 80025ae:	4451      	add	r1, sl
 80025b0:	4483      	add	fp, r0
 80025b2:	4588      	cmp	r8, r1
 80025b4:	d903      	bls.n	80025be <__aeabi_dmul+0x252>
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	025b      	lsls	r3, r3, #9
 80025ba:	4698      	mov	r8, r3
 80025bc:	4442      	add	r2, r8
 80025be:	043f      	lsls	r7, r7, #16
 80025c0:	0c0b      	lsrs	r3, r1, #16
 80025c2:	0c3f      	lsrs	r7, r7, #16
 80025c4:	0409      	lsls	r1, r1, #16
 80025c6:	19c9      	adds	r1, r1, r7
 80025c8:	0027      	movs	r7, r4
 80025ca:	4698      	mov	r8, r3
 80025cc:	464b      	mov	r3, r9
 80025ce:	4377      	muls	r7, r6
 80025d0:	435c      	muls	r4, r3
 80025d2:	436e      	muls	r6, r5
 80025d4:	435d      	muls	r5, r3
 80025d6:	0c3b      	lsrs	r3, r7, #16
 80025d8:	4699      	mov	r9, r3
 80025da:	19a4      	adds	r4, r4, r6
 80025dc:	444c      	add	r4, r9
 80025de:	4442      	add	r2, r8
 80025e0:	9503      	str	r5, [sp, #12]
 80025e2:	42a6      	cmp	r6, r4
 80025e4:	d904      	bls.n	80025f0 <__aeabi_dmul+0x284>
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	025b      	lsls	r3, r3, #9
 80025ea:	4698      	mov	r8, r3
 80025ec:	4445      	add	r5, r8
 80025ee:	9503      	str	r5, [sp, #12]
 80025f0:	9b02      	ldr	r3, [sp, #8]
 80025f2:	043f      	lsls	r7, r7, #16
 80025f4:	445b      	add	r3, fp
 80025f6:	001e      	movs	r6, r3
 80025f8:	4283      	cmp	r3, r0
 80025fa:	4180      	sbcs	r0, r0
 80025fc:	0423      	lsls	r3, r4, #16
 80025fe:	4698      	mov	r8, r3
 8002600:	9b05      	ldr	r3, [sp, #20]
 8002602:	0c3f      	lsrs	r7, r7, #16
 8002604:	4447      	add	r7, r8
 8002606:	4698      	mov	r8, r3
 8002608:	1876      	adds	r6, r6, r1
 800260a:	428e      	cmp	r6, r1
 800260c:	4189      	sbcs	r1, r1
 800260e:	4447      	add	r7, r8
 8002610:	4240      	negs	r0, r0
 8002612:	183d      	adds	r5, r7, r0
 8002614:	46a8      	mov	r8, r5
 8002616:	4693      	mov	fp, r2
 8002618:	4249      	negs	r1, r1
 800261a:	468a      	mov	sl, r1
 800261c:	44c3      	add	fp, r8
 800261e:	429f      	cmp	r7, r3
 8002620:	41bf      	sbcs	r7, r7
 8002622:	4580      	cmp	r8, r0
 8002624:	4180      	sbcs	r0, r0
 8002626:	9b03      	ldr	r3, [sp, #12]
 8002628:	44da      	add	sl, fp
 800262a:	4698      	mov	r8, r3
 800262c:	4653      	mov	r3, sl
 800262e:	4240      	negs	r0, r0
 8002630:	427f      	negs	r7, r7
 8002632:	4307      	orrs	r7, r0
 8002634:	0c24      	lsrs	r4, r4, #16
 8002636:	4593      	cmp	fp, r2
 8002638:	4192      	sbcs	r2, r2
 800263a:	458a      	cmp	sl, r1
 800263c:	4189      	sbcs	r1, r1
 800263e:	193f      	adds	r7, r7, r4
 8002640:	0ddc      	lsrs	r4, r3, #23
 8002642:	9b04      	ldr	r3, [sp, #16]
 8002644:	0275      	lsls	r5, r6, #9
 8002646:	431d      	orrs	r5, r3
 8002648:	1e68      	subs	r0, r5, #1
 800264a:	4185      	sbcs	r5, r0
 800264c:	4653      	mov	r3, sl
 800264e:	4252      	negs	r2, r2
 8002650:	4249      	negs	r1, r1
 8002652:	430a      	orrs	r2, r1
 8002654:	18bf      	adds	r7, r7, r2
 8002656:	4447      	add	r7, r8
 8002658:	0df6      	lsrs	r6, r6, #23
 800265a:	027f      	lsls	r7, r7, #9
 800265c:	4335      	orrs	r5, r6
 800265e:	025a      	lsls	r2, r3, #9
 8002660:	433c      	orrs	r4, r7
 8002662:	4315      	orrs	r5, r2
 8002664:	01fb      	lsls	r3, r7, #7
 8002666:	d400      	bmi.n	800266a <__aeabi_dmul+0x2fe>
 8002668:	e0c1      	b.n	80027ee <__aeabi_dmul+0x482>
 800266a:	2101      	movs	r1, #1
 800266c:	086a      	lsrs	r2, r5, #1
 800266e:	400d      	ands	r5, r1
 8002670:	4315      	orrs	r5, r2
 8002672:	07e2      	lsls	r2, r4, #31
 8002674:	4315      	orrs	r5, r2
 8002676:	0864      	lsrs	r4, r4, #1
 8002678:	4926      	ldr	r1, [pc, #152]	; (8002714 <__aeabi_dmul+0x3a8>)
 800267a:	4461      	add	r1, ip
 800267c:	2900      	cmp	r1, #0
 800267e:	dd56      	ble.n	800272e <__aeabi_dmul+0x3c2>
 8002680:	076b      	lsls	r3, r5, #29
 8002682:	d009      	beq.n	8002698 <__aeabi_dmul+0x32c>
 8002684:	220f      	movs	r2, #15
 8002686:	402a      	ands	r2, r5
 8002688:	2a04      	cmp	r2, #4
 800268a:	d005      	beq.n	8002698 <__aeabi_dmul+0x32c>
 800268c:	1d2a      	adds	r2, r5, #4
 800268e:	42aa      	cmp	r2, r5
 8002690:	41ad      	sbcs	r5, r5
 8002692:	426d      	negs	r5, r5
 8002694:	1964      	adds	r4, r4, r5
 8002696:	0015      	movs	r5, r2
 8002698:	01e3      	lsls	r3, r4, #7
 800269a:	d504      	bpl.n	80026a6 <__aeabi_dmul+0x33a>
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <__aeabi_dmul+0x3ac>)
 80026a0:	00c9      	lsls	r1, r1, #3
 80026a2:	4014      	ands	r4, r2
 80026a4:	4461      	add	r1, ip
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <__aeabi_dmul+0x3b0>)
 80026a8:	4291      	cmp	r1, r2
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dmul+0x342>
 80026ac:	e724      	b.n	80024f8 <__aeabi_dmul+0x18c>
 80026ae:	0762      	lsls	r2, r4, #29
 80026b0:	08ed      	lsrs	r5, r5, #3
 80026b2:	0264      	lsls	r4, r4, #9
 80026b4:	0549      	lsls	r1, r1, #21
 80026b6:	4315      	orrs	r5, r2
 80026b8:	0b24      	lsrs	r4, r4, #12
 80026ba:	0d4a      	lsrs	r2, r1, #21
 80026bc:	e6c6      	b.n	800244c <__aeabi_dmul+0xe0>
 80026be:	9701      	str	r7, [sp, #4]
 80026c0:	e6b8      	b.n	8002434 <__aeabi_dmul+0xc8>
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <__aeabi_dmul+0x398>)
 80026c4:	2003      	movs	r0, #3
 80026c6:	4694      	mov	ip, r2
 80026c8:	4463      	add	r3, ip
 80026ca:	464a      	mov	r2, r9
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2303      	movs	r3, #3
 80026d0:	431a      	orrs	r2, r3
 80026d2:	4691      	mov	r9, r2
 80026d4:	4652      	mov	r2, sl
 80026d6:	e68a      	b.n	80023ee <__aeabi_dmul+0x82>
 80026d8:	4649      	mov	r1, r9
 80026da:	2301      	movs	r3, #1
 80026dc:	4319      	orrs	r1, r3
 80026de:	4689      	mov	r9, r1
 80026e0:	2600      	movs	r6, #0
 80026e2:	2001      	movs	r0, #1
 80026e4:	e683      	b.n	80023ee <__aeabi_dmul+0x82>
 80026e6:	220c      	movs	r2, #12
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2303      	movs	r3, #3
 80026ec:	0005      	movs	r5, r0
 80026ee:	4691      	mov	r9, r2
 80026f0:	469b      	mov	fp, r3
 80026f2:	e65e      	b.n	80023b2 <__aeabi_dmul+0x46>
 80026f4:	2304      	movs	r3, #4
 80026f6:	4699      	mov	r9, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	2400      	movs	r4, #0
 8002700:	469b      	mov	fp, r3
 8002702:	e656      	b.n	80023b2 <__aeabi_dmul+0x46>
 8002704:	000007ff 	.word	0x000007ff
 8002708:	fffffc01 	.word	0xfffffc01
 800270c:	0800b020 	.word	0x0800b020
 8002710:	fffffc0d 	.word	0xfffffc0d
 8002714:	000003ff 	.word	0x000003ff
 8002718:	feffffff 	.word	0xfeffffff
 800271c:	000007fe 	.word	0x000007fe
 8002720:	2300      	movs	r3, #0
 8002722:	2480      	movs	r4, #128	; 0x80
 8002724:	2500      	movs	r5, #0
 8002726:	4a44      	ldr	r2, [pc, #272]	; (8002838 <__aeabi_dmul+0x4cc>)
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	0324      	lsls	r4, r4, #12
 800272c:	e68e      	b.n	800244c <__aeabi_dmul+0xe0>
 800272e:	2001      	movs	r0, #1
 8002730:	1a40      	subs	r0, r0, r1
 8002732:	2838      	cmp	r0, #56	; 0x38
 8002734:	dd00      	ble.n	8002738 <__aeabi_dmul+0x3cc>
 8002736:	e686      	b.n	8002446 <__aeabi_dmul+0xda>
 8002738:	281f      	cmp	r0, #31
 800273a:	dd5b      	ble.n	80027f4 <__aeabi_dmul+0x488>
 800273c:	221f      	movs	r2, #31
 800273e:	0023      	movs	r3, r4
 8002740:	4252      	negs	r2, r2
 8002742:	1a51      	subs	r1, r2, r1
 8002744:	40cb      	lsrs	r3, r1
 8002746:	0019      	movs	r1, r3
 8002748:	2820      	cmp	r0, #32
 800274a:	d003      	beq.n	8002754 <__aeabi_dmul+0x3e8>
 800274c:	4a3b      	ldr	r2, [pc, #236]	; (800283c <__aeabi_dmul+0x4d0>)
 800274e:	4462      	add	r2, ip
 8002750:	4094      	lsls	r4, r2
 8002752:	4325      	orrs	r5, r4
 8002754:	1e6a      	subs	r2, r5, #1
 8002756:	4195      	sbcs	r5, r2
 8002758:	002a      	movs	r2, r5
 800275a:	430a      	orrs	r2, r1
 800275c:	2107      	movs	r1, #7
 800275e:	000d      	movs	r5, r1
 8002760:	2400      	movs	r4, #0
 8002762:	4015      	ands	r5, r2
 8002764:	4211      	tst	r1, r2
 8002766:	d05b      	beq.n	8002820 <__aeabi_dmul+0x4b4>
 8002768:	210f      	movs	r1, #15
 800276a:	2400      	movs	r4, #0
 800276c:	4011      	ands	r1, r2
 800276e:	2904      	cmp	r1, #4
 8002770:	d053      	beq.n	800281a <__aeabi_dmul+0x4ae>
 8002772:	1d11      	adds	r1, r2, #4
 8002774:	4291      	cmp	r1, r2
 8002776:	4192      	sbcs	r2, r2
 8002778:	4252      	negs	r2, r2
 800277a:	18a4      	adds	r4, r4, r2
 800277c:	000a      	movs	r2, r1
 800277e:	0223      	lsls	r3, r4, #8
 8002780:	d54b      	bpl.n	800281a <__aeabi_dmul+0x4ae>
 8002782:	2201      	movs	r2, #1
 8002784:	2400      	movs	r4, #0
 8002786:	2500      	movs	r5, #0
 8002788:	e660      	b.n	800244c <__aeabi_dmul+0xe0>
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	031b      	lsls	r3, r3, #12
 800278e:	421c      	tst	r4, r3
 8002790:	d009      	beq.n	80027a6 <__aeabi_dmul+0x43a>
 8002792:	421e      	tst	r6, r3
 8002794:	d107      	bne.n	80027a6 <__aeabi_dmul+0x43a>
 8002796:	4333      	orrs	r3, r6
 8002798:	031c      	lsls	r4, r3, #12
 800279a:	4643      	mov	r3, r8
 800279c:	0015      	movs	r5, r2
 800279e:	0b24      	lsrs	r4, r4, #12
 80027a0:	4a25      	ldr	r2, [pc, #148]	; (8002838 <__aeabi_dmul+0x4cc>)
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	e652      	b.n	800244c <__aeabi_dmul+0xe0>
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0312      	lsls	r2, r2, #12
 80027aa:	4314      	orrs	r4, r2
 80027ac:	0324      	lsls	r4, r4, #12
 80027ae:	4a22      	ldr	r2, [pc, #136]	; (8002838 <__aeabi_dmul+0x4cc>)
 80027b0:	0b24      	lsrs	r4, r4, #12
 80027b2:	9701      	str	r7, [sp, #4]
 80027b4:	e64a      	b.n	800244c <__aeabi_dmul+0xe0>
 80027b6:	f000 fd51 	bl	800325c <__clzsi2>
 80027ba:	0003      	movs	r3, r0
 80027bc:	001a      	movs	r2, r3
 80027be:	3215      	adds	r2, #21
 80027c0:	3020      	adds	r0, #32
 80027c2:	2a1c      	cmp	r2, #28
 80027c4:	dc00      	bgt.n	80027c8 <__aeabi_dmul+0x45c>
 80027c6:	e684      	b.n	80024d2 <__aeabi_dmul+0x166>
 80027c8:	4656      	mov	r6, sl
 80027ca:	3b08      	subs	r3, #8
 80027cc:	2200      	movs	r2, #0
 80027ce:	409e      	lsls	r6, r3
 80027d0:	e689      	b.n	80024e6 <__aeabi_dmul+0x17a>
 80027d2:	f000 fd43 	bl	800325c <__clzsi2>
 80027d6:	0001      	movs	r1, r0
 80027d8:	0002      	movs	r2, r0
 80027da:	3115      	adds	r1, #21
 80027dc:	3220      	adds	r2, #32
 80027de:	291c      	cmp	r1, #28
 80027e0:	dc00      	bgt.n	80027e4 <__aeabi_dmul+0x478>
 80027e2:	e64e      	b.n	8002482 <__aeabi_dmul+0x116>
 80027e4:	0034      	movs	r4, r6
 80027e6:	3808      	subs	r0, #8
 80027e8:	2500      	movs	r5, #0
 80027ea:	4084      	lsls	r4, r0
 80027ec:	e653      	b.n	8002496 <__aeabi_dmul+0x12a>
 80027ee:	9b00      	ldr	r3, [sp, #0]
 80027f0:	469c      	mov	ip, r3
 80027f2:	e741      	b.n	8002678 <__aeabi_dmul+0x30c>
 80027f4:	4912      	ldr	r1, [pc, #72]	; (8002840 <__aeabi_dmul+0x4d4>)
 80027f6:	0022      	movs	r2, r4
 80027f8:	4461      	add	r1, ip
 80027fa:	002e      	movs	r6, r5
 80027fc:	408d      	lsls	r5, r1
 80027fe:	408a      	lsls	r2, r1
 8002800:	40c6      	lsrs	r6, r0
 8002802:	1e69      	subs	r1, r5, #1
 8002804:	418d      	sbcs	r5, r1
 8002806:	4332      	orrs	r2, r6
 8002808:	432a      	orrs	r2, r5
 800280a:	40c4      	lsrs	r4, r0
 800280c:	0753      	lsls	r3, r2, #29
 800280e:	d0b6      	beq.n	800277e <__aeabi_dmul+0x412>
 8002810:	210f      	movs	r1, #15
 8002812:	4011      	ands	r1, r2
 8002814:	2904      	cmp	r1, #4
 8002816:	d1ac      	bne.n	8002772 <__aeabi_dmul+0x406>
 8002818:	e7b1      	b.n	800277e <__aeabi_dmul+0x412>
 800281a:	0765      	lsls	r5, r4, #29
 800281c:	0264      	lsls	r4, r4, #9
 800281e:	0b24      	lsrs	r4, r4, #12
 8002820:	08d2      	lsrs	r2, r2, #3
 8002822:	4315      	orrs	r5, r2
 8002824:	2200      	movs	r2, #0
 8002826:	e611      	b.n	800244c <__aeabi_dmul+0xe0>
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	0312      	lsls	r2, r2, #12
 800282c:	4314      	orrs	r4, r2
 800282e:	0324      	lsls	r4, r4, #12
 8002830:	4a01      	ldr	r2, [pc, #4]	; (8002838 <__aeabi_dmul+0x4cc>)
 8002832:	0b24      	lsrs	r4, r4, #12
 8002834:	e60a      	b.n	800244c <__aeabi_dmul+0xe0>
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	000007ff 	.word	0x000007ff
 800283c:	0000043e 	.word	0x0000043e
 8002840:	0000041e 	.word	0x0000041e

08002844 <__aeabi_dsub>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	4657      	mov	r7, sl
 8002848:	464e      	mov	r6, r9
 800284a:	4645      	mov	r5, r8
 800284c:	46de      	mov	lr, fp
 800284e:	0004      	movs	r4, r0
 8002850:	b5e0      	push	{r5, r6, r7, lr}
 8002852:	001f      	movs	r7, r3
 8002854:	0010      	movs	r0, r2
 8002856:	030b      	lsls	r3, r1, #12
 8002858:	0f62      	lsrs	r2, r4, #29
 800285a:	004e      	lsls	r6, r1, #1
 800285c:	0fcd      	lsrs	r5, r1, #31
 800285e:	0a5b      	lsrs	r3, r3, #9
 8002860:	0339      	lsls	r1, r7, #12
 8002862:	4313      	orrs	r3, r2
 8002864:	0a49      	lsrs	r1, r1, #9
 8002866:	00e2      	lsls	r2, r4, #3
 8002868:	0f44      	lsrs	r4, r0, #29
 800286a:	4321      	orrs	r1, r4
 800286c:	4cc2      	ldr	r4, [pc, #776]	; (8002b78 <__aeabi_dsub+0x334>)
 800286e:	4691      	mov	r9, r2
 8002870:	4692      	mov	sl, r2
 8002872:	00c0      	lsls	r0, r0, #3
 8002874:	007a      	lsls	r2, r7, #1
 8002876:	4680      	mov	r8, r0
 8002878:	0d76      	lsrs	r6, r6, #21
 800287a:	0d52      	lsrs	r2, r2, #21
 800287c:	0fff      	lsrs	r7, r7, #31
 800287e:	42a2      	cmp	r2, r4
 8002880:	d100      	bne.n	8002884 <__aeabi_dsub+0x40>
 8002882:	e0b4      	b.n	80029ee <__aeabi_dsub+0x1aa>
 8002884:	2401      	movs	r4, #1
 8002886:	4067      	eors	r7, r4
 8002888:	46bb      	mov	fp, r7
 800288a:	42bd      	cmp	r5, r7
 800288c:	d100      	bne.n	8002890 <__aeabi_dsub+0x4c>
 800288e:	e088      	b.n	80029a2 <__aeabi_dsub+0x15e>
 8002890:	1ab4      	subs	r4, r6, r2
 8002892:	46a4      	mov	ip, r4
 8002894:	2c00      	cmp	r4, #0
 8002896:	dc00      	bgt.n	800289a <__aeabi_dsub+0x56>
 8002898:	e0b2      	b.n	8002a00 <__aeabi_dsub+0x1bc>
 800289a:	2a00      	cmp	r2, #0
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x5c>
 800289e:	e0c5      	b.n	8002a2c <__aeabi_dsub+0x1e8>
 80028a0:	4ab5      	ldr	r2, [pc, #724]	; (8002b78 <__aeabi_dsub+0x334>)
 80028a2:	4296      	cmp	r6, r2
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x64>
 80028a6:	e28b      	b.n	8002dc0 <__aeabi_dsub+0x57c>
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	0412      	lsls	r2, r2, #16
 80028ac:	4311      	orrs	r1, r2
 80028ae:	4662      	mov	r2, ip
 80028b0:	2a38      	cmp	r2, #56	; 0x38
 80028b2:	dd00      	ble.n	80028b6 <__aeabi_dsub+0x72>
 80028b4:	e1a1      	b.n	8002bfa <__aeabi_dsub+0x3b6>
 80028b6:	2a1f      	cmp	r2, #31
 80028b8:	dd00      	ble.n	80028bc <__aeabi_dsub+0x78>
 80028ba:	e216      	b.n	8002cea <__aeabi_dsub+0x4a6>
 80028bc:	2720      	movs	r7, #32
 80028be:	000c      	movs	r4, r1
 80028c0:	1abf      	subs	r7, r7, r2
 80028c2:	40bc      	lsls	r4, r7
 80028c4:	0002      	movs	r2, r0
 80028c6:	46a0      	mov	r8, r4
 80028c8:	4664      	mov	r4, ip
 80028ca:	40b8      	lsls	r0, r7
 80028cc:	40e2      	lsrs	r2, r4
 80028ce:	4644      	mov	r4, r8
 80028d0:	4314      	orrs	r4, r2
 80028d2:	0002      	movs	r2, r0
 80028d4:	1e50      	subs	r0, r2, #1
 80028d6:	4182      	sbcs	r2, r0
 80028d8:	4660      	mov	r0, ip
 80028da:	40c1      	lsrs	r1, r0
 80028dc:	4322      	orrs	r2, r4
 80028de:	1a5b      	subs	r3, r3, r1
 80028e0:	4649      	mov	r1, r9
 80028e2:	1a8c      	subs	r4, r1, r2
 80028e4:	45a1      	cmp	r9, r4
 80028e6:	4192      	sbcs	r2, r2
 80028e8:	4252      	negs	r2, r2
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	4698      	mov	r8, r3
 80028ee:	4643      	mov	r3, r8
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	d400      	bmi.n	80028f6 <__aeabi_dsub+0xb2>
 80028f4:	e117      	b.n	8002b26 <__aeabi_dsub+0x2e2>
 80028f6:	4643      	mov	r3, r8
 80028f8:	025b      	lsls	r3, r3, #9
 80028fa:	0a5b      	lsrs	r3, r3, #9
 80028fc:	4698      	mov	r8, r3
 80028fe:	4643      	mov	r3, r8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d100      	bne.n	8002906 <__aeabi_dsub+0xc2>
 8002904:	e16c      	b.n	8002be0 <__aeabi_dsub+0x39c>
 8002906:	4640      	mov	r0, r8
 8002908:	f000 fca8 	bl	800325c <__clzsi2>
 800290c:	0002      	movs	r2, r0
 800290e:	3a08      	subs	r2, #8
 8002910:	2120      	movs	r1, #32
 8002912:	0020      	movs	r0, r4
 8002914:	4643      	mov	r3, r8
 8002916:	1a89      	subs	r1, r1, r2
 8002918:	4093      	lsls	r3, r2
 800291a:	40c8      	lsrs	r0, r1
 800291c:	4094      	lsls	r4, r2
 800291e:	4303      	orrs	r3, r0
 8002920:	4296      	cmp	r6, r2
 8002922:	dd00      	ble.n	8002926 <__aeabi_dsub+0xe2>
 8002924:	e157      	b.n	8002bd6 <__aeabi_dsub+0x392>
 8002926:	1b96      	subs	r6, r2, r6
 8002928:	1c71      	adds	r1, r6, #1
 800292a:	291f      	cmp	r1, #31
 800292c:	dd00      	ble.n	8002930 <__aeabi_dsub+0xec>
 800292e:	e1cb      	b.n	8002cc8 <__aeabi_dsub+0x484>
 8002930:	2220      	movs	r2, #32
 8002932:	0018      	movs	r0, r3
 8002934:	0026      	movs	r6, r4
 8002936:	1a52      	subs	r2, r2, r1
 8002938:	4094      	lsls	r4, r2
 800293a:	4090      	lsls	r0, r2
 800293c:	40ce      	lsrs	r6, r1
 800293e:	40cb      	lsrs	r3, r1
 8002940:	1e62      	subs	r2, r4, #1
 8002942:	4194      	sbcs	r4, r2
 8002944:	4330      	orrs	r0, r6
 8002946:	4698      	mov	r8, r3
 8002948:	2600      	movs	r6, #0
 800294a:	4304      	orrs	r4, r0
 800294c:	0763      	lsls	r3, r4, #29
 800294e:	d009      	beq.n	8002964 <__aeabi_dsub+0x120>
 8002950:	230f      	movs	r3, #15
 8002952:	4023      	ands	r3, r4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d005      	beq.n	8002964 <__aeabi_dsub+0x120>
 8002958:	1d23      	adds	r3, r4, #4
 800295a:	42a3      	cmp	r3, r4
 800295c:	41a4      	sbcs	r4, r4
 800295e:	4264      	negs	r4, r4
 8002960:	44a0      	add	r8, r4
 8002962:	001c      	movs	r4, r3
 8002964:	4643      	mov	r3, r8
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	d400      	bmi.n	800296c <__aeabi_dsub+0x128>
 800296a:	e0df      	b.n	8002b2c <__aeabi_dsub+0x2e8>
 800296c:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <__aeabi_dsub+0x334>)
 800296e:	3601      	adds	r6, #1
 8002970:	429e      	cmp	r6, r3
 8002972:	d100      	bne.n	8002976 <__aeabi_dsub+0x132>
 8002974:	e0fb      	b.n	8002b6e <__aeabi_dsub+0x32a>
 8002976:	4642      	mov	r2, r8
 8002978:	4b80      	ldr	r3, [pc, #512]	; (8002b7c <__aeabi_dsub+0x338>)
 800297a:	08e4      	lsrs	r4, r4, #3
 800297c:	401a      	ands	r2, r3
 800297e:	0013      	movs	r3, r2
 8002980:	0571      	lsls	r1, r6, #21
 8002982:	0752      	lsls	r2, r2, #29
 8002984:	025b      	lsls	r3, r3, #9
 8002986:	4322      	orrs	r2, r4
 8002988:	0b1b      	lsrs	r3, r3, #12
 800298a:	0d49      	lsrs	r1, r1, #21
 800298c:	0509      	lsls	r1, r1, #20
 800298e:	07ed      	lsls	r5, r5, #31
 8002990:	4319      	orrs	r1, r3
 8002992:	4329      	orrs	r1, r5
 8002994:	0010      	movs	r0, r2
 8002996:	bcf0      	pop	{r4, r5, r6, r7}
 8002998:	46bb      	mov	fp, r7
 800299a:	46b2      	mov	sl, r6
 800299c:	46a9      	mov	r9, r5
 800299e:	46a0      	mov	r8, r4
 80029a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029a2:	1ab4      	subs	r4, r6, r2
 80029a4:	46a4      	mov	ip, r4
 80029a6:	2c00      	cmp	r4, #0
 80029a8:	dd58      	ble.n	8002a5c <__aeabi_dsub+0x218>
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x16c>
 80029ae:	e09e      	b.n	8002aee <__aeabi_dsub+0x2aa>
 80029b0:	4a71      	ldr	r2, [pc, #452]	; (8002b78 <__aeabi_dsub+0x334>)
 80029b2:	4296      	cmp	r6, r2
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x174>
 80029b6:	e13b      	b.n	8002c30 <__aeabi_dsub+0x3ec>
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	0412      	lsls	r2, r2, #16
 80029bc:	4311      	orrs	r1, r2
 80029be:	4662      	mov	r2, ip
 80029c0:	2a38      	cmp	r2, #56	; 0x38
 80029c2:	dd00      	ble.n	80029c6 <__aeabi_dsub+0x182>
 80029c4:	e0c1      	b.n	8002b4a <__aeabi_dsub+0x306>
 80029c6:	2a1f      	cmp	r2, #31
 80029c8:	dc00      	bgt.n	80029cc <__aeabi_dsub+0x188>
 80029ca:	e1bb      	b.n	8002d44 <__aeabi_dsub+0x500>
 80029cc:	000c      	movs	r4, r1
 80029ce:	3a20      	subs	r2, #32
 80029d0:	40d4      	lsrs	r4, r2
 80029d2:	0022      	movs	r2, r4
 80029d4:	4664      	mov	r4, ip
 80029d6:	2c20      	cmp	r4, #32
 80029d8:	d004      	beq.n	80029e4 <__aeabi_dsub+0x1a0>
 80029da:	2740      	movs	r7, #64	; 0x40
 80029dc:	1b3f      	subs	r7, r7, r4
 80029de:	40b9      	lsls	r1, r7
 80029e0:	4308      	orrs	r0, r1
 80029e2:	4680      	mov	r8, r0
 80029e4:	4644      	mov	r4, r8
 80029e6:	1e61      	subs	r1, r4, #1
 80029e8:	418c      	sbcs	r4, r1
 80029ea:	4314      	orrs	r4, r2
 80029ec:	e0b1      	b.n	8002b52 <__aeabi_dsub+0x30e>
 80029ee:	000c      	movs	r4, r1
 80029f0:	4304      	orrs	r4, r0
 80029f2:	d02a      	beq.n	8002a4a <__aeabi_dsub+0x206>
 80029f4:	46bb      	mov	fp, r7
 80029f6:	42bd      	cmp	r5, r7
 80029f8:	d02d      	beq.n	8002a56 <__aeabi_dsub+0x212>
 80029fa:	4c61      	ldr	r4, [pc, #388]	; (8002b80 <__aeabi_dsub+0x33c>)
 80029fc:	46a4      	mov	ip, r4
 80029fe:	44b4      	add	ip, r6
 8002a00:	4664      	mov	r4, ip
 8002a02:	2c00      	cmp	r4, #0
 8002a04:	d05c      	beq.n	8002ac0 <__aeabi_dsub+0x27c>
 8002a06:	1b94      	subs	r4, r2, r6
 8002a08:	46a4      	mov	ip, r4
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d000      	beq.n	8002a10 <__aeabi_dsub+0x1cc>
 8002a0e:	e115      	b.n	8002c3c <__aeabi_dsub+0x3f8>
 8002a10:	464d      	mov	r5, r9
 8002a12:	431d      	orrs	r5, r3
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dsub+0x1d4>
 8002a16:	e1c3      	b.n	8002da0 <__aeabi_dsub+0x55c>
 8002a18:	1e65      	subs	r5, r4, #1
 8002a1a:	2c01      	cmp	r4, #1
 8002a1c:	d100      	bne.n	8002a20 <__aeabi_dsub+0x1dc>
 8002a1e:	e20c      	b.n	8002e3a <__aeabi_dsub+0x5f6>
 8002a20:	4e55      	ldr	r6, [pc, #340]	; (8002b78 <__aeabi_dsub+0x334>)
 8002a22:	42b4      	cmp	r4, r6
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dsub+0x1e4>
 8002a26:	e1f8      	b.n	8002e1a <__aeabi_dsub+0x5d6>
 8002a28:	46ac      	mov	ip, r5
 8002a2a:	e10e      	b.n	8002c4a <__aeabi_dsub+0x406>
 8002a2c:	000a      	movs	r2, r1
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	d100      	bne.n	8002a34 <__aeabi_dsub+0x1f0>
 8002a32:	e136      	b.n	8002ca2 <__aeabi_dsub+0x45e>
 8002a34:	0022      	movs	r2, r4
 8002a36:	3a01      	subs	r2, #1
 8002a38:	2c01      	cmp	r4, #1
 8002a3a:	d100      	bne.n	8002a3e <__aeabi_dsub+0x1fa>
 8002a3c:	e1c6      	b.n	8002dcc <__aeabi_dsub+0x588>
 8002a3e:	4c4e      	ldr	r4, [pc, #312]	; (8002b78 <__aeabi_dsub+0x334>)
 8002a40:	45a4      	cmp	ip, r4
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x202>
 8002a44:	e0f4      	b.n	8002c30 <__aeabi_dsub+0x3ec>
 8002a46:	4694      	mov	ip, r2
 8002a48:	e731      	b.n	80028ae <__aeabi_dsub+0x6a>
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	4067      	eors	r7, r4
 8002a4e:	46bb      	mov	fp, r7
 8002a50:	42bd      	cmp	r5, r7
 8002a52:	d000      	beq.n	8002a56 <__aeabi_dsub+0x212>
 8002a54:	e71c      	b.n	8002890 <__aeabi_dsub+0x4c>
 8002a56:	4c4a      	ldr	r4, [pc, #296]	; (8002b80 <__aeabi_dsub+0x33c>)
 8002a58:	46a4      	mov	ip, r4
 8002a5a:	44b4      	add	ip, r6
 8002a5c:	4664      	mov	r4, ip
 8002a5e:	2c00      	cmp	r4, #0
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x220>
 8002a62:	e0cf      	b.n	8002c04 <__aeabi_dsub+0x3c0>
 8002a64:	1b94      	subs	r4, r2, r6
 8002a66:	46a4      	mov	ip, r4
 8002a68:	2e00      	cmp	r6, #0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x22a>
 8002a6c:	e15c      	b.n	8002d28 <__aeabi_dsub+0x4e4>
 8002a6e:	4e42      	ldr	r6, [pc, #264]	; (8002b78 <__aeabi_dsub+0x334>)
 8002a70:	42b2      	cmp	r2, r6
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x232>
 8002a74:	e1ec      	b.n	8002e50 <__aeabi_dsub+0x60c>
 8002a76:	2680      	movs	r6, #128	; 0x80
 8002a78:	0436      	lsls	r6, r6, #16
 8002a7a:	4333      	orrs	r3, r6
 8002a7c:	4664      	mov	r4, ip
 8002a7e:	2c38      	cmp	r4, #56	; 0x38
 8002a80:	dd00      	ble.n	8002a84 <__aeabi_dsub+0x240>
 8002a82:	e1b3      	b.n	8002dec <__aeabi_dsub+0x5a8>
 8002a84:	2c1f      	cmp	r4, #31
 8002a86:	dd00      	ble.n	8002a8a <__aeabi_dsub+0x246>
 8002a88:	e238      	b.n	8002efc <__aeabi_dsub+0x6b8>
 8002a8a:	2620      	movs	r6, #32
 8002a8c:	1b36      	subs	r6, r6, r4
 8002a8e:	001c      	movs	r4, r3
 8002a90:	40b4      	lsls	r4, r6
 8002a92:	464f      	mov	r7, r9
 8002a94:	46a0      	mov	r8, r4
 8002a96:	4664      	mov	r4, ip
 8002a98:	40e7      	lsrs	r7, r4
 8002a9a:	4644      	mov	r4, r8
 8002a9c:	433c      	orrs	r4, r7
 8002a9e:	464f      	mov	r7, r9
 8002aa0:	40b7      	lsls	r7, r6
 8002aa2:	003e      	movs	r6, r7
 8002aa4:	1e77      	subs	r7, r6, #1
 8002aa6:	41be      	sbcs	r6, r7
 8002aa8:	4334      	orrs	r4, r6
 8002aaa:	4666      	mov	r6, ip
 8002aac:	40f3      	lsrs	r3, r6
 8002aae:	18c9      	adds	r1, r1, r3
 8002ab0:	1824      	adds	r4, r4, r0
 8002ab2:	4284      	cmp	r4, r0
 8002ab4:	419b      	sbcs	r3, r3
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	4698      	mov	r8, r3
 8002aba:	0016      	movs	r6, r2
 8002abc:	4488      	add	r8, r1
 8002abe:	e04e      	b.n	8002b5e <__aeabi_dsub+0x31a>
 8002ac0:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <__aeabi_dsub+0x340>)
 8002ac2:	1c74      	adds	r4, r6, #1
 8002ac4:	4214      	tst	r4, r2
 8002ac6:	d000      	beq.n	8002aca <__aeabi_dsub+0x286>
 8002ac8:	e0d6      	b.n	8002c78 <__aeabi_dsub+0x434>
 8002aca:	464a      	mov	r2, r9
 8002acc:	431a      	orrs	r2, r3
 8002ace:	2e00      	cmp	r6, #0
 8002ad0:	d000      	beq.n	8002ad4 <__aeabi_dsub+0x290>
 8002ad2:	e15b      	b.n	8002d8c <__aeabi_dsub+0x548>
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	d100      	bne.n	8002ada <__aeabi_dsub+0x296>
 8002ad8:	e1a5      	b.n	8002e26 <__aeabi_dsub+0x5e2>
 8002ada:	000a      	movs	r2, r1
 8002adc:	4302      	orrs	r2, r0
 8002ade:	d000      	beq.n	8002ae2 <__aeabi_dsub+0x29e>
 8002ae0:	e1bb      	b.n	8002e5a <__aeabi_dsub+0x616>
 8002ae2:	464a      	mov	r2, r9
 8002ae4:	0759      	lsls	r1, r3, #29
 8002ae6:	08d2      	lsrs	r2, r2, #3
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	08db      	lsrs	r3, r3, #3
 8002aec:	e027      	b.n	8002b3e <__aeabi_dsub+0x2fa>
 8002aee:	000a      	movs	r2, r1
 8002af0:	4302      	orrs	r2, r0
 8002af2:	d100      	bne.n	8002af6 <__aeabi_dsub+0x2b2>
 8002af4:	e174      	b.n	8002de0 <__aeabi_dsub+0x59c>
 8002af6:	0022      	movs	r2, r4
 8002af8:	3a01      	subs	r2, #1
 8002afa:	2c01      	cmp	r4, #1
 8002afc:	d005      	beq.n	8002b0a <__aeabi_dsub+0x2c6>
 8002afe:	4c1e      	ldr	r4, [pc, #120]	; (8002b78 <__aeabi_dsub+0x334>)
 8002b00:	45a4      	cmp	ip, r4
 8002b02:	d100      	bne.n	8002b06 <__aeabi_dsub+0x2c2>
 8002b04:	e094      	b.n	8002c30 <__aeabi_dsub+0x3ec>
 8002b06:	4694      	mov	ip, r2
 8002b08:	e759      	b.n	80029be <__aeabi_dsub+0x17a>
 8002b0a:	4448      	add	r0, r9
 8002b0c:	4548      	cmp	r0, r9
 8002b0e:	4192      	sbcs	r2, r2
 8002b10:	185b      	adds	r3, r3, r1
 8002b12:	4698      	mov	r8, r3
 8002b14:	0004      	movs	r4, r0
 8002b16:	4252      	negs	r2, r2
 8002b18:	4490      	add	r8, r2
 8002b1a:	4643      	mov	r3, r8
 8002b1c:	2602      	movs	r6, #2
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	d500      	bpl.n	8002b24 <__aeabi_dsub+0x2e0>
 8002b22:	e0c4      	b.n	8002cae <__aeabi_dsub+0x46a>
 8002b24:	3e01      	subs	r6, #1
 8002b26:	0763      	lsls	r3, r4, #29
 8002b28:	d000      	beq.n	8002b2c <__aeabi_dsub+0x2e8>
 8002b2a:	e711      	b.n	8002950 <__aeabi_dsub+0x10c>
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	46b4      	mov	ip, r6
 8002b30:	0759      	lsls	r1, r3, #29
 8002b32:	08e2      	lsrs	r2, r4, #3
 8002b34:	430a      	orrs	r2, r1
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	490f      	ldr	r1, [pc, #60]	; (8002b78 <__aeabi_dsub+0x334>)
 8002b3a:	458c      	cmp	ip, r1
 8002b3c:	d040      	beq.n	8002bc0 <__aeabi_dsub+0x37c>
 8002b3e:	4661      	mov	r1, ip
 8002b40:	031b      	lsls	r3, r3, #12
 8002b42:	0549      	lsls	r1, r1, #21
 8002b44:	0b1b      	lsrs	r3, r3, #12
 8002b46:	0d49      	lsrs	r1, r1, #21
 8002b48:	e720      	b.n	800298c <__aeabi_dsub+0x148>
 8002b4a:	4301      	orrs	r1, r0
 8002b4c:	000c      	movs	r4, r1
 8002b4e:	1e61      	subs	r1, r4, #1
 8002b50:	418c      	sbcs	r4, r1
 8002b52:	444c      	add	r4, r9
 8002b54:	454c      	cmp	r4, r9
 8002b56:	4192      	sbcs	r2, r2
 8002b58:	4252      	negs	r2, r2
 8002b5a:	4690      	mov	r8, r2
 8002b5c:	4498      	add	r8, r3
 8002b5e:	4643      	mov	r3, r8
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	d5e0      	bpl.n	8002b26 <__aeabi_dsub+0x2e2>
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <__aeabi_dsub+0x334>)
 8002b66:	3601      	adds	r6, #1
 8002b68:	429e      	cmp	r6, r3
 8002b6a:	d000      	beq.n	8002b6e <__aeabi_dsub+0x32a>
 8002b6c:	e09f      	b.n	8002cae <__aeabi_dsub+0x46a>
 8002b6e:	0031      	movs	r1, r6
 8002b70:	2300      	movs	r3, #0
 8002b72:	2200      	movs	r2, #0
 8002b74:	e70a      	b.n	800298c <__aeabi_dsub+0x148>
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	000007ff 	.word	0x000007ff
 8002b7c:	ff7fffff 	.word	0xff7fffff
 8002b80:	fffff801 	.word	0xfffff801
 8002b84:	000007fe 	.word	0x000007fe
 8002b88:	2a00      	cmp	r2, #0
 8002b8a:	d100      	bne.n	8002b8e <__aeabi_dsub+0x34a>
 8002b8c:	e160      	b.n	8002e50 <__aeabi_dsub+0x60c>
 8002b8e:	000a      	movs	r2, r1
 8002b90:	4302      	orrs	r2, r0
 8002b92:	d04d      	beq.n	8002c30 <__aeabi_dsub+0x3ec>
 8002b94:	464a      	mov	r2, r9
 8002b96:	075c      	lsls	r4, r3, #29
 8002b98:	08d2      	lsrs	r2, r2, #3
 8002b9a:	4322      	orrs	r2, r4
 8002b9c:	2480      	movs	r4, #128	; 0x80
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	0324      	lsls	r4, r4, #12
 8002ba2:	4223      	tst	r3, r4
 8002ba4:	d007      	beq.n	8002bb6 <__aeabi_dsub+0x372>
 8002ba6:	08ce      	lsrs	r6, r1, #3
 8002ba8:	4226      	tst	r6, r4
 8002baa:	d104      	bne.n	8002bb6 <__aeabi_dsub+0x372>
 8002bac:	465d      	mov	r5, fp
 8002bae:	0033      	movs	r3, r6
 8002bb0:	08c2      	lsrs	r2, r0, #3
 8002bb2:	0749      	lsls	r1, r1, #29
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	0f51      	lsrs	r1, r2, #29
 8002bb8:	00d2      	lsls	r2, r2, #3
 8002bba:	08d2      	lsrs	r2, r2, #3
 8002bbc:	0749      	lsls	r1, r1, #29
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	4319      	orrs	r1, r3
 8002bc4:	d100      	bne.n	8002bc8 <__aeabi_dsub+0x384>
 8002bc6:	e1c8      	b.n	8002f5a <__aeabi_dsub+0x716>
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	0309      	lsls	r1, r1, #12
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	031b      	lsls	r3, r3, #12
 8002bd0:	49d5      	ldr	r1, [pc, #852]	; (8002f28 <__aeabi_dsub+0x6e4>)
 8002bd2:	0b1b      	lsrs	r3, r3, #12
 8002bd4:	e6da      	b.n	800298c <__aeabi_dsub+0x148>
 8002bd6:	49d5      	ldr	r1, [pc, #852]	; (8002f2c <__aeabi_dsub+0x6e8>)
 8002bd8:	1ab6      	subs	r6, r6, r2
 8002bda:	400b      	ands	r3, r1
 8002bdc:	4698      	mov	r8, r3
 8002bde:	e6b5      	b.n	800294c <__aeabi_dsub+0x108>
 8002be0:	0020      	movs	r0, r4
 8002be2:	f000 fb3b 	bl	800325c <__clzsi2>
 8002be6:	0002      	movs	r2, r0
 8002be8:	3218      	adds	r2, #24
 8002bea:	2a1f      	cmp	r2, #31
 8002bec:	dc00      	bgt.n	8002bf0 <__aeabi_dsub+0x3ac>
 8002bee:	e68f      	b.n	8002910 <__aeabi_dsub+0xcc>
 8002bf0:	0023      	movs	r3, r4
 8002bf2:	3808      	subs	r0, #8
 8002bf4:	4083      	lsls	r3, r0
 8002bf6:	2400      	movs	r4, #0
 8002bf8:	e692      	b.n	8002920 <__aeabi_dsub+0xdc>
 8002bfa:	4308      	orrs	r0, r1
 8002bfc:	0002      	movs	r2, r0
 8002bfe:	1e50      	subs	r0, r2, #1
 8002c00:	4182      	sbcs	r2, r0
 8002c02:	e66d      	b.n	80028e0 <__aeabi_dsub+0x9c>
 8002c04:	4cca      	ldr	r4, [pc, #808]	; (8002f30 <__aeabi_dsub+0x6ec>)
 8002c06:	1c72      	adds	r2, r6, #1
 8002c08:	4222      	tst	r2, r4
 8002c0a:	d000      	beq.n	8002c0e <__aeabi_dsub+0x3ca>
 8002c0c:	e0ad      	b.n	8002d6a <__aeabi_dsub+0x526>
 8002c0e:	464a      	mov	r2, r9
 8002c10:	431a      	orrs	r2, r3
 8002c12:	2e00      	cmp	r6, #0
 8002c14:	d1b8      	bne.n	8002b88 <__aeabi_dsub+0x344>
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	d100      	bne.n	8002c1c <__aeabi_dsub+0x3d8>
 8002c1a:	e158      	b.n	8002ece <__aeabi_dsub+0x68a>
 8002c1c:	000a      	movs	r2, r1
 8002c1e:	4302      	orrs	r2, r0
 8002c20:	d000      	beq.n	8002c24 <__aeabi_dsub+0x3e0>
 8002c22:	e159      	b.n	8002ed8 <__aeabi_dsub+0x694>
 8002c24:	464a      	mov	r2, r9
 8002c26:	0759      	lsls	r1, r3, #29
 8002c28:	08d2      	lsrs	r2, r2, #3
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	e786      	b.n	8002b3e <__aeabi_dsub+0x2fa>
 8002c30:	464a      	mov	r2, r9
 8002c32:	0759      	lsls	r1, r3, #29
 8002c34:	08d2      	lsrs	r2, r2, #3
 8002c36:	430a      	orrs	r2, r1
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	e7c1      	b.n	8002bc0 <__aeabi_dsub+0x37c>
 8002c3c:	4dba      	ldr	r5, [pc, #744]	; (8002f28 <__aeabi_dsub+0x6e4>)
 8002c3e:	42aa      	cmp	r2, r5
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x400>
 8002c42:	e11e      	b.n	8002e82 <__aeabi_dsub+0x63e>
 8002c44:	2580      	movs	r5, #128	; 0x80
 8002c46:	042d      	lsls	r5, r5, #16
 8002c48:	432b      	orrs	r3, r5
 8002c4a:	4664      	mov	r4, ip
 8002c4c:	2c38      	cmp	r4, #56	; 0x38
 8002c4e:	dc5d      	bgt.n	8002d0c <__aeabi_dsub+0x4c8>
 8002c50:	2c1f      	cmp	r4, #31
 8002c52:	dd00      	ble.n	8002c56 <__aeabi_dsub+0x412>
 8002c54:	e0d0      	b.n	8002df8 <__aeabi_dsub+0x5b4>
 8002c56:	2520      	movs	r5, #32
 8002c58:	4667      	mov	r7, ip
 8002c5a:	1b2d      	subs	r5, r5, r4
 8002c5c:	464e      	mov	r6, r9
 8002c5e:	001c      	movs	r4, r3
 8002c60:	40fe      	lsrs	r6, r7
 8002c62:	40ac      	lsls	r4, r5
 8002c64:	4334      	orrs	r4, r6
 8002c66:	464e      	mov	r6, r9
 8002c68:	40ae      	lsls	r6, r5
 8002c6a:	0035      	movs	r5, r6
 8002c6c:	40fb      	lsrs	r3, r7
 8002c6e:	1e6e      	subs	r6, r5, #1
 8002c70:	41b5      	sbcs	r5, r6
 8002c72:	1ac9      	subs	r1, r1, r3
 8002c74:	432c      	orrs	r4, r5
 8002c76:	e04e      	b.n	8002d16 <__aeabi_dsub+0x4d2>
 8002c78:	464a      	mov	r2, r9
 8002c7a:	1a14      	subs	r4, r2, r0
 8002c7c:	45a1      	cmp	r9, r4
 8002c7e:	4192      	sbcs	r2, r2
 8002c80:	4252      	negs	r2, r2
 8002c82:	4690      	mov	r8, r2
 8002c84:	1a5f      	subs	r7, r3, r1
 8002c86:	003a      	movs	r2, r7
 8002c88:	4647      	mov	r7, r8
 8002c8a:	1bd2      	subs	r2, r2, r7
 8002c8c:	4690      	mov	r8, r2
 8002c8e:	0212      	lsls	r2, r2, #8
 8002c90:	d500      	bpl.n	8002c94 <__aeabi_dsub+0x450>
 8002c92:	e08b      	b.n	8002dac <__aeabi_dsub+0x568>
 8002c94:	4642      	mov	r2, r8
 8002c96:	4322      	orrs	r2, r4
 8002c98:	d000      	beq.n	8002c9c <__aeabi_dsub+0x458>
 8002c9a:	e630      	b.n	80028fe <__aeabi_dsub+0xba>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2500      	movs	r5, #0
 8002ca0:	e74d      	b.n	8002b3e <__aeabi_dsub+0x2fa>
 8002ca2:	464a      	mov	r2, r9
 8002ca4:	0759      	lsls	r1, r3, #29
 8002ca6:	08d2      	lsrs	r2, r2, #3
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	e744      	b.n	8002b38 <__aeabi_dsub+0x2f4>
 8002cae:	4642      	mov	r2, r8
 8002cb0:	4b9e      	ldr	r3, [pc, #632]	; (8002f2c <__aeabi_dsub+0x6e8>)
 8002cb2:	0861      	lsrs	r1, r4, #1
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	0013      	movs	r3, r2
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4014      	ands	r4, r2
 8002cbc:	430c      	orrs	r4, r1
 8002cbe:	07da      	lsls	r2, r3, #31
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	4698      	mov	r8, r3
 8002cc4:	4314      	orrs	r4, r2
 8002cc6:	e641      	b.n	800294c <__aeabi_dsub+0x108>
 8002cc8:	001a      	movs	r2, r3
 8002cca:	3e1f      	subs	r6, #31
 8002ccc:	40f2      	lsrs	r2, r6
 8002cce:	0016      	movs	r6, r2
 8002cd0:	2920      	cmp	r1, #32
 8002cd2:	d003      	beq.n	8002cdc <__aeabi_dsub+0x498>
 8002cd4:	2240      	movs	r2, #64	; 0x40
 8002cd6:	1a51      	subs	r1, r2, r1
 8002cd8:	408b      	lsls	r3, r1
 8002cda:	431c      	orrs	r4, r3
 8002cdc:	1e62      	subs	r2, r4, #1
 8002cde:	4194      	sbcs	r4, r2
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	4334      	orrs	r4, r6
 8002ce4:	4698      	mov	r8, r3
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	e71d      	b.n	8002b26 <__aeabi_dsub+0x2e2>
 8002cea:	000c      	movs	r4, r1
 8002cec:	3a20      	subs	r2, #32
 8002cee:	40d4      	lsrs	r4, r2
 8002cf0:	0022      	movs	r2, r4
 8002cf2:	4664      	mov	r4, ip
 8002cf4:	2c20      	cmp	r4, #32
 8002cf6:	d004      	beq.n	8002d02 <__aeabi_dsub+0x4be>
 8002cf8:	2740      	movs	r7, #64	; 0x40
 8002cfa:	1b3f      	subs	r7, r7, r4
 8002cfc:	40b9      	lsls	r1, r7
 8002cfe:	4308      	orrs	r0, r1
 8002d00:	4680      	mov	r8, r0
 8002d02:	4644      	mov	r4, r8
 8002d04:	1e61      	subs	r1, r4, #1
 8002d06:	418c      	sbcs	r4, r1
 8002d08:	4322      	orrs	r2, r4
 8002d0a:	e5e9      	b.n	80028e0 <__aeabi_dsub+0x9c>
 8002d0c:	464c      	mov	r4, r9
 8002d0e:	4323      	orrs	r3, r4
 8002d10:	001c      	movs	r4, r3
 8002d12:	1e63      	subs	r3, r4, #1
 8002d14:	419c      	sbcs	r4, r3
 8002d16:	1b04      	subs	r4, r0, r4
 8002d18:	42a0      	cmp	r0, r4
 8002d1a:	419b      	sbcs	r3, r3
 8002d1c:	425b      	negs	r3, r3
 8002d1e:	1acb      	subs	r3, r1, r3
 8002d20:	4698      	mov	r8, r3
 8002d22:	465d      	mov	r5, fp
 8002d24:	0016      	movs	r6, r2
 8002d26:	e5e2      	b.n	80028ee <__aeabi_dsub+0xaa>
 8002d28:	464e      	mov	r6, r9
 8002d2a:	431e      	orrs	r6, r3
 8002d2c:	d100      	bne.n	8002d30 <__aeabi_dsub+0x4ec>
 8002d2e:	e0ae      	b.n	8002e8e <__aeabi_dsub+0x64a>
 8002d30:	1e66      	subs	r6, r4, #1
 8002d32:	2c01      	cmp	r4, #1
 8002d34:	d100      	bne.n	8002d38 <__aeabi_dsub+0x4f4>
 8002d36:	e0fd      	b.n	8002f34 <__aeabi_dsub+0x6f0>
 8002d38:	4f7b      	ldr	r7, [pc, #492]	; (8002f28 <__aeabi_dsub+0x6e4>)
 8002d3a:	42bc      	cmp	r4, r7
 8002d3c:	d100      	bne.n	8002d40 <__aeabi_dsub+0x4fc>
 8002d3e:	e107      	b.n	8002f50 <__aeabi_dsub+0x70c>
 8002d40:	46b4      	mov	ip, r6
 8002d42:	e69b      	b.n	8002a7c <__aeabi_dsub+0x238>
 8002d44:	4664      	mov	r4, ip
 8002d46:	2220      	movs	r2, #32
 8002d48:	1b12      	subs	r2, r2, r4
 8002d4a:	000c      	movs	r4, r1
 8002d4c:	4094      	lsls	r4, r2
 8002d4e:	0007      	movs	r7, r0
 8002d50:	4090      	lsls	r0, r2
 8002d52:	46a0      	mov	r8, r4
 8002d54:	4664      	mov	r4, ip
 8002d56:	1e42      	subs	r2, r0, #1
 8002d58:	4190      	sbcs	r0, r2
 8002d5a:	4662      	mov	r2, ip
 8002d5c:	40e7      	lsrs	r7, r4
 8002d5e:	4644      	mov	r4, r8
 8002d60:	40d1      	lsrs	r1, r2
 8002d62:	433c      	orrs	r4, r7
 8002d64:	4304      	orrs	r4, r0
 8002d66:	185b      	adds	r3, r3, r1
 8002d68:	e6f3      	b.n	8002b52 <__aeabi_dsub+0x30e>
 8002d6a:	4c6f      	ldr	r4, [pc, #444]	; (8002f28 <__aeabi_dsub+0x6e4>)
 8002d6c:	42a2      	cmp	r2, r4
 8002d6e:	d100      	bne.n	8002d72 <__aeabi_dsub+0x52e>
 8002d70:	e0d5      	b.n	8002f1e <__aeabi_dsub+0x6da>
 8002d72:	4448      	add	r0, r9
 8002d74:	185b      	adds	r3, r3, r1
 8002d76:	4548      	cmp	r0, r9
 8002d78:	4189      	sbcs	r1, r1
 8002d7a:	4249      	negs	r1, r1
 8002d7c:	185b      	adds	r3, r3, r1
 8002d7e:	07dc      	lsls	r4, r3, #31
 8002d80:	0840      	lsrs	r0, r0, #1
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	4698      	mov	r8, r3
 8002d86:	0016      	movs	r6, r2
 8002d88:	4304      	orrs	r4, r0
 8002d8a:	e6cc      	b.n	8002b26 <__aeabi_dsub+0x2e2>
 8002d8c:	2a00      	cmp	r2, #0
 8002d8e:	d000      	beq.n	8002d92 <__aeabi_dsub+0x54e>
 8002d90:	e082      	b.n	8002e98 <__aeabi_dsub+0x654>
 8002d92:	000a      	movs	r2, r1
 8002d94:	4302      	orrs	r2, r0
 8002d96:	d140      	bne.n	8002e1a <__aeabi_dsub+0x5d6>
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	031b      	lsls	r3, r3, #12
 8002d9e:	e713      	b.n	8002bc8 <__aeabi_dsub+0x384>
 8002da0:	074b      	lsls	r3, r1, #29
 8002da2:	08c2      	lsrs	r2, r0, #3
 8002da4:	431a      	orrs	r2, r3
 8002da6:	465d      	mov	r5, fp
 8002da8:	08cb      	lsrs	r3, r1, #3
 8002daa:	e6c5      	b.n	8002b38 <__aeabi_dsub+0x2f4>
 8002dac:	464a      	mov	r2, r9
 8002dae:	1a84      	subs	r4, r0, r2
 8002db0:	42a0      	cmp	r0, r4
 8002db2:	4192      	sbcs	r2, r2
 8002db4:	1acb      	subs	r3, r1, r3
 8002db6:	4252      	negs	r2, r2
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	4698      	mov	r8, r3
 8002dbc:	465d      	mov	r5, fp
 8002dbe:	e59e      	b.n	80028fe <__aeabi_dsub+0xba>
 8002dc0:	464a      	mov	r2, r9
 8002dc2:	0759      	lsls	r1, r3, #29
 8002dc4:	08d2      	lsrs	r2, r2, #3
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	e6f9      	b.n	8002bc0 <__aeabi_dsub+0x37c>
 8002dcc:	464a      	mov	r2, r9
 8002dce:	1a14      	subs	r4, r2, r0
 8002dd0:	45a1      	cmp	r9, r4
 8002dd2:	4192      	sbcs	r2, r2
 8002dd4:	1a5b      	subs	r3, r3, r1
 8002dd6:	4252      	negs	r2, r2
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	4698      	mov	r8, r3
 8002ddc:	2601      	movs	r6, #1
 8002dde:	e586      	b.n	80028ee <__aeabi_dsub+0xaa>
 8002de0:	464a      	mov	r2, r9
 8002de2:	0759      	lsls	r1, r3, #29
 8002de4:	08d2      	lsrs	r2, r2, #3
 8002de6:	430a      	orrs	r2, r1
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	e6a5      	b.n	8002b38 <__aeabi_dsub+0x2f4>
 8002dec:	464c      	mov	r4, r9
 8002dee:	4323      	orrs	r3, r4
 8002df0:	001c      	movs	r4, r3
 8002df2:	1e63      	subs	r3, r4, #1
 8002df4:	419c      	sbcs	r4, r3
 8002df6:	e65b      	b.n	8002ab0 <__aeabi_dsub+0x26c>
 8002df8:	4665      	mov	r5, ip
 8002dfa:	001e      	movs	r6, r3
 8002dfc:	3d20      	subs	r5, #32
 8002dfe:	40ee      	lsrs	r6, r5
 8002e00:	2c20      	cmp	r4, #32
 8002e02:	d005      	beq.n	8002e10 <__aeabi_dsub+0x5cc>
 8002e04:	2540      	movs	r5, #64	; 0x40
 8002e06:	1b2d      	subs	r5, r5, r4
 8002e08:	40ab      	lsls	r3, r5
 8002e0a:	464c      	mov	r4, r9
 8002e0c:	431c      	orrs	r4, r3
 8002e0e:	46a2      	mov	sl, r4
 8002e10:	4654      	mov	r4, sl
 8002e12:	1e63      	subs	r3, r4, #1
 8002e14:	419c      	sbcs	r4, r3
 8002e16:	4334      	orrs	r4, r6
 8002e18:	e77d      	b.n	8002d16 <__aeabi_dsub+0x4d2>
 8002e1a:	074b      	lsls	r3, r1, #29
 8002e1c:	08c2      	lsrs	r2, r0, #3
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	465d      	mov	r5, fp
 8002e22:	08cb      	lsrs	r3, r1, #3
 8002e24:	e6cc      	b.n	8002bc0 <__aeabi_dsub+0x37c>
 8002e26:	000a      	movs	r2, r1
 8002e28:	4302      	orrs	r2, r0
 8002e2a:	d100      	bne.n	8002e2e <__aeabi_dsub+0x5ea>
 8002e2c:	e736      	b.n	8002c9c <__aeabi_dsub+0x458>
 8002e2e:	074b      	lsls	r3, r1, #29
 8002e30:	08c2      	lsrs	r2, r0, #3
 8002e32:	431a      	orrs	r2, r3
 8002e34:	465d      	mov	r5, fp
 8002e36:	08cb      	lsrs	r3, r1, #3
 8002e38:	e681      	b.n	8002b3e <__aeabi_dsub+0x2fa>
 8002e3a:	464a      	mov	r2, r9
 8002e3c:	1a84      	subs	r4, r0, r2
 8002e3e:	42a0      	cmp	r0, r4
 8002e40:	4192      	sbcs	r2, r2
 8002e42:	1acb      	subs	r3, r1, r3
 8002e44:	4252      	negs	r2, r2
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	4698      	mov	r8, r3
 8002e4a:	465d      	mov	r5, fp
 8002e4c:	2601      	movs	r6, #1
 8002e4e:	e54e      	b.n	80028ee <__aeabi_dsub+0xaa>
 8002e50:	074b      	lsls	r3, r1, #29
 8002e52:	08c2      	lsrs	r2, r0, #3
 8002e54:	431a      	orrs	r2, r3
 8002e56:	08cb      	lsrs	r3, r1, #3
 8002e58:	e6b2      	b.n	8002bc0 <__aeabi_dsub+0x37c>
 8002e5a:	464a      	mov	r2, r9
 8002e5c:	1a14      	subs	r4, r2, r0
 8002e5e:	45a1      	cmp	r9, r4
 8002e60:	4192      	sbcs	r2, r2
 8002e62:	1a5f      	subs	r7, r3, r1
 8002e64:	4252      	negs	r2, r2
 8002e66:	1aba      	subs	r2, r7, r2
 8002e68:	4690      	mov	r8, r2
 8002e6a:	0212      	lsls	r2, r2, #8
 8002e6c:	d56b      	bpl.n	8002f46 <__aeabi_dsub+0x702>
 8002e6e:	464a      	mov	r2, r9
 8002e70:	1a84      	subs	r4, r0, r2
 8002e72:	42a0      	cmp	r0, r4
 8002e74:	4192      	sbcs	r2, r2
 8002e76:	1acb      	subs	r3, r1, r3
 8002e78:	4252      	negs	r2, r2
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	4698      	mov	r8, r3
 8002e7e:	465d      	mov	r5, fp
 8002e80:	e564      	b.n	800294c <__aeabi_dsub+0x108>
 8002e82:	074b      	lsls	r3, r1, #29
 8002e84:	08c2      	lsrs	r2, r0, #3
 8002e86:	431a      	orrs	r2, r3
 8002e88:	465d      	mov	r5, fp
 8002e8a:	08cb      	lsrs	r3, r1, #3
 8002e8c:	e698      	b.n	8002bc0 <__aeabi_dsub+0x37c>
 8002e8e:	074b      	lsls	r3, r1, #29
 8002e90:	08c2      	lsrs	r2, r0, #3
 8002e92:	431a      	orrs	r2, r3
 8002e94:	08cb      	lsrs	r3, r1, #3
 8002e96:	e64f      	b.n	8002b38 <__aeabi_dsub+0x2f4>
 8002e98:	000a      	movs	r2, r1
 8002e9a:	4302      	orrs	r2, r0
 8002e9c:	d090      	beq.n	8002dc0 <__aeabi_dsub+0x57c>
 8002e9e:	464a      	mov	r2, r9
 8002ea0:	075c      	lsls	r4, r3, #29
 8002ea2:	08d2      	lsrs	r2, r2, #3
 8002ea4:	4314      	orrs	r4, r2
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	0312      	lsls	r2, r2, #12
 8002eac:	4213      	tst	r3, r2
 8002eae:	d008      	beq.n	8002ec2 <__aeabi_dsub+0x67e>
 8002eb0:	08ce      	lsrs	r6, r1, #3
 8002eb2:	4216      	tst	r6, r2
 8002eb4:	d105      	bne.n	8002ec2 <__aeabi_dsub+0x67e>
 8002eb6:	08c0      	lsrs	r0, r0, #3
 8002eb8:	0749      	lsls	r1, r1, #29
 8002eba:	4308      	orrs	r0, r1
 8002ebc:	0004      	movs	r4, r0
 8002ebe:	465d      	mov	r5, fp
 8002ec0:	0033      	movs	r3, r6
 8002ec2:	0f61      	lsrs	r1, r4, #29
 8002ec4:	00e2      	lsls	r2, r4, #3
 8002ec6:	0749      	lsls	r1, r1, #29
 8002ec8:	08d2      	lsrs	r2, r2, #3
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	e678      	b.n	8002bc0 <__aeabi_dsub+0x37c>
 8002ece:	074b      	lsls	r3, r1, #29
 8002ed0:	08c2      	lsrs	r2, r0, #3
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	08cb      	lsrs	r3, r1, #3
 8002ed6:	e632      	b.n	8002b3e <__aeabi_dsub+0x2fa>
 8002ed8:	4448      	add	r0, r9
 8002eda:	185b      	adds	r3, r3, r1
 8002edc:	4548      	cmp	r0, r9
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4698      	mov	r8, r3
 8002ee2:	4252      	negs	r2, r2
 8002ee4:	4490      	add	r8, r2
 8002ee6:	4643      	mov	r3, r8
 8002ee8:	0004      	movs	r4, r0
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	d400      	bmi.n	8002ef0 <__aeabi_dsub+0x6ac>
 8002eee:	e61a      	b.n	8002b26 <__aeabi_dsub+0x2e2>
 8002ef0:	4642      	mov	r2, r8
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <__aeabi_dsub+0x6e8>)
 8002ef4:	2601      	movs	r6, #1
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	4690      	mov	r8, r2
 8002efa:	e614      	b.n	8002b26 <__aeabi_dsub+0x2e2>
 8002efc:	4666      	mov	r6, ip
 8002efe:	001f      	movs	r7, r3
 8002f00:	3e20      	subs	r6, #32
 8002f02:	40f7      	lsrs	r7, r6
 8002f04:	2c20      	cmp	r4, #32
 8002f06:	d005      	beq.n	8002f14 <__aeabi_dsub+0x6d0>
 8002f08:	2640      	movs	r6, #64	; 0x40
 8002f0a:	1b36      	subs	r6, r6, r4
 8002f0c:	40b3      	lsls	r3, r6
 8002f0e:	464c      	mov	r4, r9
 8002f10:	431c      	orrs	r4, r3
 8002f12:	46a2      	mov	sl, r4
 8002f14:	4654      	mov	r4, sl
 8002f16:	1e63      	subs	r3, r4, #1
 8002f18:	419c      	sbcs	r4, r3
 8002f1a:	433c      	orrs	r4, r7
 8002f1c:	e5c8      	b.n	8002ab0 <__aeabi_dsub+0x26c>
 8002f1e:	0011      	movs	r1, r2
 8002f20:	2300      	movs	r3, #0
 8002f22:	2200      	movs	r2, #0
 8002f24:	e532      	b.n	800298c <__aeabi_dsub+0x148>
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	000007ff 	.word	0x000007ff
 8002f2c:	ff7fffff 	.word	0xff7fffff
 8002f30:	000007fe 	.word	0x000007fe
 8002f34:	464a      	mov	r2, r9
 8002f36:	1814      	adds	r4, r2, r0
 8002f38:	4284      	cmp	r4, r0
 8002f3a:	4192      	sbcs	r2, r2
 8002f3c:	185b      	adds	r3, r3, r1
 8002f3e:	4698      	mov	r8, r3
 8002f40:	4252      	negs	r2, r2
 8002f42:	4490      	add	r8, r2
 8002f44:	e5e9      	b.n	8002b1a <__aeabi_dsub+0x2d6>
 8002f46:	4642      	mov	r2, r8
 8002f48:	4322      	orrs	r2, r4
 8002f4a:	d100      	bne.n	8002f4e <__aeabi_dsub+0x70a>
 8002f4c:	e6a6      	b.n	8002c9c <__aeabi_dsub+0x458>
 8002f4e:	e5ea      	b.n	8002b26 <__aeabi_dsub+0x2e2>
 8002f50:	074b      	lsls	r3, r1, #29
 8002f52:	08c2      	lsrs	r2, r0, #3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	08cb      	lsrs	r3, r1, #3
 8002f58:	e632      	b.n	8002bc0 <__aeabi_dsub+0x37c>
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4901      	ldr	r1, [pc, #4]	; (8002f64 <__aeabi_dsub+0x720>)
 8002f5e:	0013      	movs	r3, r2
 8002f60:	e514      	b.n	800298c <__aeabi_dsub+0x148>
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	000007ff 	.word	0x000007ff

08002f68 <__aeabi_dcmpun>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	0005      	movs	r5, r0
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <__aeabi_dcmpun+0x38>)
 8002f6e:	030c      	lsls	r4, r1, #12
 8002f70:	0016      	movs	r6, r2
 8002f72:	0049      	lsls	r1, r1, #1
 8002f74:	031a      	lsls	r2, r3, #12
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	0b24      	lsrs	r4, r4, #12
 8002f7a:	0d49      	lsrs	r1, r1, #21
 8002f7c:	0b12      	lsrs	r2, r2, #12
 8002f7e:	0d5b      	lsrs	r3, r3, #21
 8002f80:	4281      	cmp	r1, r0
 8002f82:	d008      	beq.n	8002f96 <__aeabi_dcmpun+0x2e>
 8002f84:	4906      	ldr	r1, [pc, #24]	; (8002fa0 <__aeabi_dcmpun+0x38>)
 8002f86:	2000      	movs	r0, #0
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	d103      	bne.n	8002f94 <__aeabi_dcmpun+0x2c>
 8002f8c:	4332      	orrs	r2, r6
 8002f8e:	0010      	movs	r0, r2
 8002f90:	1e42      	subs	r2, r0, #1
 8002f92:	4190      	sbcs	r0, r2
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	2001      	movs	r0, #1
 8002f98:	432c      	orrs	r4, r5
 8002f9a:	d1fb      	bne.n	8002f94 <__aeabi_dcmpun+0x2c>
 8002f9c:	e7f2      	b.n	8002f84 <__aeabi_dcmpun+0x1c>
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	000007ff 	.word	0x000007ff

08002fa4 <__aeabi_d2iz>:
 8002fa4:	000a      	movs	r2, r1
 8002fa6:	b530      	push	{r4, r5, lr}
 8002fa8:	4c13      	ldr	r4, [pc, #76]	; (8002ff8 <__aeabi_d2iz+0x54>)
 8002faa:	0053      	lsls	r3, r2, #1
 8002fac:	0309      	lsls	r1, r1, #12
 8002fae:	0005      	movs	r5, r0
 8002fb0:	0b09      	lsrs	r1, r1, #12
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	0d5b      	lsrs	r3, r3, #21
 8002fb6:	0fd2      	lsrs	r2, r2, #31
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	dd04      	ble.n	8002fc6 <__aeabi_d2iz+0x22>
 8002fbc:	480f      	ldr	r0, [pc, #60]	; (8002ffc <__aeabi_d2iz+0x58>)
 8002fbe:	4283      	cmp	r3, r0
 8002fc0:	dd02      	ble.n	8002fc8 <__aeabi_d2iz+0x24>
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <__aeabi_d2iz+0x5c>)
 8002fc4:	18d0      	adds	r0, r2, r3
 8002fc6:	bd30      	pop	{r4, r5, pc}
 8002fc8:	2080      	movs	r0, #128	; 0x80
 8002fca:	0340      	lsls	r0, r0, #13
 8002fcc:	4301      	orrs	r1, r0
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <__aeabi_d2iz+0x60>)
 8002fd0:	1ac0      	subs	r0, r0, r3
 8002fd2:	281f      	cmp	r0, #31
 8002fd4:	dd08      	ble.n	8002fe8 <__aeabi_d2iz+0x44>
 8002fd6:	480c      	ldr	r0, [pc, #48]	; (8003008 <__aeabi_d2iz+0x64>)
 8002fd8:	1ac3      	subs	r3, r0, r3
 8002fda:	40d9      	lsrs	r1, r3
 8002fdc:	000b      	movs	r3, r1
 8002fde:	4258      	negs	r0, r3
 8002fe0:	2a00      	cmp	r2, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <__aeabi_d2iz+0x22>
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	e7ee      	b.n	8002fc6 <__aeabi_d2iz+0x22>
 8002fe8:	4c08      	ldr	r4, [pc, #32]	; (800300c <__aeabi_d2iz+0x68>)
 8002fea:	40c5      	lsrs	r5, r0
 8002fec:	46a4      	mov	ip, r4
 8002fee:	4463      	add	r3, ip
 8002ff0:	4099      	lsls	r1, r3
 8002ff2:	000b      	movs	r3, r1
 8002ff4:	432b      	orrs	r3, r5
 8002ff6:	e7f2      	b.n	8002fde <__aeabi_d2iz+0x3a>
 8002ff8:	000003fe 	.word	0x000003fe
 8002ffc:	0000041d 	.word	0x0000041d
 8003000:	7fffffff 	.word	0x7fffffff
 8003004:	00000433 	.word	0x00000433
 8003008:	00000413 	.word	0x00000413
 800300c:	fffffbed 	.word	0xfffffbed

08003010 <__aeabi_i2d>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	2800      	cmp	r0, #0
 8003014:	d016      	beq.n	8003044 <__aeabi_i2d+0x34>
 8003016:	17c3      	asrs	r3, r0, #31
 8003018:	18c5      	adds	r5, r0, r3
 800301a:	405d      	eors	r5, r3
 800301c:	0fc4      	lsrs	r4, r0, #31
 800301e:	0028      	movs	r0, r5
 8003020:	f000 f91c 	bl	800325c <__clzsi2>
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <__aeabi_i2d+0x5c>)
 8003026:	1a12      	subs	r2, r2, r0
 8003028:	280a      	cmp	r0, #10
 800302a:	dc16      	bgt.n	800305a <__aeabi_i2d+0x4a>
 800302c:	0003      	movs	r3, r0
 800302e:	002e      	movs	r6, r5
 8003030:	3315      	adds	r3, #21
 8003032:	409e      	lsls	r6, r3
 8003034:	230b      	movs	r3, #11
 8003036:	1a18      	subs	r0, r3, r0
 8003038:	40c5      	lsrs	r5, r0
 800303a:	0553      	lsls	r3, r2, #21
 800303c:	032d      	lsls	r5, r5, #12
 800303e:	0b2d      	lsrs	r5, r5, #12
 8003040:	0d5b      	lsrs	r3, r3, #21
 8003042:	e003      	b.n	800304c <__aeabi_i2d+0x3c>
 8003044:	2400      	movs	r4, #0
 8003046:	2300      	movs	r3, #0
 8003048:	2500      	movs	r5, #0
 800304a:	2600      	movs	r6, #0
 800304c:	051b      	lsls	r3, r3, #20
 800304e:	432b      	orrs	r3, r5
 8003050:	07e4      	lsls	r4, r4, #31
 8003052:	4323      	orrs	r3, r4
 8003054:	0030      	movs	r0, r6
 8003056:	0019      	movs	r1, r3
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	380b      	subs	r0, #11
 800305c:	4085      	lsls	r5, r0
 800305e:	0553      	lsls	r3, r2, #21
 8003060:	032d      	lsls	r5, r5, #12
 8003062:	2600      	movs	r6, #0
 8003064:	0b2d      	lsrs	r5, r5, #12
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	e7f0      	b.n	800304c <__aeabi_i2d+0x3c>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	0000041e 	.word	0x0000041e

08003070 <__aeabi_ui2d>:
 8003070:	b510      	push	{r4, lr}
 8003072:	1e04      	subs	r4, r0, #0
 8003074:	d010      	beq.n	8003098 <__aeabi_ui2d+0x28>
 8003076:	f000 f8f1 	bl	800325c <__clzsi2>
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <__aeabi_ui2d+0x48>)
 800307c:	1a1b      	subs	r3, r3, r0
 800307e:	280a      	cmp	r0, #10
 8003080:	dc11      	bgt.n	80030a6 <__aeabi_ui2d+0x36>
 8003082:	220b      	movs	r2, #11
 8003084:	0021      	movs	r1, r4
 8003086:	1a12      	subs	r2, r2, r0
 8003088:	40d1      	lsrs	r1, r2
 800308a:	3015      	adds	r0, #21
 800308c:	030a      	lsls	r2, r1, #12
 800308e:	055b      	lsls	r3, r3, #21
 8003090:	4084      	lsls	r4, r0
 8003092:	0b12      	lsrs	r2, r2, #12
 8003094:	0d5b      	lsrs	r3, r3, #21
 8003096:	e001      	b.n	800309c <__aeabi_ui2d+0x2c>
 8003098:	2300      	movs	r3, #0
 800309a:	2200      	movs	r2, #0
 800309c:	051b      	lsls	r3, r3, #20
 800309e:	4313      	orrs	r3, r2
 80030a0:	0020      	movs	r0, r4
 80030a2:	0019      	movs	r1, r3
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	0022      	movs	r2, r4
 80030a8:	380b      	subs	r0, #11
 80030aa:	4082      	lsls	r2, r0
 80030ac:	055b      	lsls	r3, r3, #21
 80030ae:	0312      	lsls	r2, r2, #12
 80030b0:	2400      	movs	r4, #0
 80030b2:	0b12      	lsrs	r2, r2, #12
 80030b4:	0d5b      	lsrs	r3, r3, #21
 80030b6:	e7f1      	b.n	800309c <__aeabi_ui2d+0x2c>
 80030b8:	0000041e 	.word	0x0000041e

080030bc <__aeabi_f2d>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	0043      	lsls	r3, r0, #1
 80030c0:	0246      	lsls	r6, r0, #9
 80030c2:	0fc4      	lsrs	r4, r0, #31
 80030c4:	20fe      	movs	r0, #254	; 0xfe
 80030c6:	0e1b      	lsrs	r3, r3, #24
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	0a75      	lsrs	r5, r6, #9
 80030cc:	4208      	tst	r0, r1
 80030ce:	d00c      	beq.n	80030ea <__aeabi_f2d+0x2e>
 80030d0:	22e0      	movs	r2, #224	; 0xe0
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	4694      	mov	ip, r2
 80030d6:	076d      	lsls	r5, r5, #29
 80030d8:	0b36      	lsrs	r6, r6, #12
 80030da:	4463      	add	r3, ip
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	4333      	orrs	r3, r6
 80030e0:	07e4      	lsls	r4, r4, #31
 80030e2:	4323      	orrs	r3, r4
 80030e4:	0028      	movs	r0, r5
 80030e6:	0019      	movs	r1, r3
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d114      	bne.n	8003118 <__aeabi_f2d+0x5c>
 80030ee:	2d00      	cmp	r5, #0
 80030f0:	d01b      	beq.n	800312a <__aeabi_f2d+0x6e>
 80030f2:	0028      	movs	r0, r5
 80030f4:	f000 f8b2 	bl	800325c <__clzsi2>
 80030f8:	280a      	cmp	r0, #10
 80030fa:	dc1c      	bgt.n	8003136 <__aeabi_f2d+0x7a>
 80030fc:	230b      	movs	r3, #11
 80030fe:	002a      	movs	r2, r5
 8003100:	1a1b      	subs	r3, r3, r0
 8003102:	40da      	lsrs	r2, r3
 8003104:	0003      	movs	r3, r0
 8003106:	3315      	adds	r3, #21
 8003108:	409d      	lsls	r5, r3
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <__aeabi_f2d+0x88>)
 800310c:	0312      	lsls	r2, r2, #12
 800310e:	1a1b      	subs	r3, r3, r0
 8003110:	055b      	lsls	r3, r3, #21
 8003112:	0b16      	lsrs	r6, r2, #12
 8003114:	0d5b      	lsrs	r3, r3, #21
 8003116:	e7e1      	b.n	80030dc <__aeabi_f2d+0x20>
 8003118:	2d00      	cmp	r5, #0
 800311a:	d009      	beq.n	8003130 <__aeabi_f2d+0x74>
 800311c:	0b32      	lsrs	r2, r6, #12
 800311e:	2680      	movs	r6, #128	; 0x80
 8003120:	0336      	lsls	r6, r6, #12
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <__aeabi_f2d+0x8c>)
 8003124:	076d      	lsls	r5, r5, #29
 8003126:	4316      	orrs	r6, r2
 8003128:	e7d8      	b.n	80030dc <__aeabi_f2d+0x20>
 800312a:	2300      	movs	r3, #0
 800312c:	2600      	movs	r6, #0
 800312e:	e7d5      	b.n	80030dc <__aeabi_f2d+0x20>
 8003130:	2600      	movs	r6, #0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <__aeabi_f2d+0x8c>)
 8003134:	e7d2      	b.n	80030dc <__aeabi_f2d+0x20>
 8003136:	0003      	movs	r3, r0
 8003138:	002a      	movs	r2, r5
 800313a:	3b0b      	subs	r3, #11
 800313c:	409a      	lsls	r2, r3
 800313e:	2500      	movs	r5, #0
 8003140:	e7e3      	b.n	800310a <__aeabi_f2d+0x4e>
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	00000389 	.word	0x00000389
 8003148:	000007ff 	.word	0x000007ff

0800314c <__aeabi_d2f>:
 800314c:	0002      	movs	r2, r0
 800314e:	004b      	lsls	r3, r1, #1
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	0308      	lsls	r0, r1, #12
 8003154:	0d5b      	lsrs	r3, r3, #21
 8003156:	4e3d      	ldr	r6, [pc, #244]	; (800324c <__aeabi_d2f+0x100>)
 8003158:	0fcc      	lsrs	r4, r1, #31
 800315a:	0a40      	lsrs	r0, r0, #9
 800315c:	0f51      	lsrs	r1, r2, #29
 800315e:	1c5f      	adds	r7, r3, #1
 8003160:	4308      	orrs	r0, r1
 8003162:	00d5      	lsls	r5, r2, #3
 8003164:	4237      	tst	r7, r6
 8003166:	d00a      	beq.n	800317e <__aeabi_d2f+0x32>
 8003168:	4939      	ldr	r1, [pc, #228]	; (8003250 <__aeabi_d2f+0x104>)
 800316a:	185e      	adds	r6, r3, r1
 800316c:	2efe      	cmp	r6, #254	; 0xfe
 800316e:	dd16      	ble.n	800319e <__aeabi_d2f+0x52>
 8003170:	23ff      	movs	r3, #255	; 0xff
 8003172:	2100      	movs	r1, #0
 8003174:	05db      	lsls	r3, r3, #23
 8003176:	430b      	orrs	r3, r1
 8003178:	07e0      	lsls	r0, r4, #31
 800317a:	4318      	orrs	r0, r3
 800317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <__aeabi_d2f+0x44>
 8003182:	4328      	orrs	r0, r5
 8003184:	d027      	beq.n	80031d6 <__aeabi_d2f+0x8a>
 8003186:	2105      	movs	r1, #5
 8003188:	0189      	lsls	r1, r1, #6
 800318a:	0a49      	lsrs	r1, r1, #9
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e7f1      	b.n	8003174 <__aeabi_d2f+0x28>
 8003190:	4305      	orrs	r5, r0
 8003192:	d0ed      	beq.n	8003170 <__aeabi_d2f+0x24>
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	03c9      	lsls	r1, r1, #15
 8003198:	23ff      	movs	r3, #255	; 0xff
 800319a:	4301      	orrs	r1, r0
 800319c:	e7ea      	b.n	8003174 <__aeabi_d2f+0x28>
 800319e:	2e00      	cmp	r6, #0
 80031a0:	dd1c      	ble.n	80031dc <__aeabi_d2f+0x90>
 80031a2:	0192      	lsls	r2, r2, #6
 80031a4:	0011      	movs	r1, r2
 80031a6:	1e4a      	subs	r2, r1, #1
 80031a8:	4191      	sbcs	r1, r2
 80031aa:	00c0      	lsls	r0, r0, #3
 80031ac:	0f6d      	lsrs	r5, r5, #29
 80031ae:	4301      	orrs	r1, r0
 80031b0:	4329      	orrs	r1, r5
 80031b2:	074b      	lsls	r3, r1, #29
 80031b4:	d048      	beq.n	8003248 <__aeabi_d2f+0xfc>
 80031b6:	230f      	movs	r3, #15
 80031b8:	400b      	ands	r3, r1
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d000      	beq.n	80031c0 <__aeabi_d2f+0x74>
 80031be:	3104      	adds	r1, #4
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	04db      	lsls	r3, r3, #19
 80031c4:	400b      	ands	r3, r1
 80031c6:	d03f      	beq.n	8003248 <__aeabi_d2f+0xfc>
 80031c8:	1c72      	adds	r2, r6, #1
 80031ca:	2efe      	cmp	r6, #254	; 0xfe
 80031cc:	d0d0      	beq.n	8003170 <__aeabi_d2f+0x24>
 80031ce:	0189      	lsls	r1, r1, #6
 80031d0:	0a49      	lsrs	r1, r1, #9
 80031d2:	b2d3      	uxtb	r3, r2
 80031d4:	e7ce      	b.n	8003174 <__aeabi_d2f+0x28>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	e7cb      	b.n	8003174 <__aeabi_d2f+0x28>
 80031dc:	0032      	movs	r2, r6
 80031de:	3217      	adds	r2, #23
 80031e0:	db22      	blt.n	8003228 <__aeabi_d2f+0xdc>
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	221e      	movs	r2, #30
 80031e6:	0409      	lsls	r1, r1, #16
 80031e8:	4308      	orrs	r0, r1
 80031ea:	1b92      	subs	r2, r2, r6
 80031ec:	2a1f      	cmp	r2, #31
 80031ee:	dd1d      	ble.n	800322c <__aeabi_d2f+0xe0>
 80031f0:	2102      	movs	r1, #2
 80031f2:	4249      	negs	r1, r1
 80031f4:	1b8e      	subs	r6, r1, r6
 80031f6:	0001      	movs	r1, r0
 80031f8:	40f1      	lsrs	r1, r6
 80031fa:	000e      	movs	r6, r1
 80031fc:	2a20      	cmp	r2, #32
 80031fe:	d004      	beq.n	800320a <__aeabi_d2f+0xbe>
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <__aeabi_d2f+0x108>)
 8003202:	4694      	mov	ip, r2
 8003204:	4463      	add	r3, ip
 8003206:	4098      	lsls	r0, r3
 8003208:	4305      	orrs	r5, r0
 800320a:	0029      	movs	r1, r5
 800320c:	1e4d      	subs	r5, r1, #1
 800320e:	41a9      	sbcs	r1, r5
 8003210:	4331      	orrs	r1, r6
 8003212:	2600      	movs	r6, #0
 8003214:	074b      	lsls	r3, r1, #29
 8003216:	d1ce      	bne.n	80031b6 <__aeabi_d2f+0x6a>
 8003218:	2080      	movs	r0, #128	; 0x80
 800321a:	000b      	movs	r3, r1
 800321c:	04c0      	lsls	r0, r0, #19
 800321e:	2201      	movs	r2, #1
 8003220:	4003      	ands	r3, r0
 8003222:	4201      	tst	r1, r0
 8003224:	d1d3      	bne.n	80031ce <__aeabi_d2f+0x82>
 8003226:	e7af      	b.n	8003188 <__aeabi_d2f+0x3c>
 8003228:	2300      	movs	r3, #0
 800322a:	e7ac      	b.n	8003186 <__aeabi_d2f+0x3a>
 800322c:	490a      	ldr	r1, [pc, #40]	; (8003258 <__aeabi_d2f+0x10c>)
 800322e:	468c      	mov	ip, r1
 8003230:	0029      	movs	r1, r5
 8003232:	4463      	add	r3, ip
 8003234:	40d1      	lsrs	r1, r2
 8003236:	409d      	lsls	r5, r3
 8003238:	000a      	movs	r2, r1
 800323a:	0029      	movs	r1, r5
 800323c:	4098      	lsls	r0, r3
 800323e:	1e4d      	subs	r5, r1, #1
 8003240:	41a9      	sbcs	r1, r5
 8003242:	4301      	orrs	r1, r0
 8003244:	4311      	orrs	r1, r2
 8003246:	e7e4      	b.n	8003212 <__aeabi_d2f+0xc6>
 8003248:	0033      	movs	r3, r6
 800324a:	e79d      	b.n	8003188 <__aeabi_d2f+0x3c>
 800324c:	000007fe 	.word	0x000007fe
 8003250:	fffffc80 	.word	0xfffffc80
 8003254:	fffffca2 	.word	0xfffffca2
 8003258:	fffffc82 	.word	0xfffffc82

0800325c <__clzsi2>:
 800325c:	211c      	movs	r1, #28
 800325e:	2301      	movs	r3, #1
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	4298      	cmp	r0, r3
 8003264:	d301      	bcc.n	800326a <__clzsi2+0xe>
 8003266:	0c00      	lsrs	r0, r0, #16
 8003268:	3910      	subs	r1, #16
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	4298      	cmp	r0, r3
 800326e:	d301      	bcc.n	8003274 <__clzsi2+0x18>
 8003270:	0a00      	lsrs	r0, r0, #8
 8003272:	3908      	subs	r1, #8
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	4298      	cmp	r0, r3
 8003278:	d301      	bcc.n	800327e <__clzsi2+0x22>
 800327a:	0900      	lsrs	r0, r0, #4
 800327c:	3904      	subs	r1, #4
 800327e:	a202      	add	r2, pc, #8	; (adr r2, 8003288 <__clzsi2+0x2c>)
 8003280:	5c10      	ldrb	r0, [r2, r0]
 8003282:	1840      	adds	r0, r0, r1
 8003284:	4770      	bx	lr
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	02020304 	.word	0x02020304
 800328c:	01010101 	.word	0x01010101
	...

08003298 <__clzdi2>:
 8003298:	b510      	push	{r4, lr}
 800329a:	2900      	cmp	r1, #0
 800329c:	d103      	bne.n	80032a6 <__clzdi2+0xe>
 800329e:	f7ff ffdd 	bl	800325c <__clzsi2>
 80032a2:	3020      	adds	r0, #32
 80032a4:	e002      	b.n	80032ac <__clzdi2+0x14>
 80032a6:	1c08      	adds	r0, r1, #0
 80032a8:	f7ff ffd8 	bl	800325c <__clzsi2>
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)

080032b0 <calculate_angle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calculate_angle(float* alpha,float* beta,float x,float y,float z)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  *alpha=(atanf((-x)/(sqrtf(y*y+z*z)))/3.14)*180;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	0612      	lsls	r2, r2, #24
 80032c4:	405a      	eors	r2, r3
 80032c6:	0014      	movs	r4, r2
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f7fd fda0 	bl	8000e10 <__aeabi_fmul>
 80032d0:	1c03      	adds	r3, r0, #0
 80032d2:	1c1d      	adds	r5, r3, #0
 80032d4:	6a39      	ldr	r1, [r7, #32]
 80032d6:	6a38      	ldr	r0, [r7, #32]
 80032d8:	f7fd fd9a 	bl	8000e10 <__aeabi_fmul>
 80032dc:	1c03      	adds	r3, r0, #0
 80032de:	1c19      	adds	r1, r3, #0
 80032e0:	1c28      	adds	r0, r5, #0
 80032e2:	f7fd fa2f 	bl	8000744 <__aeabi_fadd>
 80032e6:	1c03      	adds	r3, r0, #0
 80032e8:	1c18      	adds	r0, r3, #0
 80032ea:	f007 fd6b 	bl	800adc4 <sqrtf>
 80032ee:	1c03      	adds	r3, r0, #0
 80032f0:	1c19      	adds	r1, r3, #0
 80032f2:	1c20      	adds	r0, r4, #0
 80032f4:	f7fd fbc2 	bl	8000a7c <__aeabi_fdiv>
 80032f8:	1c03      	adds	r3, r0, #0
 80032fa:	1c18      	adds	r0, r3, #0
 80032fc:	f007 fc4e 	bl	800ab9c <atanf>
 8003300:	1c03      	adds	r3, r0, #0
 8003302:	1c18      	adds	r0, r3, #0
 8003304:	f7ff feda 	bl	80030bc <__aeabi_f2d>
 8003308:	4a29      	ldr	r2, [pc, #164]	; (80033b0 <calculate_angle+0x100>)
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <calculate_angle+0x104>)
 800330c:	f7fe fc28 	bl	8001b60 <__aeabi_ddiv>
 8003310:	0002      	movs	r2, r0
 8003312:	000b      	movs	r3, r1
 8003314:	0010      	movs	r0, r2
 8003316:	0019      	movs	r1, r3
 8003318:	2200      	movs	r2, #0
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <calculate_angle+0x108>)
 800331c:	f7ff f826 	bl	800236c <__aeabi_dmul>
 8003320:	0002      	movs	r2, r0
 8003322:	000b      	movs	r3, r1
 8003324:	0010      	movs	r0, r2
 8003326:	0019      	movs	r1, r3
 8003328:	f7ff ff10 	bl	800314c <__aeabi_d2f>
 800332c:	1c02      	adds	r2, r0, #0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]
  *beta=(atanf((-y)/(sqrtf(x*x+z*z)))/3.14)*180;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	0612      	lsls	r2, r2, #24
 8003338:	405a      	eors	r2, r3
 800333a:	0014      	movs	r4, r2
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fd66 	bl	8000e10 <__aeabi_fmul>
 8003344:	1c03      	adds	r3, r0, #0
 8003346:	1c1d      	adds	r5, r3, #0
 8003348:	6a39      	ldr	r1, [r7, #32]
 800334a:	6a38      	ldr	r0, [r7, #32]
 800334c:	f7fd fd60 	bl	8000e10 <__aeabi_fmul>
 8003350:	1c03      	adds	r3, r0, #0
 8003352:	1c19      	adds	r1, r3, #0
 8003354:	1c28      	adds	r0, r5, #0
 8003356:	f7fd f9f5 	bl	8000744 <__aeabi_fadd>
 800335a:	1c03      	adds	r3, r0, #0
 800335c:	1c18      	adds	r0, r3, #0
 800335e:	f007 fd31 	bl	800adc4 <sqrtf>
 8003362:	1c03      	adds	r3, r0, #0
 8003364:	1c19      	adds	r1, r3, #0
 8003366:	1c20      	adds	r0, r4, #0
 8003368:	f7fd fb88 	bl	8000a7c <__aeabi_fdiv>
 800336c:	1c03      	adds	r3, r0, #0
 800336e:	1c18      	adds	r0, r3, #0
 8003370:	f007 fc14 	bl	800ab9c <atanf>
 8003374:	1c03      	adds	r3, r0, #0
 8003376:	1c18      	adds	r0, r3, #0
 8003378:	f7ff fea0 	bl	80030bc <__aeabi_f2d>
 800337c:	4a0c      	ldr	r2, [pc, #48]	; (80033b0 <calculate_angle+0x100>)
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <calculate_angle+0x104>)
 8003380:	f7fe fbee 	bl	8001b60 <__aeabi_ddiv>
 8003384:	0002      	movs	r2, r0
 8003386:	000b      	movs	r3, r1
 8003388:	0010      	movs	r0, r2
 800338a:	0019      	movs	r1, r3
 800338c:	2200      	movs	r2, #0
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <calculate_angle+0x108>)
 8003390:	f7fe ffec 	bl	800236c <__aeabi_dmul>
 8003394:	0002      	movs	r2, r0
 8003396:	000b      	movs	r3, r1
 8003398:	0010      	movs	r0, r2
 800339a:	0019      	movs	r1, r3
 800339c:	f7ff fed6 	bl	800314c <__aeabi_d2f>
 80033a0:	1c02      	adds	r2, r0, #0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	601a      	str	r2, [r3, #0]

}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bdb0      	pop	{r4, r5, r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	51eb851f 	.word	0x51eb851f
 80033b4:	40091eb8 	.word	0x40091eb8
 80033b8:	40668000 	.word	0x40668000

080033bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	b09f      	sub	sp, #124	; 0x7c
 80033c0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c2:	f000 fe09 	bl	8003fd8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c6:	f000 f94b 	bl	8003660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ca:	f000 fa95 	bl	80038f8 <MX_GPIO_Init>
  MX_RTC_Init();
 80033ce:	f000 f9c3 	bl	8003758 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80033d2:	f000 fa61 	bl	8003898 <MX_USART2_UART_Init>
  BSP_I2C1_Init();
 80033d6:	f000 fd25 	bl	8003e24 <BSP_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80033da:	23fa      	movs	r3, #250	; 0xfa
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 fe6a 	bl	80040b8 <HAL_Delay>
  uint8_t TxData[2];
  TxData[0] = 0x10 ;
 80033e4:	2114      	movs	r1, #20
 80033e6:	2518      	movs	r5, #24
 80033e8:	197b      	adds	r3, r7, r5
 80033ea:	185b      	adds	r3, r3, r1
 80033ec:	2210      	movs	r2, #16
 80033ee:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write (&hi2c1 , LIS2DW12_I2C_ADD_L , LIS2DW12_CTRL1 , 1 , TxData , 1 , 10 ) ;
 80033f0:	4895      	ldr	r0, [pc, #596]	; (8003648 <main+0x28c>)
 80033f2:	230a      	movs	r3, #10
 80033f4:	9302      	str	r3, [sp, #8]
 80033f6:	2301      	movs	r3, #1
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	000c      	movs	r4, r1
 80033fc:	197b      	adds	r3, r7, r5
 80033fe:	185b      	adds	r3, r3, r1
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	2301      	movs	r3, #1
 8003404:	2220      	movs	r2, #32
 8003406:	2131      	movs	r1, #49	; 0x31
 8003408:	f001 fa40 	bl	800488c <HAL_I2C_Mem_Write>
  uint8_t i2cRxBuf[6];
  uint8_t i2cTemBuf[2];
  int16_t Out_X, Out_Y, Out_Z, Out_T;
  float Accel_X, Accel_Y, Accel_Z, Temp,alpha,beta;
  TxData[0] = 0x10;
 800340c:	0021      	movs	r1, r4
 800340e:	002c      	movs	r4, r5
 8003410:	193b      	adds	r3, r7, r4
 8003412:	185b      	adds	r3, r3, r1
 8003414:	2210      	movs	r2, #16
 8003416:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x40;
 8003418:	193b      	adds	r3, r7, r4
 800341a:	185b      	adds	r3, r3, r1
 800341c:	2240      	movs	r2, #64	; 0x40
 800341e:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write (&hi2c1 , LIS2DW12_I2C_ADD_L , 0x34 , 1 , TxData , 2 , 10 ) ;
 8003420:	4889      	ldr	r0, [pc, #548]	; (8003648 <main+0x28c>)
 8003422:	230a      	movs	r3, #10
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	2302      	movs	r3, #2
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	193b      	adds	r3, r7, r4
 800342c:	185b      	adds	r3, r3, r1
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2301      	movs	r3, #1
 8003432:	2234      	movs	r2, #52	; 0x34
 8003434:	2131      	movs	r1, #49	; 0x31
 8003436:	f001 fa29 	bl	800488c <HAL_I2C_Mem_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_I2C_Mem_Read (&hi2c1 , LIS2DW12_I2C_ADD_L , LIS2DW12_OUT_X_L , 1 , i2cRxBuf, 6, 10 );
 800343a:	4883      	ldr	r0, [pc, #524]	; (8003648 <main+0x28c>)
 800343c:	230a      	movs	r3, #10
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	2306      	movs	r3, #6
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	240c      	movs	r4, #12
 8003446:	2518      	movs	r5, #24
 8003448:	197b      	adds	r3, r7, r5
 800344a:	191b      	adds	r3, r3, r4
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2301      	movs	r3, #1
 8003450:	2228      	movs	r2, #40	; 0x28
 8003452:	2131      	movs	r1, #49	; 0x31
 8003454:	f001 fb48 	bl	8004ae8 <HAL_I2C_Mem_Read>

	  Out_X = (i2cRxBuf[1] <<8) + i2cRxBuf[0] ; //(Out_X_H <<8) + OuT_X_L
 8003458:	0021      	movs	r1, r4
 800345a:	0028      	movs	r0, r5
 800345c:	183b      	adds	r3, r7, r0
 800345e:	185b      	adds	r3, r3, r1
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	b29b      	uxth	r3, r3
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	b29a      	uxth	r2, r3
 8003468:	183b      	adds	r3, r7, r0
 800346a:	185b      	adds	r3, r3, r1
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	18d3      	adds	r3, r2, r3
 8003472:	b29a      	uxth	r2, r3
 8003474:	2136      	movs	r1, #54	; 0x36
 8003476:	183b      	adds	r3, r7, r0
 8003478:	185b      	adds	r3, r3, r1
 800347a:	801a      	strh	r2, [r3, #0]
	  Accel_X = (Out_X / 16) * 0.976;
 800347c:	183b      	adds	r3, r7, r0
 800347e:	185b      	adds	r3, r3, r1
 8003480:	2200      	movs	r2, #0
 8003482:	5e9b      	ldrsh	r3, [r3, r2]
 8003484:	2b00      	cmp	r3, #0
 8003486:	da00      	bge.n	800348a <main+0xce>
 8003488:	330f      	adds	r3, #15
 800348a:	111b      	asrs	r3, r3, #4
 800348c:	b21b      	sxth	r3, r3
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff fdbe 	bl	8003010 <__aeabi_i2d>
 8003494:	4a6d      	ldr	r2, [pc, #436]	; (800364c <main+0x290>)
 8003496:	4b6e      	ldr	r3, [pc, #440]	; (8003650 <main+0x294>)
 8003498:	f7fe ff68 	bl	800236c <__aeabi_dmul>
 800349c:	0002      	movs	r2, r0
 800349e:	000b      	movs	r3, r1
 80034a0:	0010      	movs	r0, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	f7ff fe52 	bl	800314c <__aeabi_d2f>
 80034a8:	1c03      	adds	r3, r0, #0
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
	  Out_Y = (i2cRxBuf[3] <<8) + i2cRxBuf[2] ; //(Out_X_H <<8) + OuT_X_L
 80034ac:	210c      	movs	r1, #12
 80034ae:	2018      	movs	r0, #24
 80034b0:	183b      	adds	r3, r7, r0
 80034b2:	185b      	adds	r3, r3, r1
 80034b4:	78db      	ldrb	r3, [r3, #3]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	183b      	adds	r3, r7, r0
 80034be:	185b      	adds	r3, r3, r1
 80034c0:	789b      	ldrb	r3, [r3, #2]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	18d3      	adds	r3, r2, r3
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	212e      	movs	r1, #46	; 0x2e
 80034ca:	183b      	adds	r3, r7, r0
 80034cc:	185b      	adds	r3, r3, r1
 80034ce:	801a      	strh	r2, [r3, #0]
	  Accel_Y = (Out_Y / 16) * 0.976;
 80034d0:	183b      	adds	r3, r7, r0
 80034d2:	185b      	adds	r3, r3, r1
 80034d4:	2200      	movs	r2, #0
 80034d6:	5e9b      	ldrsh	r3, [r3, r2]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da00      	bge.n	80034de <main+0x122>
 80034dc:	330f      	adds	r3, #15
 80034de:	111b      	asrs	r3, r3, #4
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff fd94 	bl	8003010 <__aeabi_i2d>
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <main+0x290>)
 80034ea:	4b59      	ldr	r3, [pc, #356]	; (8003650 <main+0x294>)
 80034ec:	f7fe ff3e 	bl	800236c <__aeabi_dmul>
 80034f0:	0002      	movs	r2, r0
 80034f2:	000b      	movs	r3, r1
 80034f4:	0010      	movs	r0, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	f7ff fe28 	bl	800314c <__aeabi_d2f>
 80034fc:	1c03      	adds	r3, r0, #0
 80034fe:	643b      	str	r3, [r7, #64]	; 0x40
	  Out_Z = (i2cRxBuf[5] <<8) + i2cRxBuf[4] ; //(Out_X_H <<8) + OuT_X_L
 8003500:	210c      	movs	r1, #12
 8003502:	2018      	movs	r0, #24
 8003504:	183b      	adds	r3, r7, r0
 8003506:	185b      	adds	r3, r3, r1
 8003508:	795b      	ldrb	r3, [r3, #5]
 800350a:	b29b      	uxth	r3, r3
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	b29a      	uxth	r2, r3
 8003510:	183b      	adds	r3, r7, r0
 8003512:	185b      	adds	r3, r3, r1
 8003514:	791b      	ldrb	r3, [r3, #4]
 8003516:	b29b      	uxth	r3, r3
 8003518:	18d3      	adds	r3, r2, r3
 800351a:	b29a      	uxth	r2, r3
 800351c:	2126      	movs	r1, #38	; 0x26
 800351e:	183b      	adds	r3, r7, r0
 8003520:	185b      	adds	r3, r3, r1
 8003522:	801a      	strh	r2, [r3, #0]
	  Accel_Z = (Out_Z / 16) * 0.976;
 8003524:	183b      	adds	r3, r7, r0
 8003526:	185b      	adds	r3, r3, r1
 8003528:	2200      	movs	r2, #0
 800352a:	5e9b      	ldrsh	r3, [r3, r2]
 800352c:	2b00      	cmp	r3, #0
 800352e:	da00      	bge.n	8003532 <main+0x176>
 8003530:	330f      	adds	r3, #15
 8003532:	111b      	asrs	r3, r3, #4
 8003534:	b21b      	sxth	r3, r3
 8003536:	0018      	movs	r0, r3
 8003538:	f7ff fd6a 	bl	8003010 <__aeabi_i2d>
 800353c:	4a43      	ldr	r2, [pc, #268]	; (800364c <main+0x290>)
 800353e:	4b44      	ldr	r3, [pc, #272]	; (8003650 <main+0x294>)
 8003540:	f7fe ff14 	bl	800236c <__aeabi_dmul>
 8003544:	0002      	movs	r2, r0
 8003546:	000b      	movs	r3, r1
 8003548:	0010      	movs	r0, r2
 800354a:	0019      	movs	r1, r3
 800354c:	f7ff fdfe 	bl	800314c <__aeabi_d2f>
 8003550:	1c03      	adds	r3, r0, #0
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
	  HAL_I2C_Mem_Read (&hi2c1 , LIS2DW12_OUT_T_L , 0x0D , 1 ,i2cTemBuf,2, 10 );
 8003554:	483c      	ldr	r0, [pc, #240]	; (8003648 <main+0x28c>)
 8003556:	230a      	movs	r3, #10
 8003558:	9302      	str	r3, [sp, #8]
 800355a:	2302      	movs	r3, #2
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2408      	movs	r4, #8
 8003560:	2518      	movs	r5, #24
 8003562:	197b      	adds	r3, r7, r5
 8003564:	191b      	adds	r3, r3, r4
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	2301      	movs	r3, #1
 800356a:	220d      	movs	r2, #13
 800356c:	210d      	movs	r1, #13
 800356e:	f001 fabb 	bl	8004ae8 <HAL_I2C_Mem_Read>
	  Out_T = (i2cTemBuf[1] <<8) + i2cTemBuf[0] ; //(Out_T_H <<8) + OuT_T_L
 8003572:	0021      	movs	r1, r4
 8003574:	0028      	movs	r0, r5
 8003576:	183b      	adds	r3, r7, r0
 8003578:	185b      	adds	r3, r3, r1
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	b29b      	uxth	r3, r3
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	b29a      	uxth	r2, r3
 8003582:	183b      	adds	r3, r7, r0
 8003584:	185b      	adds	r3, r3, r1
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	18d3      	adds	r3, r2, r3
 800358c:	b29a      	uxth	r2, r3
 800358e:	211e      	movs	r1, #30
 8003590:	183b      	adds	r3, r7, r0
 8003592:	185b      	adds	r3, r3, r1
 8003594:	801a      	strh	r2, [r3, #0]
	  Temp = (Out_T/(float)256) ;
 8003596:	0005      	movs	r5, r0
 8003598:	183b      	adds	r3, r7, r0
 800359a:	185b      	adds	r3, r3, r1
 800359c:	2200      	movs	r2, #0
 800359e:	5e9b      	ldrsh	r3, [r3, r2]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7fd ff2d 	bl	8001400 <__aeabi_i2f>
 80035a6:	1c03      	adds	r3, r0, #0
 80035a8:	2187      	movs	r1, #135	; 0x87
 80035aa:	05c9      	lsls	r1, r1, #23
 80035ac:	1c18      	adds	r0, r3, #0
 80035ae:	f7fd fa65 	bl	8000a7c <__aeabi_fdiv>
 80035b2:	1c03      	adds	r3, r0, #0
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
	  calculate_angle(&alpha,&beta,Accel_X,Accel_Y,Accel_Z);
 80035b6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80035b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ba:	1979      	adds	r1, r7, r5
 80035bc:	231c      	movs	r3, #28
 80035be:	18f8      	adds	r0, r7, r3
 80035c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	1c23      	adds	r3, r4, #0
 80035c6:	f7ff fe73 	bl	80032b0 <calculate_angle>
	  (void)snprintf((char *)tx_buffer,256, "Accel_X = %f | Accel_Y = %f | Accel_Z = %f | alpha = %f | beta = %f\r\n",Accel_X,Accel_Y,Accel_Z,alpha,beta);
 80035ca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80035cc:	f7ff fd76 	bl	80030bc <__aeabi_f2d>
 80035d0:	0004      	movs	r4, r0
 80035d2:	000d      	movs	r5, r1
 80035d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80035d6:	f7ff fd71 	bl	80030bc <__aeabi_f2d>
 80035da:	6138      	str	r0, [r7, #16]
 80035dc:	6179      	str	r1, [r7, #20]
 80035de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035e0:	f7ff fd6c 	bl	80030bc <__aeabi_f2d>
 80035e4:	60b8      	str	r0, [r7, #8]
 80035e6:	60f9      	str	r1, [r7, #12]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	1c18      	adds	r0, r3, #0
 80035ec:	f7ff fd66 	bl	80030bc <__aeabi_f2d>
 80035f0:	6038      	str	r0, [r7, #0]
 80035f2:	6079      	str	r1, [r7, #4]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	1c18      	adds	r0, r3, #0
 80035f8:	f7ff fd60 	bl	80030bc <__aeabi_f2d>
 80035fc:	0002      	movs	r2, r0
 80035fe:	000b      	movs	r3, r1
 8003600:	4e14      	ldr	r6, [pc, #80]	; (8003654 <main+0x298>)
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	0049      	lsls	r1, r1, #1
 8003606:	4814      	ldr	r0, [pc, #80]	; (8003658 <main+0x29c>)
 8003608:	9208      	str	r2, [sp, #32]
 800360a:	9309      	str	r3, [sp, #36]	; 0x24
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	9206      	str	r2, [sp, #24]
 8003612:	9307      	str	r3, [sp, #28]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	9204      	str	r2, [sp, #16]
 800361a:	9305      	str	r3, [sp, #20]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	9202      	str	r2, [sp, #8]
 8003622:	9303      	str	r3, [sp, #12]
 8003624:	9400      	str	r4, [sp, #0]
 8003626:	9501      	str	r5, [sp, #4]
 8003628:	0032      	movs	r2, r6
 800362a:	f004 ffd1 	bl	80085d0 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)tx_buffer,(uint16_t)strlen((char const *)tx_buffer), 1000);
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <main+0x29c>)
 8003630:	0018      	movs	r0, r3
 8003632:	f7fc fd69 	bl	8000108 <strlen>
 8003636:	0003      	movs	r3, r0
 8003638:	b29a      	uxth	r2, r3
 800363a:	23fa      	movs	r3, #250	; 0xfa
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4906      	ldr	r1, [pc, #24]	; (8003658 <main+0x29c>)
 8003640:	4806      	ldr	r0, [pc, #24]	; (800365c <main+0x2a0>)
 8003642:	f003 fa51 	bl	8006ae8 <HAL_UART_Transmit>
	  HAL_I2C_Mem_Read (&hi2c1 , LIS2DW12_I2C_ADD_L , LIS2DW12_OUT_X_L , 1 , i2cRxBuf, 6, 10 );
 8003646:	e6f8      	b.n	800343a <main+0x7e>
 8003648:	2000069c 	.word	0x2000069c
 800364c:	5a1cac08 	.word	0x5a1cac08
 8003650:	3fef3b64 	.word	0x3fef3b64
 8003654:	0800aed8 	.word	0x0800aed8
 8003658:	200001fc 	.word	0x200001fc
 800365c:	20000618 	.word	0x20000618

08003660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b09d      	sub	sp, #116	; 0x74
 8003664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003666:	2438      	movs	r4, #56	; 0x38
 8003668:	193b      	adds	r3, r7, r4
 800366a:	0018      	movs	r0, r3
 800366c:	2338      	movs	r3, #56	; 0x38
 800366e:	001a      	movs	r2, r3
 8003670:	2100      	movs	r1, #0
 8003672:	f004 fb2b 	bl	8007ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003676:	2324      	movs	r3, #36	; 0x24
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	0018      	movs	r0, r3
 800367c:	2314      	movs	r3, #20
 800367e:	001a      	movs	r2, r3
 8003680:	2100      	movs	r1, #0
 8003682:	f004 fb23 	bl	8007ccc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003686:	003b      	movs	r3, r7
 8003688:	0018      	movs	r0, r3
 800368a:	2324      	movs	r3, #36	; 0x24
 800368c:	001a      	movs	r2, r3
 800368e:	2100      	movs	r1, #0
 8003690:	f004 fb1c 	bl	8007ccc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <SystemClock_Config+0xf0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2e      	ldr	r2, [pc, #184]	; (8003754 <SystemClock_Config+0xf4>)
 800369a:	401a      	ands	r2, r3
 800369c:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <SystemClock_Config+0xf0>)
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	0109      	lsls	r1, r1, #4
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80036a6:	0021      	movs	r1, r4
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	220a      	movs	r2, #10
 80036ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	2201      	movs	r2, #1
 80036b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2210      	movs	r2, #16
 80036b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	2201      	movs	r2, #1
 80036be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	2202      	movs	r2, #2
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	2200      	movs	r2, #0
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	0312      	lsls	r2, r2, #12
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	0412      	lsls	r2, r2, #16
 80036da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	0018      	movs	r0, r3
 80036e0:	f001 fe2c 	bl	800533c <HAL_RCC_OscConfig>
 80036e4:	1e03      	subs	r3, r0, #0
 80036e6:	d001      	beq.n	80036ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80036e8:	f000 f9e0 	bl	8003aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036ec:	2124      	movs	r1, #36	; 0x24
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	220f      	movs	r2, #15
 80036f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	2203      	movs	r2, #3
 80036f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003700:	187b      	adds	r3, r7, r1
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800370c:	187b      	adds	r3, r7, r1
 800370e:	2101      	movs	r1, #1
 8003710:	0018      	movs	r0, r3
 8003712:	f002 f9e7 	bl	8005ae4 <HAL_RCC_ClockConfig>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d001      	beq.n	800371e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800371a:	f000 f9c7 	bl	8003aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800371e:	003b      	movs	r3, r7
 8003720:	222a      	movs	r2, #42	; 0x2a
 8003722:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003724:	003b      	movs	r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800372a:	003b      	movs	r3, r7
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003730:	003b      	movs	r3, r7
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	0292      	lsls	r2, r2, #10
 8003736:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003738:	003b      	movs	r3, r7
 800373a:	0018      	movs	r0, r3
 800373c:	f002 fbf6 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8003740:	1e03      	subs	r3, r0, #0
 8003742:	d001      	beq.n	8003748 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8003744:	f000 f9b2 	bl	8003aac <Error_Handler>
  }
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b01d      	add	sp, #116	; 0x74
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	40007000 	.word	0x40007000
 8003754:	ffffe7ff 	.word	0xffffe7ff

08003758 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b090      	sub	sp, #64	; 0x40
 800375c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800375e:	232c      	movs	r3, #44	; 0x2c
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	0018      	movs	r0, r3
 8003764:	2314      	movs	r3, #20
 8003766:	001a      	movs	r2, r3
 8003768:	2100      	movs	r1, #0
 800376a:	f004 faaf 	bl	8007ccc <memset>
  RTC_DateTypeDef sDate = {0};
 800376e:	2328      	movs	r3, #40	; 0x28
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003776:	003b      	movs	r3, r7
 8003778:	0018      	movs	r0, r3
 800377a:	2328      	movs	r3, #40	; 0x28
 800377c:	001a      	movs	r2, r3
 800377e:	2100      	movs	r1, #0
 8003780:	f004 faa4 	bl	8007ccc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003784:	4b41      	ldr	r3, [pc, #260]	; (800388c <MX_RTC_Init+0x134>)
 8003786:	4a42      	ldr	r2, [pc, #264]	; (8003890 <MX_RTC_Init+0x138>)
 8003788:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800378a:	4b40      	ldr	r3, [pc, #256]	; (800388c <MX_RTC_Init+0x134>)
 800378c:	2200      	movs	r2, #0
 800378e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8003790:	4b3e      	ldr	r3, [pc, #248]	; (800388c <MX_RTC_Init+0x134>)
 8003792:	221f      	movs	r2, #31
 8003794:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <MX_RTC_Init+0x134>)
 8003798:	4a3e      	ldr	r2, [pc, #248]	; (8003894 <MX_RTC_Init+0x13c>)
 800379a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800379c:	4b3b      	ldr	r3, [pc, #236]	; (800388c <MX_RTC_Init+0x134>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80037a2:	4b3a      	ldr	r3, [pc, #232]	; (800388c <MX_RTC_Init+0x134>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037a8:	4b38      	ldr	r3, [pc, #224]	; (800388c <MX_RTC_Init+0x134>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037ae:	4b37      	ldr	r3, [pc, #220]	; (800388c <MX_RTC_Init+0x134>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <MX_RTC_Init+0x134>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f002 fd0e 	bl	80061d8 <HAL_RTC_Init>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d001      	beq.n	80037c4 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80037c0:	f000 f974 	bl	8003aac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	2200      	movs	r2, #0
 80037d0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2200      	movs	r2, #0
 80037d6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80037e4:	1879      	adds	r1, r7, r1
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <MX_RTC_Init+0x134>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	0018      	movs	r0, r3
 80037ec:	f002 fd92 	bl	8006314 <HAL_RTC_SetTime>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80037f4:	f000 f95a 	bl	8003aac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80037f8:	2128      	movs	r1, #40	; 0x28
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003800:	187b      	adds	r3, r7, r1
 8003802:	2201      	movs	r2, #1
 8003804:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003806:	187b      	adds	r3, r7, r1
 8003808:	2201      	movs	r2, #1
 800380a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800380c:	187b      	adds	r3, r7, r1
 800380e:	2200      	movs	r2, #0
 8003810:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003812:	1879      	adds	r1, r7, r1
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <MX_RTC_Init+0x134>)
 8003816:	2200      	movs	r2, #0
 8003818:	0018      	movs	r0, r3
 800381a:	f002 fe3f 	bl	800649c <HAL_RTC_SetDate>
 800381e:	1e03      	subs	r3, r0, #0
 8003820:	d001      	beq.n	8003826 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003822:	f000 f943 	bl	8003aac <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003826:	003b      	movs	r3, r7
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800382c:	003b      	movs	r3, r7
 800382e:	2200      	movs	r2, #0
 8003830:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003832:	003b      	movs	r3, r7
 8003834:	2200      	movs	r2, #0
 8003836:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003838:	003b      	movs	r3, r7
 800383a:	2200      	movs	r2, #0
 800383c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800383e:	003b      	movs	r3, r7
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003844:	003b      	movs	r3, r7
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800384a:	003b      	movs	r3, r7
 800384c:	2200      	movs	r2, #0
 800384e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8003850:	003b      	movs	r3, r7
 8003852:	22f0      	movs	r2, #240	; 0xf0
 8003854:	0512      	lsls	r2, r2, #20
 8003856:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003858:	003b      	movs	r3, r7
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800385e:	003b      	movs	r3, r7
 8003860:	2220      	movs	r2, #32
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003866:	003b      	movs	r3, r7
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	0052      	lsls	r2, r2, #1
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800386e:	0039      	movs	r1, r7
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <MX_RTC_Init+0x134>)
 8003872:	2200      	movs	r2, #0
 8003874:	0018      	movs	r0, r3
 8003876:	f002 febf 	bl	80065f8 <HAL_RTC_SetAlarm_IT>
 800387a:	1e03      	subs	r3, r0, #0
 800387c:	d001      	beq.n	8003882 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800387e:	f000 f915 	bl	8003aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b010      	add	sp, #64	; 0x40
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	200005f4 	.word	0x200005f4
 8003890:	40002800 	.word	0x40002800
 8003894:	000003ff 	.word	0x000003ff

08003898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 800389e:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <MX_USART2_UART_Init+0x5c>)
 80038a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038a4:	22e1      	movs	r2, #225	; 0xe1
 80038a6:	0252      	lsls	r2, r2, #9
 80038a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038aa:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038b6:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038be:	220c      	movs	r2, #12
 80038c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038c2:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <MX_USART2_UART_Init+0x58>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f003 f8af 	bl	8006a40 <HAL_UART_Init>
 80038e2:	1e03      	subs	r3, r0, #0
 80038e4:	d001      	beq.n	80038ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038e6:	f000 f8e1 	bl	8003aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000618 	.word	0x20000618
 80038f4:	40004400 	.word	0x40004400

080038f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b08b      	sub	sp, #44	; 0x2c
 80038fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fe:	2414      	movs	r4, #20
 8003900:	193b      	adds	r3, r7, r4
 8003902:	0018      	movs	r0, r3
 8003904:	2314      	movs	r3, #20
 8003906:	001a      	movs	r2, r3
 8003908:	2100      	movs	r1, #0
 800390a:	f004 f9df 	bl	8007ccc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800390e:	4b63      	ldr	r3, [pc, #396]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	4b62      	ldr	r3, [pc, #392]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003914:	2101      	movs	r1, #1
 8003916:	430a      	orrs	r2, r1
 8003918:	62da      	str	r2, [r3, #44]	; 0x2c
 800391a:	4b60      	ldr	r3, [pc, #384]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	2201      	movs	r2, #1
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003926:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	4b5c      	ldr	r3, [pc, #368]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 800392c:	2102      	movs	r1, #2
 800392e:	430a      	orrs	r2, r1
 8003930:	62da      	str	r2, [r3, #44]	; 0x2c
 8003932:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800393e:	4b57      	ldr	r3, [pc, #348]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003944:	2104      	movs	r1, #4
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
 800394a:	4b54      	ldr	r3, [pc, #336]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	2204      	movs	r2, #4
 8003950:	4013      	ands	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003956:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	430a      	orrs	r2, r1
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c
 8003962:	4b4e      	ldr	r3, [pc, #312]	; (8003a9c <MX_GPIO_Init+0x1a4>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	4013      	ands	r3, r2
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 800396e:	494c      	ldr	r1, [pc, #304]	; (8003aa0 <MX_GPIO_Init+0x1a8>)
 8003970:	23a0      	movs	r3, #160	; 0xa0
 8003972:	05db      	lsls	r3, r3, #23
 8003974:	2200      	movs	r2, #0
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fea6 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <MX_GPIO_Init+0x1ac>)
 800397e:	2200      	movs	r2, #0
 8003980:	2107      	movs	r1, #7
 8003982:	0018      	movs	r0, r3
 8003984:	f000 fea0 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8003988:	193b      	adds	r3, r7, r4
 800398a:	4a45      	ldr	r2, [pc, #276]	; (8003aa0 <MX_GPIO_Init+0x1a8>)
 800398c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398e:	193b      	adds	r3, r7, r4
 8003990:	2201      	movs	r2, #1
 8003992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	193b      	adds	r3, r7, r4
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800399a:	193b      	adds	r3, r7, r4
 800399c:	2202      	movs	r2, #2
 800399e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a0:	193a      	adds	r2, r7, r4
 80039a2:	23a0      	movs	r3, #160	; 0xa0
 80039a4:	05db      	lsls	r3, r3, #23
 80039a6:	0011      	movs	r1, r2
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 fd0f 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 80039ae:	193b      	adds	r3, r7, r4
 80039b0:	2208      	movs	r2, #8
 80039b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	193b      	adds	r3, r7, r4
 80039b6:	2202      	movs	r2, #2
 80039b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	193b      	adds	r3, r7, r4
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	2203      	movs	r2, #3
 80039c4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80039c6:	193b      	adds	r3, r7, r4
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80039cc:	193b      	adds	r3, r7, r4
 80039ce:	4a36      	ldr	r2, [pc, #216]	; (8003aa8 <MX_GPIO_Init+0x1b0>)
 80039d0:	0019      	movs	r1, r3
 80039d2:	0010      	movs	r0, r2
 80039d4:	f000 fcfa 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 80039d8:	0021      	movs	r1, r4
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2213      	movs	r2, #19
 80039de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2288      	movs	r2, #136	; 0x88
 80039e4:	0352      	lsls	r2, r2, #13
 80039e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	000c      	movs	r4, r1
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	4a2d      	ldr	r2, [pc, #180]	; (8003aa8 <MX_GPIO_Init+0x1b0>)
 80039f4:	0019      	movs	r1, r3
 80039f6:	0010      	movs	r0, r2
 80039f8:	f000 fce8 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 80039fc:	0021      	movs	r1, r4
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	0192      	lsls	r2, r2, #6
 8003a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2288      	movs	r2, #136	; 0x88
 8003a0a:	0352      	lsls	r2, r2, #13
 8003a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	000c      	movs	r4, r1
 8003a10:	193b      	adds	r3, r7, r4
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <MX_GPIO_Init+0x1ac>)
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	0010      	movs	r0, r2
 8003a1e:	f000 fcd5 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a34:	193b      	adds	r3, r7, r4
 8003a36:	2202      	movs	r2, #2
 8003a38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3a:	193b      	adds	r3, r7, r4
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <MX_GPIO_Init+0x1ac>)
 8003a3e:	0019      	movs	r1, r3
 8003a40:	0010      	movs	r0, r2
 8003a42:	f000 fcc3 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7_RESERVED_Pin PA6_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8003a46:	0021      	movs	r1, r4
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	22c0      	movs	r2, #192	; 0xc0
 8003a4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	2202      	movs	r2, #2
 8003a52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	187b      	adds	r3, r7, r1
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	187b      	adds	r3, r7, r1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a60:	187b      	adds	r3, r7, r1
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	187a      	adds	r2, r7, r1
 8003a68:	23a0      	movs	r3, #160	; 0xa0
 8003a6a:	05db      	lsls	r3, r3, #23
 8003a6c:	0011      	movs	r1, r2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 fcac 	bl	80043cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003a74:	2200      	movs	r2, #0
 8003a76:	2100      	movs	r1, #0
 8003a78:	2005      	movs	r0, #5
 8003a7a:	f000 fbed 	bl	8004258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003a7e:	2005      	movs	r0, #5
 8003a80:	f000 fbff 	bl	8004282 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003a84:	2200      	movs	r2, #0
 8003a86:	2100      	movs	r1, #0
 8003a88:	2007      	movs	r0, #7
 8003a8a:	f000 fbe5 	bl	8004258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003a8e:	2007      	movs	r0, #7
 8003a90:	f000 fbf7 	bl	8004282 <HAL_NVIC_EnableIRQ>

}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b00b      	add	sp, #44	; 0x2c
 8003a9a:	bd90      	pop	{r4, r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	00009002 	.word	0x00009002
 8003aa4:	50000800 	.word	0x50000800
 8003aa8:	50000400 	.word	0x50000400

08003aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab0:	b672      	cpsid	i
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ab4:	e7fe      	b.n	8003ab4 <Error_Handler+0x8>
	...

08003ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <HAL_MspInit+0x24>)
 8003abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_MspInit+0x24>)
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <HAL_MspInit+0x24>)
 8003aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <HAL_MspInit+0x24>)
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	0549      	lsls	r1, r1, #21
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_RTC_MspInit+0x38>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10e      	bne.n	8003b10 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RTC_MspInit+0x3c>)
 8003af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RTC_MspInit+0x3c>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	02c9      	lsls	r1, r1, #11
 8003afc:	430a      	orrs	r2, r1
 8003afe:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003b00:	2200      	movs	r2, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	2002      	movs	r0, #2
 8003b06:	f000 fba7 	bl	8004258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f000 fbb9 	bl	8004282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40002800 	.word	0x40002800
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	240c      	movs	r4, #12
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	2314      	movs	r3, #20
 8003b30:	001a      	movs	r2, r3
 8003b32:	2100      	movs	r1, #0
 8003b34:	f004 f8ca 	bl	8007ccc <memset>
  if(huart->Instance==USART2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	; (8003bb0 <HAL_UART_MspInit+0x90>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d131      	bne.n	8003ba6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <HAL_UART_MspInit+0x94>)
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_UART_MspInit+0x94>)
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	0289      	lsls	r1, r1, #10
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <HAL_UART_MspInit+0x94>)
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_UART_MspInit+0x94>)
 8003b56:	2101      	movs	r1, #1
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_UART_MspInit+0x94>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	2201      	movs	r2, #1
 8003b62:	4013      	ands	r3, r2
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003b68:	0021      	movs	r1, r4
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	220c      	movs	r2, #12
 8003b6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	2202      	movs	r2, #2
 8003b74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	2204      	movs	r2, #4
 8003b86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b88:	187a      	adds	r2, r7, r1
 8003b8a:	23a0      	movs	r3, #160	; 0xa0
 8003b8c:	05db      	lsls	r3, r3, #23
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 fc1b 	bl	80043cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	201c      	movs	r0, #28
 8003b9c:	f000 fb5c 	bl	8004258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ba0:	201c      	movs	r0, #28
 8003ba2:	f000 fb6e 	bl	8004282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b009      	add	sp, #36	; 0x24
 8003bac:	bd90      	pop	{r4, r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	40004400 	.word	0x40004400
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bbc:	e7fe      	b.n	8003bbc <NMI_Handler+0x4>

08003bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc2:	e7fe      	b.n	8003bc2 <HardFault_Handler+0x4>

08003bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bdc:	f000 fa50 	bl	8004080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <RTC_IRQHandler+0x14>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f002 fe4e 	bl	8006890 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	200005f4 	.word	0x200005f4

08003c00 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f000 fd7d 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	f000 fd7a 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003c1a:	2010      	movs	r0, #16
 8003c1c:	f000 fd72 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	019b      	lsls	r3, r3, #6
 8003c24:	0018      	movs	r0, r3
 8003c26:	f000 fd6d 	bl	8004704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <USART2_IRQHandler+0x14>)
 8003c36:	0018      	movs	r0, r3
 8003c38:	f002 fffe 	bl	8006c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	20000618 	.word	0x20000618

08003c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	return 1;
 8003c4c:	2301      	movs	r3, #1
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_kill>:

int _kill(int pid, int sig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c5e:	f004 f80b 	bl	8007c78 <__errno>
 8003c62:	0003      	movs	r3, r0
 8003c64:	2216      	movs	r2, #22
 8003c66:	601a      	str	r2, [r3, #0]
	return -1;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	425b      	negs	r3, r3
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_exit>:

void _exit (int status)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	425a      	negs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	0011      	movs	r1, r2
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7ff ffe5 	bl	8003c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c8a:	e7fe      	b.n	8003c8a <_exit+0x16>

08003c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e00a      	b.n	8003cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c9e:	e000      	b.n	8003ca2 <_read+0x16>
 8003ca0:	bf00      	nop
 8003ca2:	0001      	movs	r1, r0
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	60ba      	str	r2, [r7, #8]
 8003caa:	b2ca      	uxtb	r2, r1
 8003cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbf0      	blt.n	8003c9e <_read+0x12>
	}

return len;
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b006      	add	sp, #24
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e009      	b.n	8003cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	60ba      	str	r2, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	e000      	b.n	8003ce6 <_write+0x20>
 8003ce4:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dbf1      	blt.n	8003cd8 <_write+0x12>
	}
	return len;
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b006      	add	sp, #24
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_close>:

int _close(int file)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
	return -1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	425b      	negs	r3, r3
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b002      	add	sp, #8
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	0192      	lsls	r2, r2, #6
 8003d22:	605a      	str	r2, [r3, #4]
	return 0;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b002      	add	sp, #8
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_isatty>:

int _isatty(int file)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
	return 1;
 8003d36:	2301      	movs	r3, #1
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
	return 0;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <_sbrk+0x5c>)
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <_sbrk+0x60>)
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <_sbrk+0x64>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <_sbrk+0x64>)
 8003d76:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <_sbrk+0x68>)
 8003d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <_sbrk+0x64>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	18d3      	adds	r3, r2, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d207      	bcs.n	8003d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d88:	f003 ff76 	bl	8007c78 <__errno>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	220c      	movs	r2, #12
 8003d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	425b      	negs	r3, r3
 8003d96:	e009      	b.n	8003dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <_sbrk+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	18d2      	adds	r2, r2, r3
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <_sbrk+0x64>)
 8003da8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b006      	add	sp, #24
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20005000 	.word	0x20005000
 8003db8:	00000400 	.word	0x00000400
 8003dbc:	200005e4 	.word	0x200005e4
 8003dc0:	20000700 	.word	0x20000700

08003dc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003dd0:	480d      	ldr	r0, [pc, #52]	; (8003e08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003dd2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dd4:	480d      	ldr	r0, [pc, #52]	; (8003e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003dd6:	490e      	ldr	r1, [pc, #56]	; (8003e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <LoopForever+0xe>)
  movs r3, #0
 8003dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ddc:	e002      	b.n	8003de4 <LoopCopyDataInit>

08003dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de2:	3304      	adds	r3, #4

08003de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003de8:	d3f9      	bcc.n	8003dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dea:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003dec:	4c0b      	ldr	r4, [pc, #44]	; (8003e1c <LoopForever+0x16>)
  movs r3, #0
 8003dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df0:	e001      	b.n	8003df6 <LoopFillZerobss>

08003df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df4:	3204      	adds	r2, #4

08003df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003df8:	d3fb      	bcc.n	8003df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003dfa:	f7ff ffe3 	bl	8003dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dfe:	f003 ff41 	bl	8007c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e02:	f7ff fadb 	bl	80033bc <main>

08003e06 <LoopForever>:

LoopForever:
    b LoopForever
 8003e06:	e7fe      	b.n	8003e06 <LoopForever>
   ldr   r0, =_estack
 8003e08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e10:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003e14:	0800b4dc 	.word	0x0800b4dc
  ldr r2, =_sbss
 8003e18:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003e1c:	200006fc 	.word	0x200006fc

08003e20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e20:	e7fe      	b.n	8003e20 <ADC1_COMP_IRQHandler>
	...

08003e24 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <BSP_I2C1_Init+0x70>)
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <BSP_I2C1_Init+0x74>)
 8003e32:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <BSP_I2C1_Init+0x78>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	1c59      	adds	r1, r3, #1
 8003e3a:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <BSP_I2C1_Init+0x78>)
 8003e3c:	6011      	str	r1, [r2, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d123      	bne.n	8003e8a <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <BSP_I2C1_Init+0x70>)
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 ff83 	bl	8004d50 <HAL_I2C_GetState>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d11d      	bne.n	8003e8a <BSP_I2C1_Init+0x66>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <BSP_I2C1_Init+0x70>)
 8003e50:	0018      	movs	r0, r3
 8003e52:	f000 f873 	bl	8003f3c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d116      	bne.n	8003e8a <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <BSP_I2C1_Init+0x70>)
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 f81e 	bl	8003ea0 <MX_I2C1_Init>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d003      	beq.n	8003e70 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003e68:	2308      	movs	r3, #8
 8003e6a:	425b      	negs	r3, r3
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	e00c      	b.n	8003e8a <BSP_I2C1_Init+0x66>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <BSP_I2C1_Init+0x70>)
 8003e72:	2100      	movs	r1, #0
 8003e74:	0018      	movs	r0, r3
 8003e76:	f001 f9c9 	bl	800520c <HAL_I2CEx_ConfigAnalogFilter>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d003      	beq.n	8003e86 <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	425b      	negs	r3, r3
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	e001      	b.n	8003e8a <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003e8a:	687b      	ldr	r3, [r7, #4]
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000069c 	.word	0x2000069c
 8003e98:	40005400 	.word	0x40005400
 8003e9c:	200005e8 	.word	0x200005e8

08003ea0 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ea8:	240f      	movs	r4, #15
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]

  hi2c->Instance = I2C1;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <MX_I2C1_Init+0x94>)
 8003eb4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <MX_I2C1_Init+0x98>)
 8003eba:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 fc31 	bl	8004750 <HAL_I2C_Init>
 8003eee:	1e03      	subs	r3, r0, #0
 8003ef0:	d002      	beq.n	8003ef8 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2100      	movs	r1, #0
 8003efc:	0018      	movs	r0, r3
 8003efe:	f001 f985 	bl	800520c <HAL_I2CEx_ConfigAnalogFilter>
 8003f02:	1e03      	subs	r3, r0, #0
 8003f04:	d003      	beq.n	8003f0e <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8003f06:	230f      	movs	r3, #15
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2100      	movs	r1, #0
 8003f12:	0018      	movs	r0, r3
 8003f14:	f001 f9c6 	bl	80052a4 <HAL_I2CEx_ConfigDigitalFilter>
 8003f18:	1e03      	subs	r3, r0, #0
 8003f1a:	d003      	beq.n	8003f24 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8003f1c:	230f      	movs	r3, #15
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003f24:	230f      	movs	r3, #15
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	781b      	ldrb	r3, [r3, #0]
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b005      	add	sp, #20
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	40005400 	.word	0x40005400
 8003f38:	00707cbb 	.word	0x00707cbb

08003f3c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <I2C1_MspInit+0x94>)
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <I2C1_MspInit+0x94>)
 8003f4a:	2102      	movs	r1, #2
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <I2C1_MspInit+0x94>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2202      	movs	r2, #2
 8003f56:	4013      	ands	r3, r2
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003f5c:	210c      	movs	r1, #12
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f66:	000c      	movs	r4, r1
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	2212      	movs	r2, #18
 8003f6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	193b      	adds	r3, r7, r4
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	193b      	adds	r3, r7, r4
 8003f76:	2203      	movs	r2, #3
 8003f78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8003f7a:	193b      	adds	r3, r7, r4
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003f80:	193b      	adds	r3, r7, r4
 8003f82:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <I2C1_MspInit+0x98>)
 8003f84:	0019      	movs	r1, r3
 8003f86:	0010      	movs	r0, r2
 8003f88:	f000 fa20 	bl	80043cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003f8c:	0021      	movs	r1, r4
 8003f8e:	187b      	adds	r3, r7, r1
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	0052      	lsls	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	2212      	movs	r2, #18
 8003f9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	187b      	adds	r3, r7, r1
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	2204      	movs	r2, #4
 8003fac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <I2C1_MspInit+0x98>)
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	0010      	movs	r0, r2
 8003fb6:	f000 fa09 	bl	80043cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <I2C1_MspInit+0x94>)
 8003fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <I2C1_MspInit+0x94>)
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	0389      	lsls	r1, r1, #14
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b009      	add	sp, #36	; 0x24
 8003fce:	bd90      	pop	{r4, r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	50000400 	.word	0x50000400

08003fd8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_Init+0x3c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_Init+0x3c>)
 8003fea:	2140      	movs	r1, #64	; 0x40
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f000 f811 	bl	8004018 <HAL_InitTick>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003ffa:	1dfb      	adds	r3, r7, #7
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e001      	b.n	8004006 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004002:	f7ff fd59 	bl	8003ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004006:	1dfb      	adds	r3, r7, #7
 8004008:	781b      	ldrb	r3, [r3, #0]
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b002      	add	sp, #8
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	40022000 	.word	0x40022000

08004018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <HAL_InitTick+0x5c>)
 8004022:	681c      	ldr	r4, [r3, #0]
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <HAL_InitTick+0x60>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	0019      	movs	r1, r3
 800402a:	23fa      	movs	r3, #250	; 0xfa
 800402c:	0098      	lsls	r0, r3, #2
 800402e:	f7fc f887 	bl	8000140 <__udivsi3>
 8004032:	0003      	movs	r3, r0
 8004034:	0019      	movs	r1, r3
 8004036:	0020      	movs	r0, r4
 8004038:	f7fc f882 	bl	8000140 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	0018      	movs	r0, r3
 8004040:	f000 f92f 	bl	80042a2 <HAL_SYSTICK_Config>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d001      	beq.n	800404c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e00f      	b.n	800406c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d80b      	bhi.n	800406a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	2301      	movs	r3, #1
 8004056:	425b      	negs	r3, r3
 8004058:	2200      	movs	r2, #0
 800405a:	0018      	movs	r0, r3
 800405c:	f000 f8fc 	bl	8004258 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_InitTick+0x64>)
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b003      	add	sp, #12
 8004072:	bd90      	pop	{r4, r7, pc}
 8004074:	20000000 	.word	0x20000000
 8004078:	20000008 	.word	0x20000008
 800407c:	20000004 	.word	0x20000004

08004080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_IncTick+0x1c>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	001a      	movs	r2, r3
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_IncTick+0x20>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	18d2      	adds	r2, r2, r3
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_IncTick+0x20>)
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20000008 	.word	0x20000008
 80040a0:	200006e8 	.word	0x200006e8

080040a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  return uwTick;
 80040a8:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <HAL_GetTick+0x10>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	200006e8 	.word	0x200006e8

080040b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040c0:	f7ff fff0 	bl	80040a4 <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	d005      	beq.n	80040de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <HAL_Delay+0x44>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	001a      	movs	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	f7ff ffe0 	bl	80040a4 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d8f7      	bhi.n	80040e0 <HAL_Delay+0x28>
  {
  }
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b004      	add	sp, #16
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	20000008 	.word	0x20000008

08004100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	0002      	movs	r2, r0
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b7f      	cmp	r3, #127	; 0x7f
 8004112:	d809      	bhi.n	8004128 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004114:	1dfb      	adds	r3, r7, #7
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	001a      	movs	r2, r3
 800411a:	231f      	movs	r3, #31
 800411c:	401a      	ands	r2, r3
 800411e:	4b04      	ldr	r3, [pc, #16]	; (8004130 <__NVIC_EnableIRQ+0x30>)
 8004120:	2101      	movs	r1, #1
 8004122:	4091      	lsls	r1, r2
 8004124:	000a      	movs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
  }
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b002      	add	sp, #8
 800412e:	bd80      	pop	{r7, pc}
 8004130:	e000e100 	.word	0xe000e100

08004134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	0002      	movs	r2, r0
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004142:	1dfb      	adds	r3, r7, #7
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b7f      	cmp	r3, #127	; 0x7f
 8004148:	d828      	bhi.n	800419c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <__NVIC_SetPriority+0xd4>)
 800414c:	1dfb      	adds	r3, r7, #7
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b25b      	sxtb	r3, r3
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	33c0      	adds	r3, #192	; 0xc0
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	589b      	ldr	r3, [r3, r2]
 800415a:	1dfa      	adds	r2, r7, #7
 800415c:	7812      	ldrb	r2, [r2, #0]
 800415e:	0011      	movs	r1, r2
 8004160:	2203      	movs	r2, #3
 8004162:	400a      	ands	r2, r1
 8004164:	00d2      	lsls	r2, r2, #3
 8004166:	21ff      	movs	r1, #255	; 0xff
 8004168:	4091      	lsls	r1, r2
 800416a:	000a      	movs	r2, r1
 800416c:	43d2      	mvns	r2, r2
 800416e:	401a      	ands	r2, r3
 8004170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	401a      	ands	r2, r3
 800417a:	1dfb      	adds	r3, r7, #7
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	0018      	movs	r0, r3
 8004180:	2303      	movs	r3, #3
 8004182:	4003      	ands	r3, r0
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004188:	481f      	ldr	r0, [pc, #124]	; (8004208 <__NVIC_SetPriority+0xd4>)
 800418a:	1dfb      	adds	r3, r7, #7
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	b25b      	sxtb	r3, r3
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	430a      	orrs	r2, r1
 8004194:	33c0      	adds	r3, #192	; 0xc0
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800419a:	e031      	b.n	8004200 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <__NVIC_SetPriority+0xd8>)
 800419e:	1dfb      	adds	r3, r7, #7
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	0019      	movs	r1, r3
 80041a4:	230f      	movs	r3, #15
 80041a6:	400b      	ands	r3, r1
 80041a8:	3b08      	subs	r3, #8
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3306      	adds	r3, #6
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	3304      	adds	r3, #4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	1dfa      	adds	r2, r7, #7
 80041b8:	7812      	ldrb	r2, [r2, #0]
 80041ba:	0011      	movs	r1, r2
 80041bc:	2203      	movs	r2, #3
 80041be:	400a      	ands	r2, r1
 80041c0:	00d2      	lsls	r2, r2, #3
 80041c2:	21ff      	movs	r1, #255	; 0xff
 80041c4:	4091      	lsls	r1, r2
 80041c6:	000a      	movs	r2, r1
 80041c8:	43d2      	mvns	r2, r2
 80041ca:	401a      	ands	r2, r3
 80041cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	019b      	lsls	r3, r3, #6
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	401a      	ands	r2, r3
 80041d6:	1dfb      	adds	r3, r7, #7
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	0018      	movs	r0, r3
 80041dc:	2303      	movs	r3, #3
 80041de:	4003      	ands	r3, r0
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041e4:	4809      	ldr	r0, [pc, #36]	; (800420c <__NVIC_SetPriority+0xd8>)
 80041e6:	1dfb      	adds	r3, r7, #7
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	001c      	movs	r4, r3
 80041ec:	230f      	movs	r3, #15
 80041ee:	4023      	ands	r3, r4
 80041f0:	3b08      	subs	r3, #8
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	430a      	orrs	r2, r1
 80041f6:	3306      	adds	r3, #6
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	18c3      	adds	r3, r0, r3
 80041fc:	3304      	adds	r3, #4
 80041fe:	601a      	str	r2, [r3, #0]
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b003      	add	sp, #12
 8004206:	bd90      	pop	{r4, r7, pc}
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	1e5a      	subs	r2, r3, #1
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	045b      	lsls	r3, r3, #17
 8004220:	429a      	cmp	r2, r3
 8004222:	d301      	bcc.n	8004228 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004224:	2301      	movs	r3, #1
 8004226:	e010      	b.n	800424a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <SysTick_Config+0x44>)
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	3a01      	subs	r2, #1
 800422e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004230:	2301      	movs	r3, #1
 8004232:	425b      	negs	r3, r3
 8004234:	2103      	movs	r1, #3
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff ff7c 	bl	8004134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <SysTick_Config+0x44>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004242:	4b04      	ldr	r3, [pc, #16]	; (8004254 <SysTick_Config+0x44>)
 8004244:	2207      	movs	r2, #7
 8004246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004248:	2300      	movs	r3, #0
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b002      	add	sp, #8
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	e000e010 	.word	0xe000e010

08004258 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	210f      	movs	r1, #15
 8004264:	187b      	adds	r3, r7, r1
 8004266:	1c02      	adds	r2, r0, #0
 8004268:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	187b      	adds	r3, r7, r1
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b25b      	sxtb	r3, r3
 8004272:	0011      	movs	r1, r2
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff ff5d 	bl	8004134 <__NVIC_SetPriority>
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b004      	add	sp, #16
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	0002      	movs	r2, r0
 800428a:	1dfb      	adds	r3, r7, #7
 800428c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800428e:	1dfb      	adds	r3, r7, #7
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b25b      	sxtb	r3, r3
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff ff33 	bl	8004100 <__NVIC_EnableIRQ>
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff ffaf 	bl	8004210 <SysTick_Config>
 80042b2:	0003      	movs	r3, r0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b002      	add	sp, #8
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c4:	230f      	movs	r3, #15
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2225      	movs	r2, #37	; 0x25
 80042d0:	5c9b      	ldrb	r3, [r3, r2]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d008      	beq.n	80042ea <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2204      	movs	r2, #4
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2224      	movs	r2, #36	; 0x24
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e024      	b.n	8004334 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	210e      	movs	r1, #14
 80042f6:	438a      	bics	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2101      	movs	r1, #1
 8004306:	438a      	bics	r2, r1
 8004308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	221c      	movs	r2, #28
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2101      	movs	r1, #1
 8004318:	4091      	lsls	r1, r2
 800431a:	000a      	movs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2225      	movs	r2, #37	; 0x25
 8004322:	2101      	movs	r1, #1
 8004324:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2224      	movs	r2, #36	; 0x24
 800432a:	2100      	movs	r1, #0
 800432c:	5499      	strb	r1, [r3, r2]

    return status;
 800432e:	230f      	movs	r3, #15
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b004      	add	sp, #16
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004344:	210f      	movs	r1, #15
 8004346:	187b      	adds	r3, r7, r1
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2225      	movs	r2, #37	; 0x25
 8004350:	5c9b      	ldrb	r3, [r3, r2]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d006      	beq.n	8004366 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2204      	movs	r2, #4
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800435e:	187b      	adds	r3, r7, r1
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e02a      	b.n	80043bc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	210e      	movs	r1, #14
 8004372:	438a      	bics	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	438a      	bics	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	221c      	movs	r2, #28
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2101      	movs	r1, #1
 8004394:	4091      	lsls	r1, r2
 8004396:	000a      	movs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2225      	movs	r2, #37	; 0x25
 800439e:	2101      	movs	r1, #1
 80043a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2224      	movs	r2, #36	; 0x24
 80043a6:	2100      	movs	r1, #0
 80043a8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	0010      	movs	r0, r2
 80043ba:	4798      	blx	r3
    }
  }
  return status;
 80043bc:	230f      	movs	r3, #15
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	781b      	ldrb	r3, [r3, #0]
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80043e2:	e155      	b.n	8004690 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2101      	movs	r1, #1
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4091      	lsls	r1, r2
 80043ee:	000a      	movs	r2, r1
 80043f0:	4013      	ands	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d100      	bne.n	80043fc <HAL_GPIO_Init+0x30>
 80043fa:	e146      	b.n	800468a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2203      	movs	r2, #3
 8004402:	4013      	ands	r3, r2
 8004404:	2b01      	cmp	r3, #1
 8004406:	d005      	beq.n	8004414 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2203      	movs	r2, #3
 800440e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004410:	2b02      	cmp	r3, #2
 8004412:	d130      	bne.n	8004476 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	409a      	lsls	r2, r3
 8004422:	0013      	movs	r3, r2
 8004424:	43da      	mvns	r2, r3
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	409a      	lsls	r2, r3
 8004436:	0013      	movs	r3, r2
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800444a:	2201      	movs	r2, #1
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	409a      	lsls	r2, r3
 8004450:	0013      	movs	r3, r2
 8004452:	43da      	mvns	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	2201      	movs	r2, #1
 8004462:	401a      	ands	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	409a      	lsls	r2, r3
 8004468:	0013      	movs	r3, r2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2203      	movs	r2, #3
 800447c:	4013      	ands	r3, r2
 800447e:	2b03      	cmp	r3, #3
 8004480:	d017      	beq.n	80044b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	2203      	movs	r2, #3
 800448e:	409a      	lsls	r2, r3
 8004490:	0013      	movs	r3, r2
 8004492:	43da      	mvns	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	0013      	movs	r3, r2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2203      	movs	r2, #3
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d123      	bne.n	8004506 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	08da      	lsrs	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3208      	adds	r2, #8
 80044c6:	0092      	lsls	r2, r2, #2
 80044c8:	58d3      	ldr	r3, [r2, r3]
 80044ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2207      	movs	r2, #7
 80044d0:	4013      	ands	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	220f      	movs	r2, #15
 80044d6:	409a      	lsls	r2, r3
 80044d8:	0013      	movs	r3, r2
 80044da:	43da      	mvns	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2107      	movs	r1, #7
 80044ea:	400b      	ands	r3, r1
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	409a      	lsls	r2, r3
 80044f0:	0013      	movs	r3, r2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	08da      	lsrs	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3208      	adds	r2, #8
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	6939      	ldr	r1, [r7, #16]
 8004504:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	2203      	movs	r2, #3
 8004512:	409a      	lsls	r2, r3
 8004514:	0013      	movs	r3, r2
 8004516:	43da      	mvns	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2203      	movs	r2, #3
 8004524:	401a      	ands	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	409a      	lsls	r2, r3
 800452c:	0013      	movs	r3, r2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	23c0      	movs	r3, #192	; 0xc0
 8004540:	029b      	lsls	r3, r3, #10
 8004542:	4013      	ands	r3, r2
 8004544:	d100      	bne.n	8004548 <HAL_GPIO_Init+0x17c>
 8004546:	e0a0      	b.n	800468a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004548:	4b57      	ldr	r3, [pc, #348]	; (80046a8 <HAL_GPIO_Init+0x2dc>)
 800454a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454c:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <HAL_GPIO_Init+0x2dc>)
 800454e:	2101      	movs	r1, #1
 8004550:	430a      	orrs	r2, r1
 8004552:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004554:	4a55      	ldr	r2, [pc, #340]	; (80046ac <HAL_GPIO_Init+0x2e0>)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	3302      	adds	r3, #2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	589b      	ldr	r3, [r3, r2]
 8004560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2203      	movs	r2, #3
 8004566:	4013      	ands	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	220f      	movs	r2, #15
 800456c:	409a      	lsls	r2, r3
 800456e:	0013      	movs	r3, r2
 8004570:	43da      	mvns	r2, r3
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	23a0      	movs	r3, #160	; 0xa0
 800457c:	05db      	lsls	r3, r3, #23
 800457e:	429a      	cmp	r2, r3
 8004580:	d01f      	beq.n	80045c2 <HAL_GPIO_Init+0x1f6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a4a      	ldr	r2, [pc, #296]	; (80046b0 <HAL_GPIO_Init+0x2e4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d019      	beq.n	80045be <HAL_GPIO_Init+0x1f2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a49      	ldr	r2, [pc, #292]	; (80046b4 <HAL_GPIO_Init+0x2e8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_GPIO_Init+0x1ee>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a48      	ldr	r2, [pc, #288]	; (80046b8 <HAL_GPIO_Init+0x2ec>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00d      	beq.n	80045b6 <HAL_GPIO_Init+0x1ea>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a47      	ldr	r2, [pc, #284]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d007      	beq.n	80045b2 <HAL_GPIO_Init+0x1e6>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a46      	ldr	r2, [pc, #280]	; (80046c0 <HAL_GPIO_Init+0x2f4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d101      	bne.n	80045ae <HAL_GPIO_Init+0x1e2>
 80045aa:	2305      	movs	r3, #5
 80045ac:	e00a      	b.n	80045c4 <HAL_GPIO_Init+0x1f8>
 80045ae:	2306      	movs	r3, #6
 80045b0:	e008      	b.n	80045c4 <HAL_GPIO_Init+0x1f8>
 80045b2:	2304      	movs	r3, #4
 80045b4:	e006      	b.n	80045c4 <HAL_GPIO_Init+0x1f8>
 80045b6:	2303      	movs	r3, #3
 80045b8:	e004      	b.n	80045c4 <HAL_GPIO_Init+0x1f8>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e002      	b.n	80045c4 <HAL_GPIO_Init+0x1f8>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <HAL_GPIO_Init+0x1f8>
 80045c2:	2300      	movs	r3, #0
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	2103      	movs	r1, #3
 80045c8:	400a      	ands	r2, r1
 80045ca:	0092      	lsls	r2, r2, #2
 80045cc:	4093      	lsls	r3, r2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045d4:	4935      	ldr	r1, [pc, #212]	; (80046ac <HAL_GPIO_Init+0x2e0>)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	089b      	lsrs	r3, r3, #2
 80045da:	3302      	adds	r3, #2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e2:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	43da      	mvns	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	025b      	lsls	r3, r3, #9
 80045fa:	4013      	ands	r3, r2
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004606:	4b2f      	ldr	r3, [pc, #188]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	43da      	mvns	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	4013      	ands	r3, r2
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	43da      	mvns	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	035b      	lsls	r3, r3, #13
 800464e:	4013      	ands	r3, r2
 8004650:	d003      	beq.n	800465a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	43da      	mvns	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	039b      	lsls	r3, r3, #14
 8004678:	4013      	ands	r3, r2
 800467a:	d003      	beq.n	8004684 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_GPIO_Init+0x2f8>)
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	3301      	adds	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	40da      	lsrs	r2, r3
 8004698:	1e13      	subs	r3, r2, #0
 800469a:	d000      	beq.n	800469e <HAL_GPIO_Init+0x2d2>
 800469c:	e6a2      	b.n	80043e4 <HAL_GPIO_Init+0x18>
  }
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b006      	add	sp, #24
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40010000 	.word	0x40010000
 80046b0:	50000400 	.word	0x50000400
 80046b4:	50000800 	.word	0x50000800
 80046b8:	50000c00 	.word	0x50000c00
 80046bc:	50001000 	.word	0x50001000
 80046c0:	50001c00 	.word	0x50001c00
 80046c4:	40010400 	.word	0x40010400

080046c8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	0008      	movs	r0, r1
 80046d2:	0011      	movs	r1, r2
 80046d4:	1cbb      	adds	r3, r7, #2
 80046d6:	1c02      	adds	r2, r0, #0
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	1c7b      	adds	r3, r7, #1
 80046dc:	1c0a      	adds	r2, r1, #0
 80046de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046e0:	1c7b      	adds	r3, r7, #1
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e8:	1cbb      	adds	r3, r7, #2
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80046f0:	e003      	b.n	80046fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80046f2:	1cbb      	adds	r3, r7, #2
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	0002      	movs	r2, r0
 800470c:	1dbb      	adds	r3, r7, #6
 800470e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	1dba      	adds	r2, r7, #6
 8004716:	8812      	ldrh	r2, [r2, #0]
 8004718:	4013      	ands	r3, r2
 800471a:	d008      	beq.n	800472e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800471e:	1dba      	adds	r2, r7, #6
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004724:	1dbb      	adds	r3, r7, #6
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	0018      	movs	r0, r3
 800472a:	f000 f807 	bl	800473c <HAL_GPIO_EXTI_Callback>
  }
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	40010400 	.word	0x40010400

0800473c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	0002      	movs	r2, r0
 8004744:	1dbb      	adds	r3, r7, #6
 8004746:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b002      	add	sp, #8
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e082      	b.n	8004868 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2241      	movs	r2, #65	; 0x41
 8004766:	5c9b      	ldrb	r3, [r3, r2]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f87f 	bl	800487c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2241      	movs	r2, #65	; 0x41
 8004782:	2124      	movs	r1, #36	; 0x24
 8004784:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	438a      	bics	r2, r1
 8004794:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4934      	ldr	r1, [pc, #208]	; (8004870 <HAL_I2C_Init+0x120>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4931      	ldr	r1, [pc, #196]	; (8004874 <HAL_I2C_Init+0x124>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d108      	bne.n	80047ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2180      	movs	r1, #128	; 0x80
 80047c6:	0209      	lsls	r1, r1, #8
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	e007      	b.n	80047de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2184      	movs	r1, #132	; 0x84
 80047d8:	0209      	lsls	r1, r1, #8
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d104      	bne.n	80047f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	0112      	lsls	r2, r2, #4
 80047ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	491f      	ldr	r1, [pc, #124]	; (8004878 <HAL_I2C_Init+0x128>)
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	491a      	ldr	r1, [pc, #104]	; (8004874 <HAL_I2C_Init+0x124>)
 800480c:	400a      	ands	r2, r1
 800480e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	431a      	orrs	r2, r3
 800481a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69d9      	ldr	r1, [r3, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1a      	ldr	r2, [r3, #32]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2101      	movs	r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2241      	movs	r2, #65	; 0x41
 8004854:	2120      	movs	r1, #32
 8004856:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2242      	movs	r2, #66	; 0x42
 8004862:	2100      	movs	r1, #0
 8004864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	0018      	movs	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}
 8004870:	f0ffffff 	.word	0xf0ffffff
 8004874:	ffff7fff 	.word	0xffff7fff
 8004878:	02008000 	.word	0x02008000

0800487c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b002      	add	sp, #8
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	000c      	movs	r4, r1
 8004896:	0010      	movs	r0, r2
 8004898:	0019      	movs	r1, r3
 800489a:	230a      	movs	r3, #10
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	1c22      	adds	r2, r4, #0
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	2308      	movs	r3, #8
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	1c02      	adds	r2, r0, #0
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	1dbb      	adds	r3, r7, #6
 80048ac:	1c0a      	adds	r2, r1, #0
 80048ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2241      	movs	r2, #65	; 0x41
 80048b4:	5c9b      	ldrb	r3, [r3, r2]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d000      	beq.n	80048be <HAL_I2C_Mem_Write+0x32>
 80048bc:	e10c      	b.n	8004ad8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <HAL_I2C_Mem_Write+0x42>
 80048c4:	232c      	movs	r3, #44	; 0x2c
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2280      	movs	r2, #128	; 0x80
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0ff      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	5c9b      	ldrb	r3, [r3, r2]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_I2C_Mem_Write+0x5c>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e0f8      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	2101      	movs	r1, #1
 80048ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048f0:	f7ff fbd8 	bl	80040a4 <HAL_GetTick>
 80048f4:	0003      	movs	r3, r0
 80048f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	0219      	lsls	r1, r3, #8
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2319      	movs	r3, #25
 8004904:	2201      	movs	r2, #1
 8004906:	f000 fb17 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0e3      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2241      	movs	r2, #65	; 0x41
 8004916:	2121      	movs	r1, #33	; 0x21
 8004918:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2242      	movs	r2, #66	; 0x42
 800491e:	2140      	movs	r1, #64	; 0x40
 8004920:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	222c      	movs	r2, #44	; 0x2c
 8004932:	18ba      	adds	r2, r7, r2
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800493e:	1dbb      	adds	r3, r7, #6
 8004940:	881c      	ldrh	r4, [r3, #0]
 8004942:	2308      	movs	r3, #8
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	881a      	ldrh	r2, [r3, #0]
 8004948:	230a      	movs	r3, #10
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	8819      	ldrh	r1, [r3, #0]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	0023      	movs	r3, r4
 800495a:	f000 fa05 	bl	8004d68 <I2C_RequestMemoryWrite>
 800495e:	1e03      	subs	r3, r0, #0
 8004960:	d005      	beq.n	800496e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2240      	movs	r2, #64	; 0x40
 8004966:	2100      	movs	r1, #0
 8004968:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0b5      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	2bff      	cmp	r3, #255	; 0xff
 8004976:	d911      	bls.n	800499c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	22ff      	movs	r2, #255	; 0xff
 800497c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	b2da      	uxtb	r2, r3
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	045c      	lsls	r4, r3, #17
 8004988:	230a      	movs	r3, #10
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	8819      	ldrh	r1, [r3, #0]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	2300      	movs	r3, #0
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	0023      	movs	r3, r4
 8004996:	f000 fc03 	bl	80051a0 <I2C_TransferConfig>
 800499a:	e012      	b.n	80049c2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	049c      	lsls	r4, r3, #18
 80049b0:	230a      	movs	r3, #10
 80049b2:	18fb      	adds	r3, r7, r3
 80049b4:	8819      	ldrh	r1, [r3, #0]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	2300      	movs	r3, #0
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	0023      	movs	r3, r4
 80049be:	f000 fbef 	bl	80051a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 faf4 	bl	8004fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 80049ce:	1e03      	subs	r3, r0, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e081      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d03a      	beq.n	8004a86 <HAL_I2C_Mem_Write+0x1fa>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d136      	bne.n	8004a86 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	0013      	movs	r3, r2
 8004a22:	2200      	movs	r2, #0
 8004a24:	2180      	movs	r1, #128	; 0x80
 8004a26:	f000 fa87 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	1e03      	subs	r3, r0, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e053      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2bff      	cmp	r3, #255	; 0xff
 8004a3a:	d911      	bls.n	8004a60 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	22ff      	movs	r2, #255	; 0xff
 8004a40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	045c      	lsls	r4, r3, #17
 8004a4c:	230a      	movs	r3, #10
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	8819      	ldrh	r1, [r3, #0]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	2300      	movs	r3, #0
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	0023      	movs	r3, r4
 8004a5a:	f000 fba1 	bl	80051a0 <I2C_TransferConfig>
 8004a5e:	e012      	b.n	8004a86 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	049c      	lsls	r4, r3, #18
 8004a74:	230a      	movs	r3, #10
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	8819      	ldrh	r1, [r3, #0]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	0023      	movs	r3, r4
 8004a82:	f000 fb8d 	bl	80051a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d198      	bne.n	80049c2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 facc 	bl	8005034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a9c:	1e03      	subs	r3, r0, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e01a      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	490b      	ldr	r1, [pc, #44]	; (8004ae4 <HAL_I2C_Mem_Write+0x258>)
 8004ab8:	400a      	ands	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2241      	movs	r2, #65	; 0x41
 8004ac0:	2120      	movs	r1, #32
 8004ac2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2242      	movs	r2, #66	; 0x42
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b007      	add	sp, #28
 8004ae0:	bd90      	pop	{r4, r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	fe00e800 	.word	0xfe00e800

08004ae8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b590      	push	{r4, r7, lr}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	000c      	movs	r4, r1
 8004af2:	0010      	movs	r0, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	230a      	movs	r3, #10
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	1c22      	adds	r2, r4, #0
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	2308      	movs	r3, #8
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	1c02      	adds	r2, r0, #0
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	1dbb      	adds	r3, r7, #6
 8004b08:	1c0a      	adds	r2, r1, #0
 8004b0a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2241      	movs	r2, #65	; 0x41
 8004b10:	5c9b      	ldrb	r3, [r3, r2]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d000      	beq.n	8004b1a <HAL_I2C_Mem_Read+0x32>
 8004b18:	e110      	b.n	8004d3c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <HAL_I2C_Mem_Read+0x42>
 8004b20:	232c      	movs	r3, #44	; 0x2c
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e103      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	5c9b      	ldrb	r3, [r3, r2]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_I2C_Mem_Read+0x5c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0fc      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	2101      	movs	r1, #1
 8004b4a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b4c:	f7ff faaa 	bl	80040a4 <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	0219      	lsls	r1, r3, #8
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2319      	movs	r3, #25
 8004b60:	2201      	movs	r2, #1
 8004b62:	f000 f9e9 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004b66:	1e03      	subs	r3, r0, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0e7      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2241      	movs	r2, #65	; 0x41
 8004b72:	2122      	movs	r1, #34	; 0x22
 8004b74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2242      	movs	r2, #66	; 0x42
 8004b7a:	2140      	movs	r1, #64	; 0x40
 8004b7c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	222c      	movs	r2, #44	; 0x2c
 8004b8e:	18ba      	adds	r2, r7, r2
 8004b90:	8812      	ldrh	r2, [r2, #0]
 8004b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b9a:	1dbb      	adds	r3, r7, #6
 8004b9c:	881c      	ldrh	r4, [r3, #0]
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	230a      	movs	r3, #10
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	8819      	ldrh	r1, [r3, #0]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	0023      	movs	r3, r4
 8004bb6:	f000 f93b 	bl	8004e30 <I2C_RequestMemoryRead>
 8004bba:	1e03      	subs	r3, r0, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2240      	movs	r2, #64	; 0x40
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e0b9      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2bff      	cmp	r3, #255	; 0xff
 8004bd2:	d911      	bls.n	8004bf8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	045c      	lsls	r4, r3, #17
 8004be4:	230a      	movs	r3, #10
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	8819      	ldrh	r1, [r3, #0]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	4b56      	ldr	r3, [pc, #344]	; (8004d48 <HAL_I2C_Mem_Read+0x260>)
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	0023      	movs	r3, r4
 8004bf2:	f000 fad5 	bl	80051a0 <I2C_TransferConfig>
 8004bf6:	e012      	b.n	8004c1e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	049c      	lsls	r4, r3, #18
 8004c0c:	230a      	movs	r3, #10
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	8819      	ldrh	r1, [r3, #0]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	4b4c      	ldr	r3, [pc, #304]	; (8004d48 <HAL_I2C_Mem_Read+0x260>)
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	0023      	movs	r3, r4
 8004c1a:	f000 fac1 	bl	80051a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	0013      	movs	r3, r2
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	f000 f984 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004c30:	1e03      	subs	r3, r0, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e082      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03a      	beq.n	8004cea <HAL_I2C_Mem_Read+0x202>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d136      	bne.n	8004cea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	0013      	movs	r3, r2
 8004c86:	2200      	movs	r2, #0
 8004c88:	2180      	movs	r1, #128	; 0x80
 8004c8a:	f000 f955 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004c8e:	1e03      	subs	r3, r0, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e053      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2bff      	cmp	r3, #255	; 0xff
 8004c9e:	d911      	bls.n	8004cc4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	22ff      	movs	r2, #255	; 0xff
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	045c      	lsls	r4, r3, #17
 8004cb0:	230a      	movs	r3, #10
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	8819      	ldrh	r1, [r3, #0]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	0023      	movs	r3, r4
 8004cbe:	f000 fa6f 	bl	80051a0 <I2C_TransferConfig>
 8004cc2:	e012      	b.n	8004cea <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	049c      	lsls	r4, r3, #18
 8004cd8:	230a      	movs	r3, #10
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	8819      	ldrh	r1, [r3, #0]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	0023      	movs	r3, r4
 8004ce6:	f000 fa5b 	bl	80051a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d194      	bne.n	8004c1e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 f99a 	bl	8005034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d00:	1e03      	subs	r3, r0, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e01a      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	490c      	ldr	r1, [pc, #48]	; (8004d4c <HAL_I2C_Mem_Read+0x264>)
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2241      	movs	r2, #65	; 0x41
 8004d24:	2120      	movs	r1, #32
 8004d26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2242      	movs	r2, #66	; 0x42
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	2100      	movs	r1, #0
 8004d36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	e000      	b.n	8004d3e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
  }
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b007      	add	sp, #28
 8004d44:	bd90      	pop	{r4, r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	80002400 	.word	0x80002400
 8004d4c:	fe00e800 	.word	0xfe00e800

08004d50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2241      	movs	r2, #65	; 0x41
 8004d5c:	5c9b      	ldrb	r3, [r3, r2]
 8004d5e:	b2db      	uxtb	r3, r3
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d68:	b5b0      	push	{r4, r5, r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	000c      	movs	r4, r1
 8004d72:	0010      	movs	r0, r2
 8004d74:	0019      	movs	r1, r3
 8004d76:	250a      	movs	r5, #10
 8004d78:	197b      	adds	r3, r7, r5
 8004d7a:	1c22      	adds	r2, r4, #0
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	2308      	movs	r3, #8
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	1c02      	adds	r2, r0, #0
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	1dbb      	adds	r3, r7, #6
 8004d88:	1c0a      	adds	r2, r1, #0
 8004d8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d8c:	1dbb      	adds	r3, r7, #6
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	045c      	lsls	r4, r3, #17
 8004d96:	197b      	adds	r3, r7, r5
 8004d98:	8819      	ldrh	r1, [r3, #0]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <I2C_RequestMemoryWrite+0xc4>)
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	0023      	movs	r3, r4
 8004da2:	f000 f9fd 	bl	80051a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	6a39      	ldr	r1, [r7, #32]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 f902 	bl	8004fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004db2:	1e03      	subs	r3, r0, #0
 8004db4:	d001      	beq.n	8004dba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e033      	b.n	8004e22 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dba:	1dbb      	adds	r3, r7, #6
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d107      	bne.n	8004dd2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd0:	e019      	b.n	8004e06 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de6:	6a39      	ldr	r1, [r7, #32]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 f8e3 	bl	8004fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e014      	b.n	8004e22 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004df8:	2308      	movs	r3, #8
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e06:	6a3a      	ldr	r2, [r7, #32]
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	0013      	movs	r3, r2
 8004e10:	2200      	movs	r2, #0
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	f000 f890 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d001      	beq.n	8004e20 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b004      	add	sp, #16
 8004e28:	bdb0      	pop	{r4, r5, r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	80002000 	.word	0x80002000

08004e30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e30:	b5b0      	push	{r4, r5, r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	000c      	movs	r4, r1
 8004e3a:	0010      	movs	r0, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	250a      	movs	r5, #10
 8004e40:	197b      	adds	r3, r7, r5
 8004e42:	1c22      	adds	r2, r4, #0
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	2308      	movs	r3, #8
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	1c02      	adds	r2, r0, #0
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	1dbb      	adds	r3, r7, #6
 8004e50:	1c0a      	adds	r2, r1, #0
 8004e52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e54:	1dbb      	adds	r3, r7, #6
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	197b      	adds	r3, r7, r5
 8004e5c:	8819      	ldrh	r1, [r3, #0]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <I2C_RequestMemoryRead+0xc0>)
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	f000 f99b 	bl	80051a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6c:	6a39      	ldr	r1, [r7, #32]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 f8a0 	bl	8004fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e76:	1e03      	subs	r3, r0, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e033      	b.n	8004ee6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e7e:	1dbb      	adds	r3, r7, #6
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e86:	2308      	movs	r3, #8
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28
 8004e94:	e019      	b.n	8004eca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e96:	2308      	movs	r3, #8
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	6a39      	ldr	r1, [r7, #32]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f881 	bl	8004fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eb4:	1e03      	subs	r3, r0, #0
 8004eb6:	d001      	beq.n	8004ebc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e014      	b.n	8004ee6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	18fb      	adds	r3, r7, r3
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a3a      	ldr	r2, [r7, #32]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	0013      	movs	r3, r2
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2140      	movs	r1, #64	; 0x40
 8004ed8:	f000 f82e 	bl	8004f38 <I2C_WaitOnFlagUntilTimeout>
 8004edc:	1e03      	subs	r3, r0, #0
 8004ede:	d001      	beq.n	8004ee4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bdb0      	pop	{r4, r5, r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	80002000 	.word	0x80002000

08004ef4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d103      	bne.n	8004f12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d007      	beq.n	8004f30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	619a      	str	r2, [r3, #24]
  }
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	1dfb      	adds	r3, r7, #7
 8004f46:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f48:	e021      	b.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	d01e      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f50:	f7ff f8a8 	bl	80040a4 <HAL_GetTick>
 8004f54:	0002      	movs	r2, r0
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d113      	bne.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2241      	movs	r2, #65	; 0x41
 8004f76:	2120      	movs	r1, #32
 8004f78:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2242      	movs	r2, #66	; 0x42
 8004f7e:	2100      	movs	r1, #0
 8004f80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2240      	movs	r2, #64	; 0x40
 8004f86:	2100      	movs	r1, #0
 8004f88:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e00f      	b.n	8004fae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	4013      	ands	r3, r2
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	425a      	negs	r2, r3
 8004f9e:	4153      	adcs	r3, r2
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	1dfb      	adds	r3, r7, #7
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d0ce      	beq.n	8004f4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b004      	add	sp, #16
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fc2:	e02b      	b.n	800501c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f86e 	bl	80050ac <I2C_IsAcknowledgeFailed>
 8004fd0:	1e03      	subs	r3, r0, #0
 8004fd2:	d001      	beq.n	8004fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e029      	b.n	800502c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	d01e      	beq.n	800501c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7ff f861 	bl	80040a4 <HAL_GetTick>
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d113      	bne.n	800501c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2241      	movs	r2, #65	; 0x41
 8005004:	2120      	movs	r1, #32
 8005006:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2242      	movs	r2, #66	; 0x42
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	2100      	movs	r1, #0
 8005016:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e007      	b.n	800502c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	2202      	movs	r2, #2
 8005024:	4013      	ands	r3, r2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d1cc      	bne.n	8004fc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b004      	add	sp, #16
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005040:	e028      	b.n	8005094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	0018      	movs	r0, r3
 800504a:	f000 f82f 	bl	80050ac <I2C_IsAcknowledgeFailed>
 800504e:	1e03      	subs	r3, r0, #0
 8005050:	d001      	beq.n	8005056 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e026      	b.n	80050a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005056:	f7ff f825 	bl	80040a4 <HAL_GetTick>
 800505a:	0002      	movs	r2, r0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d302      	bcc.n	800506c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d113      	bne.n	8005094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	2220      	movs	r2, #32
 8005072:	431a      	orrs	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2241      	movs	r2, #65	; 0x41
 800507c:	2120      	movs	r1, #32
 800507e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2242      	movs	r2, #66	; 0x42
 8005084:	2100      	movs	r1, #0
 8005086:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2240      	movs	r2, #64	; 0x40
 800508c:	2100      	movs	r1, #0
 800508e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e007      	b.n	80050a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2220      	movs	r2, #32
 800509c:	4013      	ands	r3, r2
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d1cf      	bne.n	8005042 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b004      	add	sp, #16
 80050aa:	bd80      	pop	{r7, pc}

080050ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2210      	movs	r2, #16
 80050c0:	4013      	ands	r3, r2
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d164      	bne.n	8005190 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	049b      	lsls	r3, r3, #18
 80050d0:	401a      	ands	r2, r3
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	049b      	lsls	r3, r3, #18
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d02b      	beq.n	8005132 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2180      	movs	r1, #128	; 0x80
 80050e6:	01c9      	lsls	r1, r1, #7
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ec:	e021      	b.n	8005132 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3301      	adds	r3, #1
 80050f2:	d01e      	beq.n	8005132 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f4:	f7fe ffd6 	bl	80040a4 <HAL_GetTick>
 80050f8:	0002      	movs	r2, r0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	d302      	bcc.n	800510a <I2C_IsAcknowledgeFailed+0x5e>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d113      	bne.n	8005132 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	2220      	movs	r2, #32
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2241      	movs	r2, #65	; 0x41
 800511a:	2120      	movs	r1, #32
 800511c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2242      	movs	r2, #66	; 0x42
 8005122:	2100      	movs	r1, #0
 8005124:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2240      	movs	r2, #64	; 0x40
 800512a:	2100      	movs	r1, #0
 800512c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e02f      	b.n	8005192 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	2220      	movs	r2, #32
 800513a:	4013      	ands	r3, r2
 800513c:	2b20      	cmp	r3, #32
 800513e:	d1d6      	bne.n	80050ee <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2210      	movs	r2, #16
 8005146:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2220      	movs	r2, #32
 800514e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	0018      	movs	r0, r3
 8005154:	f7ff fece 	bl	8004ef4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	490e      	ldr	r1, [pc, #56]	; (800519c <I2C_IsAcknowledgeFailed+0xf0>)
 8005164:	400a      	ands	r2, r1
 8005166:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	2204      	movs	r2, #4
 800516e:	431a      	orrs	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2241      	movs	r2, #65	; 0x41
 8005178:	2120      	movs	r1, #32
 800517a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2242      	movs	r2, #66	; 0x42
 8005180:	2100      	movs	r1, #0
 8005182:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2240      	movs	r2, #64	; 0x40
 8005188:	2100      	movs	r1, #0
 800518a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b004      	add	sp, #16
 8005198:	bd80      	pop	{r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	fe00e800 	.word	0xfe00e800

080051a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	0008      	movs	r0, r1
 80051aa:	0011      	movs	r1, r2
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	240a      	movs	r4, #10
 80051b0:	193b      	adds	r3, r7, r4
 80051b2:	1c02      	adds	r2, r0, #0
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	2009      	movs	r0, #9
 80051b8:	183b      	adds	r3, r7, r0
 80051ba:	1c0a      	adds	r2, r1, #0
 80051bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	0d51      	lsrs	r1, r2, #21
 80051c8:	2280      	movs	r2, #128	; 0x80
 80051ca:	00d2      	lsls	r2, r2, #3
 80051cc:	400a      	ands	r2, r1
 80051ce:	490e      	ldr	r1, [pc, #56]	; (8005208 <I2C_TransferConfig+0x68>)
 80051d0:	430a      	orrs	r2, r1
 80051d2:	43d2      	mvns	r2, r2
 80051d4:	401a      	ands	r2, r3
 80051d6:	0011      	movs	r1, r2
 80051d8:	193b      	adds	r3, r7, r4
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	059b      	lsls	r3, r3, #22
 80051de:	0d9a      	lsrs	r2, r3, #22
 80051e0:	183b      	adds	r3, r7, r0
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	0418      	lsls	r0, r3, #16
 80051e6:	23ff      	movs	r3, #255	; 0xff
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	4003      	ands	r3, r0
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	46bd      	mov	sp, r7
 8005202:	b005      	add	sp, #20
 8005204:	bd90      	pop	{r4, r7, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	03ff63ff 	.word	0x03ff63ff

0800520c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2241      	movs	r2, #65	; 0x41
 800521a:	5c9b      	ldrb	r3, [r3, r2]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	d138      	bne.n	8005294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2240      	movs	r2, #64	; 0x40
 8005226:	5c9b      	ldrb	r3, [r3, r2]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800522c:	2302      	movs	r3, #2
 800522e:	e032      	b.n	8005296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	2101      	movs	r1, #1
 8005236:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2241      	movs	r2, #65	; 0x41
 800523c:	2124      	movs	r1, #36	; 0x24
 800523e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2101      	movs	r1, #1
 800524c:	438a      	bics	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4911      	ldr	r1, [pc, #68]	; (80052a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800525c:	400a      	ands	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6819      	ldr	r1, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2101      	movs	r1, #1
 800527c:	430a      	orrs	r2, r1
 800527e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2241      	movs	r2, #65	; 0x41
 8005284:	2120      	movs	r1, #32
 8005286:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2240      	movs	r2, #64	; 0x40
 800528c:	2100      	movs	r1, #0
 800528e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e000      	b.n	8005296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005294:	2302      	movs	r3, #2
  }
}
 8005296:	0018      	movs	r0, r3
 8005298:	46bd      	mov	sp, r7
 800529a:	b002      	add	sp, #8
 800529c:	bd80      	pop	{r7, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	ffffefff 	.word	0xffffefff

080052a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2241      	movs	r2, #65	; 0x41
 80052b2:	5c9b      	ldrb	r3, [r3, r2]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d139      	bne.n	800532e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2240      	movs	r2, #64	; 0x40
 80052be:	5c9b      	ldrb	r3, [r3, r2]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e033      	b.n	8005330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2240      	movs	r2, #64	; 0x40
 80052cc:	2101      	movs	r1, #1
 80052ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2241      	movs	r2, #65	; 0x41
 80052d4:	2124      	movs	r1, #36	; 0x24
 80052d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2101      	movs	r1, #1
 80052e4:	438a      	bics	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a11      	ldr	r2, [pc, #68]	; (8005338 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2101      	movs	r1, #1
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2241      	movs	r2, #65	; 0x41
 800531e:	2120      	movs	r1, #32
 8005320:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2240      	movs	r2, #64	; 0x40
 8005326:	2100      	movs	r1, #0
 8005328:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	e000      	b.n	8005330 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800532e:	2302      	movs	r3, #2
  }
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b004      	add	sp, #16
 8005336:	bd80      	pop	{r7, pc}
 8005338:	fffff0ff 	.word	0xfffff0ff

0800533c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800533c:	b5b0      	push	{r4, r5, r7, lr}
 800533e:	b08a      	sub	sp, #40	; 0x28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f000 fbbf 	bl	8005ace <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005350:	4bc9      	ldr	r3, [pc, #804]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	220c      	movs	r2, #12
 8005356:	4013      	ands	r3, r2
 8005358:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800535a:	4bc7      	ldr	r3, [pc, #796]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	2380      	movs	r3, #128	; 0x80
 8005360:	025b      	lsls	r3, r3, #9
 8005362:	4013      	ands	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	4013      	ands	r3, r2
 800536e:	d100      	bne.n	8005372 <HAL_RCC_OscConfig+0x36>
 8005370:	e07e      	b.n	8005470 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d007      	beq.n	8005388 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b0c      	cmp	r3, #12
 800537c:	d112      	bne.n	80053a4 <HAL_RCC_OscConfig+0x68>
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	025b      	lsls	r3, r3, #9
 8005384:	429a      	cmp	r2, r3
 8005386:	d10d      	bne.n	80053a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005388:	4bbb      	ldr	r3, [pc, #748]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	029b      	lsls	r3, r3, #10
 8005390:	4013      	ands	r3, r2
 8005392:	d100      	bne.n	8005396 <HAL_RCC_OscConfig+0x5a>
 8005394:	e06b      	b.n	800546e <HAL_RCC_OscConfig+0x132>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d167      	bne.n	800546e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f000 fb95 	bl	8005ace <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	025b      	lsls	r3, r3, #9
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d107      	bne.n	80053c0 <HAL_RCC_OscConfig+0x84>
 80053b0:	4bb1      	ldr	r3, [pc, #708]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4bb0      	ldr	r3, [pc, #704]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053b6:	2180      	movs	r1, #128	; 0x80
 80053b8:	0249      	lsls	r1, r1, #9
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e027      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	23a0      	movs	r3, #160	; 0xa0
 80053c6:	02db      	lsls	r3, r3, #11
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d10e      	bne.n	80053ea <HAL_RCC_OscConfig+0xae>
 80053cc:	4baa      	ldr	r3, [pc, #680]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4ba9      	ldr	r3, [pc, #676]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	02c9      	lsls	r1, r1, #11
 80053d6:	430a      	orrs	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	4ba7      	ldr	r3, [pc, #668]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4ba6      	ldr	r3, [pc, #664]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053e0:	2180      	movs	r1, #128	; 0x80
 80053e2:	0249      	lsls	r1, r1, #9
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e012      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053ea:	4ba3      	ldr	r3, [pc, #652]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4ba2      	ldr	r3, [pc, #648]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053f0:	49a2      	ldr	r1, [pc, #648]	; (800567c <HAL_RCC_OscConfig+0x340>)
 80053f2:	400a      	ands	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	4ba0      	ldr	r3, [pc, #640]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	025b      	lsls	r3, r3, #9
 80053fe:	4013      	ands	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4b9c      	ldr	r3, [pc, #624]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	4b9b      	ldr	r3, [pc, #620]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 800540a:	499d      	ldr	r1, [pc, #628]	; (8005680 <HAL_RCC_OscConfig+0x344>)
 800540c:	400a      	ands	r2, r1
 800540e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fe fe44 	bl	80040a4 <HAL_GetTick>
 800541c:	0003      	movs	r3, r0
 800541e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005420:	e009      	b.n	8005436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005422:	f7fe fe3f 	bl	80040a4 <HAL_GetTick>
 8005426:	0002      	movs	r2, r0
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b64      	cmp	r3, #100	; 0x64
 800542e:	d902      	bls.n	8005436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	f000 fb4c 	bl	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005436:	4b90      	ldr	r3, [pc, #576]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	029b      	lsls	r3, r3, #10
 800543e:	4013      	ands	r3, r2
 8005440:	d0ef      	beq.n	8005422 <HAL_RCC_OscConfig+0xe6>
 8005442:	e015      	b.n	8005470 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fe fe2e 	bl	80040a4 <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800544e:	f7fe fe29 	bl	80040a4 <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b64      	cmp	r3, #100	; 0x64
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e336      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005460:	4b85      	ldr	r3, [pc, #532]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	4013      	ands	r3, r2
 800546a:	d1f0      	bne.n	800544e <HAL_RCC_OscConfig+0x112>
 800546c:	e000      	b.n	8005470 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800546e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2202      	movs	r2, #2
 8005476:	4013      	ands	r3, r2
 8005478:	d100      	bne.n	800547c <HAL_RCC_OscConfig+0x140>
 800547a:	e099      	b.n	80055b0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	2220      	movs	r2, #32
 8005486:	4013      	ands	r3, r2
 8005488:	d009      	beq.n	800549e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800548a:	4b7b      	ldr	r3, [pc, #492]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b7a      	ldr	r3, [pc, #488]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005490:	2120      	movs	r1, #32
 8005492:	430a      	orrs	r2, r1
 8005494:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	2220      	movs	r2, #32
 800549a:	4393      	bics	r3, r2
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d13e      	bne.n	8005528 <HAL_RCC_OscConfig+0x1ec>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d13b      	bne.n	8005528 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80054b0:	4b71      	ldr	r3, [pc, #452]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2204      	movs	r2, #4
 80054b6:	4013      	ands	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_RCC_OscConfig+0x188>
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e304      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	4b6c      	ldr	r3, [pc, #432]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a6e      	ldr	r2, [pc, #440]	; (8005684 <HAL_RCC_OscConfig+0x348>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	4b68      	ldr	r3, [pc, #416]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80054da:	4b67      	ldr	r3, [pc, #412]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2209      	movs	r2, #9
 80054e0:	4393      	bics	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	4b64      	ldr	r3, [pc, #400]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	430a      	orrs	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054ec:	f000 fc42 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 80054f0:	0001      	movs	r1, r0
 80054f2:	4b61      	ldr	r3, [pc, #388]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	220f      	movs	r2, #15
 80054fa:	4013      	ands	r3, r2
 80054fc:	4a62      	ldr	r2, [pc, #392]	; (8005688 <HAL_RCC_OscConfig+0x34c>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	000a      	movs	r2, r1
 8005502:	40da      	lsrs	r2, r3
 8005504:	4b61      	ldr	r3, [pc, #388]	; (800568c <HAL_RCC_OscConfig+0x350>)
 8005506:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005508:	4b61      	ldr	r3, [pc, #388]	; (8005690 <HAL_RCC_OscConfig+0x354>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2513      	movs	r5, #19
 800550e:	197c      	adds	r4, r7, r5
 8005510:	0018      	movs	r0, r3
 8005512:	f7fe fd81 	bl	8004018 <HAL_InitTick>
 8005516:	0003      	movs	r3, r0
 8005518:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800551a:	197b      	adds	r3, r7, r5
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d046      	beq.n	80055b0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005522:	197b      	adds	r3, r7, r5
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	e2d2      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d027      	beq.n	800557e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800552e:	4b52      	ldr	r3, [pc, #328]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2209      	movs	r2, #9
 8005534:	4393      	bics	r3, r2
 8005536:	0019      	movs	r1, r3
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 800553a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553c:	430a      	orrs	r2, r1
 800553e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fe fdb0 	bl	80040a4 <HAL_GetTick>
 8005544:	0003      	movs	r3, r0
 8005546:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554a:	f7fe fdab 	bl	80040a4 <HAL_GetTick>
 800554e:	0002      	movs	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e2b8      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800555c:	4b46      	ldr	r3, [pc, #280]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2204      	movs	r2, #4
 8005562:	4013      	ands	r3, r2
 8005564:	d0f1      	beq.n	800554a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005566:	4b44      	ldr	r3, [pc, #272]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	4a46      	ldr	r2, [pc, #280]	; (8005684 <HAL_RCC_OscConfig+0x348>)
 800556c:	4013      	ands	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	021a      	lsls	r2, r3, #8
 8005576:	4b40      	ldr	r3, [pc, #256]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	e018      	b.n	80055b0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557e:	4b3e      	ldr	r3, [pc, #248]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b3d      	ldr	r3, [pc, #244]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005584:	2101      	movs	r1, #1
 8005586:	438a      	bics	r2, r1
 8005588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558a:	f7fe fd8b 	bl	80040a4 <HAL_GetTick>
 800558e:	0003      	movs	r3, r0
 8005590:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005594:	f7fe fd86 	bl	80040a4 <HAL_GetTick>
 8005598:	0002      	movs	r2, r0
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e293      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055a6:	4b34      	ldr	r3, [pc, #208]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2204      	movs	r2, #4
 80055ac:	4013      	ands	r3, r2
 80055ae:	d1f1      	bne.n	8005594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2210      	movs	r2, #16
 80055b6:	4013      	ands	r3, r2
 80055b8:	d100      	bne.n	80055bc <HAL_RCC_OscConfig+0x280>
 80055ba:	e0a2      	b.n	8005702 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d140      	bne.n	8005644 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055c2:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4013      	ands	r3, r2
 80055cc:	d005      	beq.n	80055da <HAL_RCC_OscConfig+0x29e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e279      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055da:	4b27      	ldr	r3, [pc, #156]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4a2d      	ldr	r2, [pc, #180]	; (8005694 <HAL_RCC_OscConfig+0x358>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	0019      	movs	r1, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055e8:	4b23      	ldr	r3, [pc, #140]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ee:	4b22      	ldr	r3, [pc, #136]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	0a19      	lsrs	r1, r3, #8
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	061a      	lsls	r2, r3, #24
 80055fc:	4b1e      	ldr	r3, [pc, #120]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	0b5b      	lsrs	r3, r3, #13
 8005608:	3301      	adds	r3, #1
 800560a:	2280      	movs	r2, #128	; 0x80
 800560c:	0212      	lsls	r2, r2, #8
 800560e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005610:	4b19      	ldr	r3, [pc, #100]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	210f      	movs	r1, #15
 8005618:	400b      	ands	r3, r1
 800561a:	491b      	ldr	r1, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x34c>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <HAL_RCC_OscConfig+0x350>)
 8005622:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005624:	4b1a      	ldr	r3, [pc, #104]	; (8005690 <HAL_RCC_OscConfig+0x354>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2513      	movs	r5, #19
 800562a:	197c      	adds	r4, r7, r5
 800562c:	0018      	movs	r0, r3
 800562e:	f7fe fcf3 	bl	8004018 <HAL_InitTick>
 8005632:	0003      	movs	r3, r0
 8005634:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005636:	197b      	adds	r3, r7, r5
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d061      	beq.n	8005702 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800563e:	197b      	adds	r3, r7, r5
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	e244      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d040      	beq.n	80056ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4b09      	ldr	r3, [pc, #36]	; (8005678 <HAL_RCC_OscConfig+0x33c>)
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	0049      	lsls	r1, r1, #1
 8005656:	430a      	orrs	r2, r1
 8005658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565a:	f7fe fd23 	bl	80040a4 <HAL_GetTick>
 800565e:	0003      	movs	r3, r0
 8005660:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005662:	e019      	b.n	8005698 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005664:	f7fe fd1e 	bl	80040a4 <HAL_GetTick>
 8005668:	0002      	movs	r2, r0
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d912      	bls.n	8005698 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e22b      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	40021000 	.word	0x40021000
 800567c:	fffeffff 	.word	0xfffeffff
 8005680:	fffbffff 	.word	0xfffbffff
 8005684:	ffffe0ff 	.word	0xffffe0ff
 8005688:	0800b060 	.word	0x0800b060
 800568c:	20000000 	.word	0x20000000
 8005690:	20000004 	.word	0x20000004
 8005694:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005698:	4bca      	ldr	r3, [pc, #808]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	2380      	movs	r3, #128	; 0x80
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4013      	ands	r3, r2
 80056a2:	d0df      	beq.n	8005664 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056a4:	4bc7      	ldr	r3, [pc, #796]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4ac7      	ldr	r2, [pc, #796]	; (80059c8 <HAL_RCC_OscConfig+0x68c>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	0019      	movs	r1, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b2:	4bc4      	ldr	r3, [pc, #784]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056b8:	4bc2      	ldr	r3, [pc, #776]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	0a19      	lsrs	r1, r3, #8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	061a      	lsls	r2, r3, #24
 80056c6:	4bbf      	ldr	r3, [pc, #764]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
 80056cc:	e019      	b.n	8005702 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056ce:	4bbd      	ldr	r3, [pc, #756]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4bbc      	ldr	r3, [pc, #752]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80056d4:	49bd      	ldr	r1, [pc, #756]	; (80059cc <HAL_RCC_OscConfig+0x690>)
 80056d6:	400a      	ands	r2, r1
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fe fce3 	bl	80040a4 <HAL_GetTick>
 80056de:	0003      	movs	r3, r0
 80056e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056e4:	f7fe fcde 	bl	80040a4 <HAL_GetTick>
 80056e8:	0002      	movs	r2, r0
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e1eb      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80056f6:	4bb3      	ldr	r3, [pc, #716]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2208      	movs	r2, #8
 8005708:	4013      	ands	r3, r2
 800570a:	d036      	beq.n	800577a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005714:	4bab      	ldr	r3, [pc, #684]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005718:	4baa      	ldr	r3, [pc, #680]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800571a:	2101      	movs	r1, #1
 800571c:	430a      	orrs	r2, r1
 800571e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005720:	f7fe fcc0 	bl	80040a4 <HAL_GetTick>
 8005724:	0003      	movs	r3, r0
 8005726:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800572a:	f7fe fcbb 	bl	80040a4 <HAL_GetTick>
 800572e:	0002      	movs	r2, r0
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e1c8      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800573c:	4ba1      	ldr	r3, [pc, #644]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800573e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005740:	2202      	movs	r2, #2
 8005742:	4013      	ands	r3, r2
 8005744:	d0f1      	beq.n	800572a <HAL_RCC_OscConfig+0x3ee>
 8005746:	e018      	b.n	800577a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005748:	4b9e      	ldr	r3, [pc, #632]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800574a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800574c:	4b9d      	ldr	r3, [pc, #628]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800574e:	2101      	movs	r1, #1
 8005750:	438a      	bics	r2, r1
 8005752:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005754:	f7fe fca6 	bl	80040a4 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800575e:	f7fe fca1 	bl	80040a4 <HAL_GetTick>
 8005762:	0002      	movs	r2, r0
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e1ae      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005770:	4b94      	ldr	r3, [pc, #592]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005774:	2202      	movs	r2, #2
 8005776:	4013      	ands	r3, r2
 8005778:	d1f1      	bne.n	800575e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2204      	movs	r2, #4
 8005780:	4013      	ands	r3, r2
 8005782:	d100      	bne.n	8005786 <HAL_RCC_OscConfig+0x44a>
 8005784:	e0ae      	b.n	80058e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005786:	2023      	movs	r0, #35	; 0x23
 8005788:	183b      	adds	r3, r7, r0
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578e:	4b8d      	ldr	r3, [pc, #564]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	055b      	lsls	r3, r3, #21
 8005796:	4013      	ands	r3, r2
 8005798:	d109      	bne.n	80057ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800579a:	4b8a      	ldr	r3, [pc, #552]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800579c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579e:	4b89      	ldr	r3, [pc, #548]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	0549      	lsls	r1, r1, #21
 80057a4:	430a      	orrs	r2, r1
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80057a8:	183b      	adds	r3, r7, r0
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ae:	4b88      	ldr	r3, [pc, #544]	; (80059d0 <HAL_RCC_OscConfig+0x694>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	2380      	movs	r3, #128	; 0x80
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4013      	ands	r3, r2
 80057b8:	d11a      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ba:	4b85      	ldr	r3, [pc, #532]	; (80059d0 <HAL_RCC_OscConfig+0x694>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b84      	ldr	r3, [pc, #528]	; (80059d0 <HAL_RCC_OscConfig+0x694>)
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	0049      	lsls	r1, r1, #1
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c8:	f7fe fc6c 	bl	80040a4 <HAL_GetTick>
 80057cc:	0003      	movs	r3, r0
 80057ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d2:	f7fe fc67 	bl	80040a4 <HAL_GetTick>
 80057d6:	0002      	movs	r2, r0
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b64      	cmp	r3, #100	; 0x64
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e174      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	4b7a      	ldr	r3, [pc, #488]	; (80059d0 <HAL_RCC_OscConfig+0x694>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4013      	ands	r3, r2
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d107      	bne.n	800580c <HAL_RCC_OscConfig+0x4d0>
 80057fc:	4b71      	ldr	r3, [pc, #452]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80057fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005800:	4b70      	ldr	r3, [pc, #448]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	0049      	lsls	r1, r1, #1
 8005806:	430a      	orrs	r2, r1
 8005808:	651a      	str	r2, [r3, #80]	; 0x50
 800580a:	e031      	b.n	8005870 <HAL_RCC_OscConfig+0x534>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10c      	bne.n	800582e <HAL_RCC_OscConfig+0x4f2>
 8005814:	4b6b      	ldr	r3, [pc, #428]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005818:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800581a:	496c      	ldr	r1, [pc, #432]	; (80059cc <HAL_RCC_OscConfig+0x690>)
 800581c:	400a      	ands	r2, r1
 800581e:	651a      	str	r2, [r3, #80]	; 0x50
 8005820:	4b68      	ldr	r3, [pc, #416]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005824:	4b67      	ldr	r3, [pc, #412]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005826:	496b      	ldr	r1, [pc, #428]	; (80059d4 <HAL_RCC_OscConfig+0x698>)
 8005828:	400a      	ands	r2, r1
 800582a:	651a      	str	r2, [r3, #80]	; 0x50
 800582c:	e020      	b.n	8005870 <HAL_RCC_OscConfig+0x534>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	23a0      	movs	r3, #160	; 0xa0
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	429a      	cmp	r2, r3
 8005838:	d10e      	bne.n	8005858 <HAL_RCC_OscConfig+0x51c>
 800583a:	4b62      	ldr	r3, [pc, #392]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800583c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800583e:	4b61      	ldr	r3, [pc, #388]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005840:	2180      	movs	r1, #128	; 0x80
 8005842:	00c9      	lsls	r1, r1, #3
 8005844:	430a      	orrs	r2, r1
 8005846:	651a      	str	r2, [r3, #80]	; 0x50
 8005848:	4b5e      	ldr	r3, [pc, #376]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800584a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800584c:	4b5d      	ldr	r3, [pc, #372]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800584e:	2180      	movs	r1, #128	; 0x80
 8005850:	0049      	lsls	r1, r1, #1
 8005852:	430a      	orrs	r2, r1
 8005854:	651a      	str	r2, [r3, #80]	; 0x50
 8005856:	e00b      	b.n	8005870 <HAL_RCC_OscConfig+0x534>
 8005858:	4b5a      	ldr	r3, [pc, #360]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800585a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800585c:	4b59      	ldr	r3, [pc, #356]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800585e:	495b      	ldr	r1, [pc, #364]	; (80059cc <HAL_RCC_OscConfig+0x690>)
 8005860:	400a      	ands	r2, r1
 8005862:	651a      	str	r2, [r3, #80]	; 0x50
 8005864:	4b57      	ldr	r3, [pc, #348]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005868:	4b56      	ldr	r3, [pc, #344]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800586a:	495a      	ldr	r1, [pc, #360]	; (80059d4 <HAL_RCC_OscConfig+0x698>)
 800586c:	400a      	ands	r2, r1
 800586e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d015      	beq.n	80058a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005878:	f7fe fc14 	bl	80040a4 <HAL_GetTick>
 800587c:	0003      	movs	r3, r0
 800587e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005880:	e009      	b.n	8005896 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fe fc0f 	bl	80040a4 <HAL_GetTick>
 8005886:	0002      	movs	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	4a52      	ldr	r2, [pc, #328]	; (80059d8 <HAL_RCC_OscConfig+0x69c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e11b      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005896:	4b4b      	ldr	r3, [pc, #300]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4013      	ands	r3, r2
 80058a0:	d0ef      	beq.n	8005882 <HAL_RCC_OscConfig+0x546>
 80058a2:	e014      	b.n	80058ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a4:	f7fe fbfe 	bl	80040a4 <HAL_GetTick>
 80058a8:	0003      	movs	r3, r0
 80058aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058ac:	e009      	b.n	80058c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fe fbf9 	bl	80040a4 <HAL_GetTick>
 80058b2:	0002      	movs	r2, r0
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	4a47      	ldr	r2, [pc, #284]	; (80059d8 <HAL_RCC_OscConfig+0x69c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e105      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058c2:	4b40      	ldr	r3, [pc, #256]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80058c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4013      	ands	r3, r2
 80058cc:	d1ef      	bne.n	80058ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058ce:	2323      	movs	r3, #35	; 0x23
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d105      	bne.n	80058e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d8:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80058da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058dc:	4b39      	ldr	r3, [pc, #228]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80058de:	493f      	ldr	r1, [pc, #252]	; (80059dc <HAL_RCC_OscConfig+0x6a0>)
 80058e0:	400a      	ands	r2, r1
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2220      	movs	r2, #32
 80058ea:	4013      	ands	r3, r2
 80058ec:	d049      	beq.n	8005982 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d026      	beq.n	8005944 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80058f6:	4b33      	ldr	r3, [pc, #204]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80058fc:	2101      	movs	r1, #1
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]
 8005902:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005906:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005908:	2101      	movs	r1, #1
 800590a:	430a      	orrs	r2, r1
 800590c:	635a      	str	r2, [r3, #52]	; 0x34
 800590e:	4b34      	ldr	r3, [pc, #208]	; (80059e0 <HAL_RCC_OscConfig+0x6a4>)
 8005910:	6a1a      	ldr	r2, [r3, #32]
 8005912:	4b33      	ldr	r3, [pc, #204]	; (80059e0 <HAL_RCC_OscConfig+0x6a4>)
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	0189      	lsls	r1, r1, #6
 8005918:	430a      	orrs	r2, r1
 800591a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fe fbc2 	bl	80040a4 <HAL_GetTick>
 8005920:	0003      	movs	r3, r0
 8005922:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005926:	f7fe fbbd 	bl	80040a4 <HAL_GetTick>
 800592a:	0002      	movs	r2, r0
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e0ca      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005938:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2202      	movs	r2, #2
 800593e:	4013      	ands	r3, r2
 8005940:	d0f1      	beq.n	8005926 <HAL_RCC_OscConfig+0x5ea>
 8005942:	e01e      	b.n	8005982 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005944:	4b1f      	ldr	r3, [pc, #124]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800594a:	2101      	movs	r1, #1
 800594c:	438a      	bics	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
 8005950:	4b23      	ldr	r3, [pc, #140]	; (80059e0 <HAL_RCC_OscConfig+0x6a4>)
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <HAL_RCC_OscConfig+0x6a4>)
 8005956:	4923      	ldr	r1, [pc, #140]	; (80059e4 <HAL_RCC_OscConfig+0x6a8>)
 8005958:	400a      	ands	r2, r1
 800595a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595c:	f7fe fba2 	bl	80040a4 <HAL_GetTick>
 8005960:	0003      	movs	r3, r0
 8005962:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005966:	f7fe fb9d 	bl	80040a4 <HAL_GetTick>
 800596a:	0002      	movs	r2, r0
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e0aa      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005978:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2202      	movs	r2, #2
 800597e:	4013      	ands	r3, r2
 8005980:	d1f1      	bne.n	8005966 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d100      	bne.n	800598c <HAL_RCC_OscConfig+0x650>
 800598a:	e09f      	b.n	8005acc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d100      	bne.n	8005994 <HAL_RCC_OscConfig+0x658>
 8005992:	e078      	b.n	8005a86 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	2b02      	cmp	r3, #2
 800599a:	d159      	bne.n	8005a50 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599c:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <HAL_RCC_OscConfig+0x688>)
 80059a2:	4911      	ldr	r1, [pc, #68]	; (80059e8 <HAL_RCC_OscConfig+0x6ac>)
 80059a4:	400a      	ands	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fe fb7c 	bl	80040a4 <HAL_GetTick>
 80059ac:	0003      	movs	r3, r0
 80059ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80059b0:	e01c      	b.n	80059ec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fe fb77 	bl	80040a4 <HAL_GetTick>
 80059b6:	0002      	movs	r2, r0
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d915      	bls.n	80059ec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e084      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
 80059c4:	40021000 	.word	0x40021000
 80059c8:	ffff1fff 	.word	0xffff1fff
 80059cc:	fffffeff 	.word	0xfffffeff
 80059d0:	40007000 	.word	0x40007000
 80059d4:	fffffbff 	.word	0xfffffbff
 80059d8:	00001388 	.word	0x00001388
 80059dc:	efffffff 	.word	0xefffffff
 80059e0:	40010000 	.word	0x40010000
 80059e4:	ffffdfff 	.word	0xffffdfff
 80059e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80059ec:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	049b      	lsls	r3, r3, #18
 80059f4:	4013      	ands	r3, r2
 80059f6:	d1dc      	bne.n	80059b2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f8:	4b37      	ldr	r3, [pc, #220]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4a37      	ldr	r2, [pc, #220]	; (8005adc <HAL_RCC_OscConfig+0x7a0>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	431a      	orrs	r2, r3
 8005a12:	4b31      	ldr	r3, [pc, #196]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a18:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a1e:	2180      	movs	r1, #128	; 0x80
 8005a20:	0449      	lsls	r1, r1, #17
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fe fb3d 	bl	80040a4 <HAL_GetTick>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fe fb38 	bl	80040a4 <HAL_GetTick>
 8005a34:	0002      	movs	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e045      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005a42:	4b25      	ldr	r3, [pc, #148]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	2380      	movs	r3, #128	; 0x80
 8005a48:	049b      	lsls	r3, r3, #18
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x6f4>
 8005a4e:	e03d      	b.n	8005acc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a50:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a56:	4922      	ldr	r1, [pc, #136]	; (8005ae0 <HAL_RCC_OscConfig+0x7a4>)
 8005a58:	400a      	ands	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fe fb22 	bl	80040a4 <HAL_GetTick>
 8005a60:	0003      	movs	r3, r0
 8005a62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fe fb1d 	bl	80040a4 <HAL_GetTick>
 8005a6a:	0002      	movs	r2, r0
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e02a      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	049b      	lsls	r3, r3, #18
 8005a80:	4013      	ands	r3, r2
 8005a82:	d1f0      	bne.n	8005a66 <HAL_RCC_OscConfig+0x72a>
 8005a84:	e022      	b.n	8005acc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e01d      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <HAL_RCC_OscConfig+0x79c>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	025b      	lsls	r3, r3, #9
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	23f0      	movs	r3, #240	; 0xf0
 8005aac:	039b      	lsls	r3, r3, #14
 8005aae:	401a      	ands	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	23c0      	movs	r3, #192	; 0xc0
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	401a      	ands	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b00a      	add	sp, #40	; 0x28
 8005ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	ff02ffff 	.word	0xff02ffff
 8005ae0:	feffffff 	.word	0xfeffffff

08005ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae4:	b5b0      	push	{r4, r5, r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e128      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af8:	4b96      	ldr	r3, [pc, #600]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2201      	movs	r2, #1
 8005afe:	4013      	ands	r3, r2
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d91e      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b06:	4b93      	ldr	r3, [pc, #588]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	4393      	bics	r3, r2
 8005b0e:	0019      	movs	r1, r3
 8005b10:	4b90      	ldr	r3, [pc, #576]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b18:	f7fe fac4 	bl	80040a4 <HAL_GetTick>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b20:	e009      	b.n	8005b36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b22:	f7fe fabf 	bl	80040a4 <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	4a8a      	ldr	r2, [pc, #552]	; (8005d58 <HAL_RCC_ClockConfig+0x274>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e109      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b87      	ldr	r3, [pc, #540]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d1ee      	bne.n	8005b22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b4e:	4b83      	ldr	r3, [pc, #524]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	22f0      	movs	r2, #240	; 0xf0
 8005b54:	4393      	bics	r3, r2
 8005b56:	0019      	movs	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	4b7f      	ldr	r3, [pc, #508]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x8a>
 8005b6c:	e089      	b.n	8005c82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d107      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b76:	4b79      	ldr	r3, [pc, #484]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	029b      	lsls	r3, r3, #10
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d120      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e0e1      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b8e:	4b73      	ldr	r3, [pc, #460]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	049b      	lsls	r3, r3, #18
 8005b96:	4013      	ands	r3, r2
 8005b98:	d114      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e0d5      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d106      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ba6:	4b6d      	ldr	r3, [pc, #436]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2204      	movs	r2, #4
 8005bac:	4013      	ands	r3, r2
 8005bae:	d109      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0ca      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005bb4:	4b69      	ldr	r3, [pc, #420]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0c2      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bc4:	4b65      	ldr	r3, [pc, #404]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	4393      	bics	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	4b62      	ldr	r3, [pc, #392]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd8:	f7fe fa64 	bl	80040a4 <HAL_GetTick>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d111      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005be8:	e009      	b.n	8005bfe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bea:	f7fe fa5b 	bl	80040a4 <HAL_GetTick>
 8005bee:	0002      	movs	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	4a58      	ldr	r2, [pc, #352]	; (8005d58 <HAL_RCC_ClockConfig+0x274>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e0a5      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bfe:	4b57      	ldr	r3, [pc, #348]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	220c      	movs	r2, #12
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d1ef      	bne.n	8005bea <HAL_RCC_ClockConfig+0x106>
 8005c0a:	e03a      	b.n	8005c82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d111      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c14:	e009      	b.n	8005c2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c16:	f7fe fa45 	bl	80040a4 <HAL_GetTick>
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	4a4d      	ldr	r2, [pc, #308]	; (8005d58 <HAL_RCC_ClockConfig+0x274>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e08f      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c2a:	4b4c      	ldr	r3, [pc, #304]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	220c      	movs	r2, #12
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b0c      	cmp	r3, #12
 8005c34:	d1ef      	bne.n	8005c16 <HAL_RCC_ClockConfig+0x132>
 8005c36:	e024      	b.n	8005c82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d11b      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c40:	e009      	b.n	8005c56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c42:	f7fe fa2f 	bl	80040a4 <HAL_GetTick>
 8005c46:	0002      	movs	r2, r0
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	4a42      	ldr	r2, [pc, #264]	; (8005d58 <HAL_RCC_ClockConfig+0x274>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e079      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c56:	4b41      	ldr	r3, [pc, #260]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	220c      	movs	r2, #12
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d1ef      	bne.n	8005c42 <HAL_RCC_ClockConfig+0x15e>
 8005c62:	e00e      	b.n	8005c82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c64:	f7fe fa1e 	bl	80040a4 <HAL_GetTick>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	4a3a      	ldr	r2, [pc, #232]	; (8005d58 <HAL_RCC_ClockConfig+0x274>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e068      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c78:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	220c      	movs	r2, #12
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c82:	4b34      	ldr	r3, [pc, #208]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	4013      	ands	r3, r2
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d21e      	bcs.n	8005cce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c90:	4b30      	ldr	r3, [pc, #192]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2201      	movs	r2, #1
 8005c96:	4393      	bics	r3, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ca2:	f7fe f9ff 	bl	80040a4 <HAL_GetTick>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005caa:	e009      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cac:	f7fe f9fa 	bl	80040a4 <HAL_GetTick>
 8005cb0:	0002      	movs	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	4a28      	ldr	r2, [pc, #160]	; (8005d58 <HAL_RCC_ClockConfig+0x274>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e044      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc0:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <HAL_RCC_ClockConfig+0x270>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1ee      	bne.n	8005cac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cd8:	4b20      	ldr	r3, [pc, #128]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <HAL_RCC_ClockConfig+0x27c>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	d00a      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cf6:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <HAL_RCC_ClockConfig+0x280>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	0019      	movs	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	00da      	lsls	r2, r3, #3
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d0c:	f000 f832 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8005d10:	0001      	movs	r1, r0
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <HAL_RCC_ClockConfig+0x278>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	220f      	movs	r2, #15
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <HAL_RCC_ClockConfig+0x284>)
 8005d1e:	5cd3      	ldrb	r3, [r2, r3]
 8005d20:	000a      	movs	r2, r1
 8005d22:	40da      	lsrs	r2, r3
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <HAL_RCC_ClockConfig+0x288>)
 8005d26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d28:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <HAL_RCC_ClockConfig+0x28c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	250b      	movs	r5, #11
 8005d2e:	197c      	adds	r4, r7, r5
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7fe f971 	bl	8004018 <HAL_InitTick>
 8005d36:	0003      	movs	r3, r0
 8005d38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005d3a:	197b      	adds	r3, r7, r5
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005d42:	197b      	adds	r3, r7, r5
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	e000      	b.n	8005d4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	b004      	add	sp, #16
 8005d50:	bdb0      	pop	{r4, r5, r7, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	40022000 	.word	0x40022000
 8005d58:	00001388 	.word	0x00001388
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	fffff8ff 	.word	0xfffff8ff
 8005d64:	ffffc7ff 	.word	0xffffc7ff
 8005d68:	0800b060 	.word	0x0800b060
 8005d6c:	20000000 	.word	0x20000000
 8005d70:	20000004 	.word	0x20000004

08005d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b08e      	sub	sp, #56	; 0x38
 8005d78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005d7a:	4b4c      	ldr	r3, [pc, #304]	; (8005eac <HAL_RCC_GetSysClockFreq+0x138>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d82:	230c      	movs	r3, #12
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d014      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0x40>
 8005d8a:	d900      	bls.n	8005d8e <HAL_RCC_GetSysClockFreq+0x1a>
 8005d8c:	e07b      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0x112>
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d002      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x24>
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d00b      	beq.n	8005dae <HAL_RCC_GetSysClockFreq+0x3a>
 8005d96:	e076      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005d98:	4b44      	ldr	r3, [pc, #272]	; (8005eac <HAL_RCC_GetSysClockFreq+0x138>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d002      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005da2:	4b43      	ldr	r3, [pc, #268]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005da4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005da6:	e07c      	b.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005da8:	4b42      	ldr	r3, [pc, #264]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005dac:	e079      	b.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dae:	4b42      	ldr	r3, [pc, #264]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005db0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005db2:	e076      	b.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	0c9a      	lsrs	r2, r3, #18
 8005db8:	230f      	movs	r3, #15
 8005dba:	401a      	ands	r2, r3
 8005dbc:	4b3f      	ldr	r3, [pc, #252]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x148>)
 8005dbe:	5c9b      	ldrb	r3, [r3, r2]
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	0d9a      	lsrs	r2, r3, #22
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	4013      	ands	r3, r2
 8005dca:	3301      	adds	r3, #1
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dce:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCC_GetSysClockFreq+0x138>)
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	025b      	lsls	r3, r3, #9
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d01a      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	2300      	movs	r3, #0
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	4a35      	ldr	r2, [pc, #212]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	69b8      	ldr	r0, [r7, #24]
 8005de8:	69f9      	ldr	r1, [r7, #28]
 8005dea:	f7fa fbb7 	bl	800055c <__aeabi_lmul>
 8005dee:	0002      	movs	r2, r0
 8005df0:	000b      	movs	r3, r1
 8005df2:	0010      	movs	r0, r2
 8005df4:	0019      	movs	r1, r3
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f7fa fb8b 	bl	800051c <__aeabi_uldivmod>
 8005e06:	0002      	movs	r2, r0
 8005e08:	000b      	movs	r3, r1
 8005e0a:	0013      	movs	r3, r2
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0e:	e037      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005e10:	4b26      	ldr	r3, [pc, #152]	; (8005eac <HAL_RCC_GetSysClockFreq+0x138>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2210      	movs	r2, #16
 8005e16:	4013      	ands	r3, r2
 8005e18:	d01a      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	4a23      	ldr	r2, [pc, #140]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	68b8      	ldr	r0, [r7, #8]
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	f7fa fb97 	bl	800055c <__aeabi_lmul>
 8005e2e:	0002      	movs	r2, r0
 8005e30:	000b      	movs	r3, r1
 8005e32:	0010      	movs	r0, r2
 8005e34:	0019      	movs	r1, r3
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f7fa fb6b 	bl	800051c <__aeabi_uldivmod>
 8005e46:	0002      	movs	r2, r0
 8005e48:	000b      	movs	r3, r1
 8005e4a:	0013      	movs	r3, r2
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4e:	e017      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	0018      	movs	r0, r3
 8005e54:	2300      	movs	r3, #0
 8005e56:	0019      	movs	r1, r3
 8005e58:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f7fa fb7e 	bl	800055c <__aeabi_lmul>
 8005e60:	0002      	movs	r2, r0
 8005e62:	000b      	movs	r3, r1
 8005e64:	0010      	movs	r0, r2
 8005e66:	0019      	movs	r1, r3
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	001c      	movs	r4, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	001d      	movs	r5, r3
 8005e70:	0022      	movs	r2, r4
 8005e72:	002b      	movs	r3, r5
 8005e74:	f7fa fb52 	bl	800051c <__aeabi_uldivmod>
 8005e78:	0002      	movs	r2, r0
 8005e7a:	000b      	movs	r3, r1
 8005e7c:	0013      	movs	r3, r2
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e84:	e00d      	b.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_RCC_GetSysClockFreq+0x138>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	0b5b      	lsrs	r3, r3, #13
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	4013      	ands	r3, r2
 8005e90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	3301      	adds	r3, #1
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	0212      	lsls	r2, r2, #8
 8005e9a:	409a      	lsls	r2, r3
 8005e9c:	0013      	movs	r3, r2
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ea0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b00e      	add	sp, #56	; 0x38
 8005eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	003d0900 	.word	0x003d0900
 8005eb4:	00f42400 	.word	0x00f42400
 8005eb8:	007a1200 	.word	0x007a1200
 8005ebc:	0800b078 	.word	0x0800b078

08005ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ec4:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
}
 8005ec8:	0018      	movs	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	20000000 	.word	0x20000000

08005ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ed8:	f7ff fff2 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005edc:	0001      	movs	r1, r0
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	4a04      	ldr	r2, [pc, #16]	; (8005efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eea:	5cd3      	ldrb	r3, [r2, r3]
 8005eec:	40d9      	lsrs	r1, r3
 8005eee:	000b      	movs	r3, r1
}
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	0800b070 	.word	0x0800b070

08005f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f04:	f7ff ffdc 	bl	8005ec0 <HAL_RCC_GetHCLKFreq>
 8005f08:	0001      	movs	r1, r0
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	0adb      	lsrs	r3, r3, #11
 8005f10:	2207      	movs	r2, #7
 8005f12:	4013      	ands	r3, r2
 8005f14:	4a04      	ldr	r2, [pc, #16]	; (8005f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f16:	5cd3      	ldrb	r3, [r2, r3]
 8005f18:	40d9      	lsrs	r1, r3
 8005f1a:	000b      	movs	r3, r1
}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	40021000 	.word	0x40021000
 8005f28:	0800b070 	.word	0x0800b070

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005f34:	2017      	movs	r0, #23
 8005f36:	183b      	adds	r3, r7, r0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2220      	movs	r2, #32
 8005f42:	4013      	ands	r3, r2
 8005f44:	d100      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005f46:	e0c2      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f48:	4b98      	ldr	r3, [pc, #608]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	055b      	lsls	r3, r3, #21
 8005f50:	4013      	ands	r3, r2
 8005f52:	d109      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f54:	4b95      	ldr	r3, [pc, #596]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f58:	4b94      	ldr	r3, [pc, #592]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f5a:	2180      	movs	r1, #128	; 0x80
 8005f5c:	0549      	lsls	r1, r1, #21
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005f62:	183b      	adds	r3, r7, r0
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f68:	4b91      	ldr	r3, [pc, #580]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	4013      	ands	r3, r2
 8005f72:	d11a      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f74:	4b8e      	ldr	r3, [pc, #568]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b8d      	ldr	r3, [pc, #564]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f7a:	2180      	movs	r1, #128	; 0x80
 8005f7c:	0049      	lsls	r1, r1, #1
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f82:	f7fe f88f 	bl	80040a4 <HAL_GetTick>
 8005f86:	0003      	movs	r3, r0
 8005f88:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8a:	e008      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8c:	f7fe f88a 	bl	80040a4 <HAL_GetTick>
 8005f90:	0002      	movs	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	; 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e102      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b84      	ldr	r3, [pc, #528]	; (80061b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005faa:	4b80      	ldr	r3, [pc, #512]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	23c0      	movs	r3, #192	; 0xc0
 8005fb0:	039b      	lsls	r3, r3, #14
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	23c0      	movs	r3, #192	; 0xc0
 8005fbc:	039b      	lsls	r3, r3, #14
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d013      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	23c0      	movs	r3, #192	; 0xc0
 8005fcc:	029b      	lsls	r3, r3, #10
 8005fce:	401a      	ands	r2, r3
 8005fd0:	23c0      	movs	r3, #192	; 0xc0
 8005fd2:	029b      	lsls	r3, r3, #10
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d10a      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fd8:	4b74      	ldr	r3, [pc, #464]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	029b      	lsls	r3, r3, #10
 8005fe0:	401a      	ands	r2, r3
 8005fe2:	2380      	movs	r3, #128	; 0x80
 8005fe4:	029b      	lsls	r3, r3, #10
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d101      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e0da      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005fee:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ff2:	23c0      	movs	r3, #192	; 0xc0
 8005ff4:	029b      	lsls	r3, r3, #10
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d03b      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	23c0      	movs	r3, #192	; 0xc0
 8006006:	029b      	lsls	r3, r3, #10
 8006008:	4013      	ands	r3, r2
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d033      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2220      	movs	r2, #32
 8006016:	4013      	ands	r3, r2
 8006018:	d02e      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800601a:	4b64      	ldr	r3, [pc, #400]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800601c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601e:	4a65      	ldr	r2, [pc, #404]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006020:	4013      	ands	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006024:	4b61      	ldr	r3, [pc, #388]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006028:	4b60      	ldr	r3, [pc, #384]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800602a:	2180      	movs	r1, #128	; 0x80
 800602c:	0309      	lsls	r1, r1, #12
 800602e:	430a      	orrs	r2, r1
 8006030:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006032:	4b5e      	ldr	r3, [pc, #376]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006036:	4b5d      	ldr	r3, [pc, #372]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006038:	495f      	ldr	r1, [pc, #380]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800603a:	400a      	ands	r2, r1
 800603c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800603e:	4b5b      	ldr	r3, [pc, #364]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4013      	ands	r3, r2
 800604c:	d014      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604e:	f7fe f829 	bl	80040a4 <HAL_GetTick>
 8006052:	0003      	movs	r3, r0
 8006054:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006056:	e009      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fe f824 	bl	80040a4 <HAL_GetTick>
 800605c:	0002      	movs	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	4a56      	ldr	r2, [pc, #344]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e09b      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800606c:	4b4f      	ldr	r3, [pc, #316]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800606e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4013      	ands	r3, r2
 8006076:	d0ef      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	23c0      	movs	r3, #192	; 0xc0
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	401a      	ands	r2, r3
 8006082:	23c0      	movs	r3, #192	; 0xc0
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	429a      	cmp	r2, r3
 8006088:	d10c      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800608a:	4b48      	ldr	r3, [pc, #288]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a4c      	ldr	r2, [pc, #304]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006090:	4013      	ands	r3, r2
 8006092:	0019      	movs	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	23c0      	movs	r3, #192	; 0xc0
 800609a:	039b      	lsls	r3, r3, #14
 800609c:	401a      	ands	r2, r3
 800609e:	4b43      	ldr	r3, [pc, #268]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	4b41      	ldr	r3, [pc, #260]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	23c0      	movs	r3, #192	; 0xc0
 80060ae:	029b      	lsls	r3, r3, #10
 80060b0:	401a      	ands	r2, r3
 80060b2:	4b3e      	ldr	r3, [pc, #248]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b4:	430a      	orrs	r2, r1
 80060b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060b8:	2317      	movs	r3, #23
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d105      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c2:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c8:	493e      	ldr	r1, [pc, #248]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80060ca:	400a      	ands	r2, r1
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2201      	movs	r2, #1
 80060d4:	4013      	ands	r3, r2
 80060d6:	d009      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060d8:	4b34      	ldr	r3, [pc, #208]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060dc:	2203      	movs	r2, #3
 80060de:	4393      	bics	r3, r2
 80060e0:	0019      	movs	r1, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	4b31      	ldr	r3, [pc, #196]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e8:	430a      	orrs	r2, r1
 80060ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2202      	movs	r2, #2
 80060f2:	4013      	ands	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060f6:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fa:	220c      	movs	r2, #12
 80060fc:	4393      	bics	r3, r2
 80060fe:	0019      	movs	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	4b29      	ldr	r3, [pc, #164]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006106:	430a      	orrs	r2, r1
 8006108:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2204      	movs	r2, #4
 8006110:	4013      	ands	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006114:	4b25      	ldr	r3, [pc, #148]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006118:	4a2b      	ldr	r2, [pc, #172]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800611a:	4013      	ands	r3, r2
 800611c:	0019      	movs	r1, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	4b22      	ldr	r3, [pc, #136]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006124:	430a      	orrs	r2, r1
 8006126:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	4013      	ands	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006132:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006136:	4a25      	ldr	r2, [pc, #148]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006138:	4013      	ands	r3, r2
 800613a:	0019      	movs	r1, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	4b1a      	ldr	r3, [pc, #104]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006142:	430a      	orrs	r2, r1
 8006144:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	4013      	ands	r3, r2
 8006150:	d009      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006152:	4b16      	ldr	r3, [pc, #88]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006158:	4013      	ands	r3, r2
 800615a:	0019      	movs	r1, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	4b12      	ldr	r3, [pc, #72]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006162:	430a      	orrs	r2, r1
 8006164:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2240      	movs	r2, #64	; 0x40
 800616c:	4013      	ands	r3, r2
 800616e:	d009      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006170:	4b0e      	ldr	r3, [pc, #56]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006174:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006176:	4013      	ands	r3, r2
 8006178:	0019      	movs	r1, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006180:	430a      	orrs	r2, r1
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2280      	movs	r2, #128	; 0x80
 800618a:	4013      	ands	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006192:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006194:	4013      	ands	r3, r2
 8006196:	0019      	movs	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	4b03      	ldr	r3, [pc, #12]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619e:	430a      	orrs	r2, r1
 80061a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b006      	add	sp, #24
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40007000 	.word	0x40007000
 80061b4:	fffcffff 	.word	0xfffcffff
 80061b8:	fff7ffff 	.word	0xfff7ffff
 80061bc:	00001388 	.word	0x00001388
 80061c0:	ffcfffff 	.word	0xffcfffff
 80061c4:	efffffff 	.word	0xefffffff
 80061c8:	fffff3ff 	.word	0xfffff3ff
 80061cc:	ffffcfff 	.word	0xffffcfff
 80061d0:	fbffffff 	.word	0xfbffffff
 80061d4:	fff3ffff 	.word	0xfff3ffff

080061d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e08e      	b.n	8006308 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2221      	movs	r2, #33	; 0x21
 80061ee:	5c9b      	ldrb	r3, [r3, r2]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d107      	bne.n	8006206 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	2100      	movs	r1, #0
 80061fc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	0018      	movs	r0, r3
 8006202:	f7fd fc6d 	bl	8003ae0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2221      	movs	r2, #33	; 0x21
 800620a:	2102      	movs	r1, #2
 800620c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	22ca      	movs	r2, #202	; 0xca
 8006214:	625a      	str	r2, [r3, #36]	; 0x24
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2253      	movs	r2, #83	; 0x53
 800621c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0018      	movs	r0, r3
 8006222:	f000 fbb2 	bl	800698a <RTC_EnterInitMode>
 8006226:	1e03      	subs	r3, r0, #0
 8006228:	d009      	beq.n	800623e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	22ff      	movs	r2, #255	; 0xff
 8006230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2221      	movs	r2, #33	; 0x21
 8006236:	2104      	movs	r1, #4
 8006238:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e064      	b.n	8006308 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4931      	ldr	r1, [pc, #196]	; (8006310 <HAL_RTC_Init+0x138>)
 800624a:	400a      	ands	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6899      	ldr	r1, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	68d2      	ldr	r2, [r2, #12]
 8006274:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6919      	ldr	r1, [r3, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	041a      	lsls	r2, r3, #16
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	438a      	bics	r2, r1
 8006298:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2103      	movs	r1, #3
 80062a6:	438a      	bics	r2, r1
 80062a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2220      	movs	r2, #32
 80062ca:	4013      	ands	r3, r2
 80062cc:	d113      	bne.n	80062f6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f000 fb33 	bl	800693c <HAL_RTC_WaitForSynchro>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d00d      	beq.n	80062f6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	22ff      	movs	r2, #255	; 0xff
 80062e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2221      	movs	r2, #33	; 0x21
 80062e6:	2104      	movs	r1, #4
 80062e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	2100      	movs	r1, #0
 80062f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e008      	b.n	8006308 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	22ff      	movs	r2, #255	; 0xff
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2221      	movs	r2, #33	; 0x21
 8006302:	2101      	movs	r1, #1
 8006304:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006306:	2300      	movs	r3, #0
  }
}
 8006308:	0018      	movs	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}
 8006310:	ff8fffbf 	.word	0xff8fffbf

08006314 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	5c9b      	ldrb	r3, [r3, r2]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_RTC_SetTime+0x1a>
 800632a:	2302      	movs	r3, #2
 800632c:	e0ad      	b.n	800648a <HAL_RTC_SetTime+0x176>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	2101      	movs	r1, #1
 8006334:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2221      	movs	r2, #33	; 0x21
 800633a:	2102      	movs	r1, #2
 800633c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d125      	bne.n	8006390 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2240      	movs	r2, #64	; 0x40
 800634c:	4013      	ands	r3, r2
 800634e:	d102      	bne.n	8006356 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2200      	movs	r2, #0
 8006354:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	0018      	movs	r0, r3
 800635c:	f000 fb3f 	bl	80069de <RTC_ByteToBcd2>
 8006360:	0003      	movs	r3, r0
 8006362:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	0018      	movs	r0, r3
 800636a:	f000 fb38 	bl	80069de <RTC_ByteToBcd2>
 800636e:	0003      	movs	r3, r0
 8006370:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006372:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	789b      	ldrb	r3, [r3, #2]
 8006378:	0018      	movs	r0, r3
 800637a:	f000 fb30 	bl	80069de <RTC_ByteToBcd2>
 800637e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006380:	0022      	movs	r2, r4
 8006382:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	78db      	ldrb	r3, [r3, #3]
 8006388:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e017      	b.n	80063c0 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2240      	movs	r2, #64	; 0x40
 8006398:	4013      	ands	r3, r2
 800639a:	d102      	bne.n	80063a2 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063ae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	78db      	ldrb	r3, [r3, #3]
 80063ba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	22ca      	movs	r2, #202	; 0xca
 80063c6:	625a      	str	r2, [r3, #36]	; 0x24
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2253      	movs	r2, #83	; 0x53
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	0018      	movs	r0, r3
 80063d4:	f000 fad9 	bl	800698a <RTC_EnterInitMode>
 80063d8:	1e03      	subs	r3, r0, #0
 80063da:	d00d      	beq.n	80063f8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2221      	movs	r2, #33	; 0x21
 80063e8:	2104      	movs	r1, #4
 80063ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	2100      	movs	r1, #0
 80063f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e048      	b.n	800648a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4925      	ldr	r1, [pc, #148]	; (8006494 <HAL_RTC_SetTime+0x180>)
 8006400:	400a      	ands	r2, r1
 8006402:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4922      	ldr	r1, [pc, #136]	; (8006498 <HAL_RTC_SetTime+0x184>)
 8006410:	400a      	ands	r2, r1
 8006412:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6899      	ldr	r1, [r3, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	431a      	orrs	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2180      	movs	r1, #128	; 0x80
 8006438:	438a      	bics	r2, r1
 800643a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2220      	movs	r2, #32
 8006444:	4013      	ands	r3, r2
 8006446:	d113      	bne.n	8006470 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	0018      	movs	r0, r3
 800644c:	f000 fa76 	bl	800693c <HAL_RTC_WaitForSynchro>
 8006450:	1e03      	subs	r3, r0, #0
 8006452:	d00d      	beq.n	8006470 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	22ff      	movs	r2, #255	; 0xff
 800645a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2221      	movs	r2, #33	; 0x21
 8006460:	2104      	movs	r1, #4
 8006462:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	2100      	movs	r1, #0
 800646a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e00c      	b.n	800648a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	22ff      	movs	r2, #255	; 0xff
 8006476:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2221      	movs	r2, #33	; 0x21
 800647c:	2101      	movs	r1, #1
 800647e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	2100      	movs	r1, #0
 8006486:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006488:	2300      	movs	r3, #0
  }
}
 800648a:	0018      	movs	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	b007      	add	sp, #28
 8006490:	bd90      	pop	{r4, r7, pc}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	007f7f7f 	.word	0x007f7f7f
 8006498:	fffbffff 	.word	0xfffbffff

0800649c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	5c9b      	ldrb	r3, [r3, r2]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_RTC_SetDate+0x1a>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e099      	b.n	80065ea <HAL_RTC_SetDate+0x14e>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	2101      	movs	r1, #1
 80064bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	2102      	movs	r1, #2
 80064c4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10e      	bne.n	80064ea <HAL_RTC_SetDate+0x4e>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	001a      	movs	r2, r3
 80064d2:	2310      	movs	r3, #16
 80064d4:	4013      	ands	r3, r2
 80064d6:	d008      	beq.n	80064ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2210      	movs	r2, #16
 80064de:	4393      	bics	r3, r2
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	330a      	adds	r3, #10
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d11c      	bne.n	800652a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	0018      	movs	r0, r3
 80064f6:	f000 fa72 	bl	80069de <RTC_ByteToBcd2>
 80064fa:	0003      	movs	r3, r0
 80064fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	0018      	movs	r0, r3
 8006504:	f000 fa6b 	bl	80069de <RTC_ByteToBcd2>
 8006508:	0003      	movs	r3, r0
 800650a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800650c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	789b      	ldrb	r3, [r3, #2]
 8006512:	0018      	movs	r0, r3
 8006514:	f000 fa63 	bl	80069de <RTC_ByteToBcd2>
 8006518:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800651a:	0022      	movs	r2, r4
 800651c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e00e      	b.n	8006548 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	78db      	ldrb	r3, [r3, #3]
 800652e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006536:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800653c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	22ca      	movs	r2, #202	; 0xca
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2253      	movs	r2, #83	; 0x53
 8006556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	0018      	movs	r0, r3
 800655c:	f000 fa15 	bl	800698a <RTC_EnterInitMode>
 8006560:	1e03      	subs	r3, r0, #0
 8006562:	d00d      	beq.n	8006580 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	22ff      	movs	r2, #255	; 0xff
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2221      	movs	r2, #33	; 0x21
 8006570:	2104      	movs	r1, #4
 8006572:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	2100      	movs	r1, #0
 800657a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e034      	b.n	80065ea <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	491b      	ldr	r1, [pc, #108]	; (80065f4 <HAL_RTC_SetDate+0x158>)
 8006588:	400a      	ands	r2, r1
 800658a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2180      	movs	r1, #128	; 0x80
 8006598:	438a      	bics	r2, r1
 800659a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2220      	movs	r2, #32
 80065a4:	4013      	ands	r3, r2
 80065a6:	d113      	bne.n	80065d0 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 f9c6 	bl	800693c <HAL_RTC_WaitForSynchro>
 80065b0:	1e03      	subs	r3, r0, #0
 80065b2:	d00d      	beq.n	80065d0 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	22ff      	movs	r2, #255	; 0xff
 80065ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2221      	movs	r2, #33	; 0x21
 80065c0:	2104      	movs	r1, #4
 80065c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	2100      	movs	r1, #0
 80065ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e00c      	b.n	80065ea <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2221      	movs	r2, #33	; 0x21
 80065dc:	2101      	movs	r1, #1
 80065de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	2100      	movs	r1, #0
 80065e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
  }
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b007      	add	sp, #28
 80065f0:	bd90      	pop	{r4, r7, pc}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	00ffff3f 	.word	0x00ffff3f

080065f8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b089      	sub	sp, #36	; 0x24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2220      	movs	r2, #32
 8006608:	5c9b      	ldrb	r3, [r3, r2]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_RTC_SetAlarm_IT+0x1a>
 800660e:	2302      	movs	r3, #2
 8006610:	e130      	b.n	8006874 <HAL_RTC_SetAlarm_IT+0x27c>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	2101      	movs	r1, #1
 8006618:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2221      	movs	r2, #33	; 0x21
 800661e:	2102      	movs	r1, #2
 8006620:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d136      	bne.n	8006696 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	4013      	ands	r3, r2
 8006632:	d102      	bne.n	800663a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	0018      	movs	r0, r3
 8006640:	f000 f9cd 	bl	80069de <RTC_ByteToBcd2>
 8006644:	0003      	movs	r3, r0
 8006646:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	0018      	movs	r0, r3
 800664e:	f000 f9c6 	bl	80069de <RTC_ByteToBcd2>
 8006652:	0003      	movs	r3, r0
 8006654:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006656:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	789b      	ldrb	r3, [r3, #2]
 800665c:	0018      	movs	r0, r3
 800665e:	f000 f9be 	bl	80069de <RTC_ByteToBcd2>
 8006662:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006664:	0022      	movs	r2, r4
 8006666:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	78db      	ldrb	r3, [r3, #3]
 800666c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800666e:	431a      	orrs	r2, r3
 8006670:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2220      	movs	r2, #32
 8006676:	5c9b      	ldrb	r3, [r3, r2]
 8006678:	0018      	movs	r0, r3
 800667a:	f000 f9b0 	bl	80069de <RTC_ByteToBcd2>
 800667e:	0003      	movs	r3, r0
 8006680:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006682:	0022      	movs	r2, r4
 8006684:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800668a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006690:	4313      	orrs	r3, r2
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e022      	b.n	80066dc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2240      	movs	r2, #64	; 0x40
 800669e:	4013      	ands	r3, r2
 80066a0:	d102      	bne.n	80066a8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2200      	movs	r2, #0
 80066a6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80066b4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	78db      	ldrb	r3, [r3, #3]
 80066c0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80066c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2120      	movs	r1, #32
 80066c8:	5c5b      	ldrb	r3, [r3, r1]
 80066ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80066cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80066d8:	4313      	orrs	r3, r2
 80066da:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	22ca      	movs	r2, #202	; 0xca
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2253      	movs	r2, #83	; 0x53
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	429a      	cmp	r2, r3
 8006702:	d14e      	bne.n	80067a2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	495b      	ldr	r1, [pc, #364]	; (800687c <HAL_RTC_SetAlarm_IT+0x284>)
 8006710:	400a      	ands	r2, r1
 8006712:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	22ff      	movs	r2, #255	; 0xff
 800671c:	401a      	ands	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4957      	ldr	r1, [pc, #348]	; (8006880 <HAL_RTC_SetAlarm_IT+0x288>)
 8006724:	430a      	orrs	r2, r1
 8006726:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006728:	f7fd fcbc 	bl	80040a4 <HAL_GetTick>
 800672c:	0003      	movs	r3, r0
 800672e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006730:	e016      	b.n	8006760 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006732:	f7fd fcb7 	bl	80040a4 <HAL_GetTick>
 8006736:	0002      	movs	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	23fa      	movs	r3, #250	; 0xfa
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	429a      	cmp	r2, r3
 8006742:	d90d      	bls.n	8006760 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	22ff      	movs	r2, #255	; 0xff
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2221      	movs	r2, #33	; 0x21
 8006750:	2103      	movs	r1, #3
 8006752:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	2100      	movs	r1, #0
 800675a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e089      	b.n	8006874 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	4013      	ands	r3, r2
 800676a:	d0e2      	beq.n	8006732 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	0049      	lsls	r1, r1, #1
 800678a:	430a      	orrs	r2, r1
 800678c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	0149      	lsls	r1, r1, #5
 800679c:	430a      	orrs	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	e04d      	b.n	800683e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4935      	ldr	r1, [pc, #212]	; (8006884 <HAL_RTC_SetAlarm_IT+0x28c>)
 80067ae:	400a      	ands	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	401a      	ands	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4931      	ldr	r1, [pc, #196]	; (8006888 <HAL_RTC_SetAlarm_IT+0x290>)
 80067c2:	430a      	orrs	r2, r1
 80067c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067c6:	f7fd fc6d 	bl	80040a4 <HAL_GetTick>
 80067ca:	0003      	movs	r3, r0
 80067cc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067ce:	e016      	b.n	80067fe <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067d0:	f7fd fc68 	bl	80040a4 <HAL_GetTick>
 80067d4:	0002      	movs	r2, r0
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	23fa      	movs	r3, #250	; 0xfa
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	429a      	cmp	r2, r3
 80067e0:	d90d      	bls.n	80067fe <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	22ff      	movs	r2, #255	; 0xff
 80067e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2221      	movs	r2, #33	; 0x21
 80067ee:	2103      	movs	r1, #3
 80067f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	2100      	movs	r1, #0
 80067f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e03a      	b.n	8006874 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	2202      	movs	r2, #2
 8006806:	4013      	ands	r3, r2
 8006808:	d0e2      	beq.n	80067d0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2180      	movs	r1, #128	; 0x80
 8006826:	0089      	lsls	r1, r1, #2
 8006828:	430a      	orrs	r2, r1
 800682a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	0189      	lsls	r1, r1, #6
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800683e:	4b13      	ldr	r3, [pc, #76]	; (800688c <HAL_RTC_SetAlarm_IT+0x294>)
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <HAL_RTC_SetAlarm_IT+0x294>)
 8006844:	2180      	movs	r1, #128	; 0x80
 8006846:	0289      	lsls	r1, r1, #10
 8006848:	430a      	orrs	r2, r1
 800684a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <HAL_RTC_SetAlarm_IT+0x294>)
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	4b0e      	ldr	r3, [pc, #56]	; (800688c <HAL_RTC_SetAlarm_IT+0x294>)
 8006852:	2180      	movs	r1, #128	; 0x80
 8006854:	0289      	lsls	r1, r1, #10
 8006856:	430a      	orrs	r2, r1
 8006858:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	22ff      	movs	r2, #255	; 0xff
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2221      	movs	r2, #33	; 0x21
 8006866:	2101      	movs	r1, #1
 8006868:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	2100      	movs	r1, #0
 8006870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b009      	add	sp, #36	; 0x24
 800687a:	bd90      	pop	{r4, r7, pc}
 800687c:	fffffeff 	.word	0xfffffeff
 8006880:	fffffe7f 	.word	0xfffffe7f
 8006884:	fffffdff 	.word	0xfffffdff
 8006888:	fffffd7f 	.word	0xfffffd7f
 800688c:	40010400 	.word	0x40010400

08006890 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	2380      	movs	r3, #128	; 0x80
 80068a0:	015b      	lsls	r3, r3, #5
 80068a2:	4013      	ands	r3, r2
 80068a4:	d014      	beq.n	80068d0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	4013      	ands	r3, r2
 80068b2:	d00d      	beq.n	80068d0 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 f838 	bl	800692c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	22ff      	movs	r2, #255	; 0xff
 80068c4:	401a      	ands	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4915      	ldr	r1, [pc, #84]	; (8006920 <HAL_RTC_AlarmIRQHandler+0x90>)
 80068cc:	430a      	orrs	r2, r1
 80068ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	4013      	ands	r3, r2
 80068dc:	d014      	beq.n	8006908 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4013      	ands	r3, r2
 80068ea:	d00d      	beq.n	8006908 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	0018      	movs	r0, r3
 80068f0:	f000 f89d 	bl	8006a2e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	22ff      	movs	r2, #255	; 0xff
 80068fc:	401a      	ands	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4908      	ldr	r1, [pc, #32]	; (8006924 <HAL_RTC_AlarmIRQHandler+0x94>)
 8006904:	430a      	orrs	r2, r1
 8006906:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006908:	4b07      	ldr	r3, [pc, #28]	; (8006928 <HAL_RTC_AlarmIRQHandler+0x98>)
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	0292      	lsls	r2, r2, #10
 800690e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2221      	movs	r2, #33	; 0x21
 8006914:	2101      	movs	r1, #1
 8006916:	5499      	strb	r1, [r3, r2]
}
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b002      	add	sp, #8
 800691e:	bd80      	pop	{r7, pc}
 8006920:	fffffe7f 	.word	0xfffffe7f
 8006924:	fffffd7f 	.word	0xfffffd7f
 8006928:	40010400 	.word	0x40010400

0800692c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	46bd      	mov	sp, r7
 8006938:	b002      	add	sp, #8
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	21a0      	movs	r1, #160	; 0xa0
 8006950:	438a      	bics	r2, r1
 8006952:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006954:	f7fd fba6 	bl	80040a4 <HAL_GetTick>
 8006958:	0003      	movs	r3, r0
 800695a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800695c:	e00a      	b.n	8006974 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800695e:	f7fd fba1 	bl	80040a4 <HAL_GetTick>
 8006962:	0002      	movs	r2, r0
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	23fa      	movs	r3, #250	; 0xfa
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	429a      	cmp	r2, r3
 800696e:	d901      	bls.n	8006974 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e006      	b.n	8006982 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	4013      	ands	r3, r2
 800697e:	d0ee      	beq.n	800695e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b004      	add	sp, #16
 8006988:	bd80      	pop	{r7, pc}

0800698a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2240      	movs	r2, #64	; 0x40
 800699a:	4013      	ands	r3, r2
 800699c:	d11a      	bne.n	80069d4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2201      	movs	r2, #1
 80069a4:	4252      	negs	r2, r2
 80069a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80069a8:	f7fd fb7c 	bl	80040a4 <HAL_GetTick>
 80069ac:	0003      	movs	r3, r0
 80069ae:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069b0:	e00a      	b.n	80069c8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80069b2:	f7fd fb77 	bl	80040a4 <HAL_GetTick>
 80069b6:	0002      	movs	r2, r0
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	23fa      	movs	r3, #250	; 0xfa
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d901      	bls.n	80069c8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2240      	movs	r2, #64	; 0x40
 80069d0:	4013      	ands	r3, r2
 80069d2:	d0ee      	beq.n	80069b2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	0018      	movs	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	b004      	add	sp, #16
 80069dc:	bd80      	pop	{r7, pc}

080069de <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	0002      	movs	r2, r0
 80069e6:	1dfb      	adds	r3, r7, #7
 80069e8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80069ee:	230b      	movs	r3, #11
 80069f0:	18fb      	adds	r3, r7, r3
 80069f2:	1dfa      	adds	r2, r7, #7
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80069f8:	e008      	b.n	8006a0c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006a00:	220b      	movs	r2, #11
 8006a02:	18bb      	adds	r3, r7, r2
 8006a04:	18ba      	adds	r2, r7, r2
 8006a06:	7812      	ldrb	r2, [r2, #0]
 8006a08:	3a0a      	subs	r2, #10
 8006a0a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006a0c:	210b      	movs	r1, #11
 8006a0e:	187b      	adds	r3, r7, r1
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b09      	cmp	r3, #9
 8006a14:	d8f1      	bhi.n	80069fa <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	187b      	adds	r3, r7, r1
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	b2db      	uxtb	r3, r3
}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b004      	add	sp, #16
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	b002      	add	sp, #8
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e044      	b.n	8006adc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2274      	movs	r2, #116	; 0x74
 8006a5e:	2100      	movs	r1, #0
 8006a60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f7fd f85b 	bl	8003b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2224      	movs	r2, #36	; 0x24
 8006a6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	438a      	bics	r2, r1
 8006a7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	0018      	movs	r0, r3
 8006a84:	f000 fbce 	bl	8007224 <UART_SetConfig>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e024      	b.n	8006adc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 fe7f 	bl	80077a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	490d      	ldr	r1, [pc, #52]	; (8006ae4 <HAL_UART_Init+0xa4>)
 8006aae:	400a      	ands	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	212a      	movs	r1, #42	; 0x2a
 8006abe:	438a      	bics	r2, r1
 8006ac0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2101      	movs	r1, #1
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 ff17 	bl	8007908 <UART_CheckIdleState>
 8006ada:	0003      	movs	r3, r0
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	ffffb7ff 	.word	0xffffb7ff

08006ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	1dbb      	adds	r3, r7, #6
 8006af6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d000      	beq.n	8006b02 <HAL_UART_Transmit+0x1a>
 8006b00:	e095      	b.n	8006c2e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_UART_Transmit+0x28>
 8006b08:	1dbb      	adds	r3, r7, #6
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e08d      	b.n	8006c30 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	015b      	lsls	r3, r3, #5
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d109      	bne.n	8006b34 <HAL_UART_Transmit+0x4c>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	d001      	beq.n	8006b34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e07d      	b.n	8006c30 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2274      	movs	r2, #116	; 0x74
 8006b38:	5c9b      	ldrb	r3, [r3, r2]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_UART_Transmit+0x5a>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e076      	b.n	8006c30 <HAL_UART_Transmit+0x148>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2274      	movs	r2, #116	; 0x74
 8006b46:	2101      	movs	r1, #1
 8006b48:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2280      	movs	r2, #128	; 0x80
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2221      	movs	r2, #33	; 0x21
 8006b56:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b58:	f7fd faa4 	bl	80040a4 <HAL_GetTick>
 8006b5c:	0003      	movs	r3, r0
 8006b5e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	1dba      	adds	r2, r7, #6
 8006b64:	2150      	movs	r1, #80	; 0x50
 8006b66:	8812      	ldrh	r2, [r2, #0]
 8006b68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1dba      	adds	r2, r7, #6
 8006b6e:	2152      	movs	r1, #82	; 0x52
 8006b70:	8812      	ldrh	r2, [r2, #0]
 8006b72:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	015b      	lsls	r3, r3, #5
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d108      	bne.n	8006b92 <HAL_UART_Transmit+0xaa>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	61bb      	str	r3, [r7, #24]
 8006b90:	e003      	b.n	8006b9a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2274      	movs	r2, #116	; 0x74
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006ba2:	e02c      	b.n	8006bfe <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	0013      	movs	r3, r2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	f000 fef1 	bl	8007998 <UART_WaitOnFlagUntilTimeout>
 8006bb6:	1e03      	subs	r3, r0, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e038      	b.n	8006c30 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10b      	bne.n	8006bdc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	001a      	movs	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	05d2      	lsls	r2, r2, #23
 8006bd0:	0dd2      	lsrs	r2, r2, #23
 8006bd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	e007      	b.n	8006bec <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	781a      	ldrb	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	3301      	adds	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2252      	movs	r2, #82	; 0x52
 8006bf0:	5a9b      	ldrh	r3, [r3, r2]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b299      	uxth	r1, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2252      	movs	r2, #82	; 0x52
 8006bfc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2252      	movs	r2, #82	; 0x52
 8006c02:	5a9b      	ldrh	r3, [r3, r2]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1cc      	bne.n	8006ba4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	0013      	movs	r3, r2
 8006c14:	2200      	movs	r2, #0
 8006c16:	2140      	movs	r1, #64	; 0x40
 8006c18:	f000 febe 	bl	8007998 <UART_WaitOnFlagUntilTimeout>
 8006c1c:	1e03      	subs	r3, r0, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e005      	b.n	8006c30 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	0018      	movs	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b008      	add	sp, #32
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b0ab      	sub	sp, #172	; 0xac
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	22a4      	movs	r2, #164	; 0xa4
 8006c48:	18b9      	adds	r1, r7, r2
 8006c4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	20a0      	movs	r0, #160	; 0xa0
 8006c54:	1839      	adds	r1, r7, r0
 8006c56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	219c      	movs	r1, #156	; 0x9c
 8006c60:	1879      	adds	r1, r7, r1
 8006c62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c64:	0011      	movs	r1, r2
 8006c66:	18bb      	adds	r3, r7, r2
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a99      	ldr	r2, [pc, #612]	; (8006ed0 <HAL_UART_IRQHandler+0x298>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2298      	movs	r2, #152	; 0x98
 8006c70:	18bc      	adds	r4, r7, r2
 8006c72:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006c74:	18bb      	adds	r3, r7, r2
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d114      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c7c:	187b      	adds	r3, r7, r1
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2220      	movs	r2, #32
 8006c82:	4013      	ands	r3, r2
 8006c84:	d00f      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c86:	183b      	adds	r3, r7, r0
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d00a      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d100      	bne.n	8006c9a <HAL_UART_IRQHandler+0x62>
 8006c98:	e298      	b.n	80071cc <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	0010      	movs	r0, r2
 8006ca2:	4798      	blx	r3
      }
      return;
 8006ca4:	e292      	b.n	80071cc <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ca6:	2398      	movs	r3, #152	; 0x98
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d100      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x7a>
 8006cb0:	e114      	b.n	8006edc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cb2:	239c      	movs	r3, #156	; 0x9c
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	4013      	ands	r3, r2
 8006cbc:	d106      	bne.n	8006ccc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cbe:	23a0      	movs	r3, #160	; 0xa0
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a83      	ldr	r2, [pc, #524]	; (8006ed4 <HAL_UART_IRQHandler+0x29c>)
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d100      	bne.n	8006ccc <HAL_UART_IRQHandler+0x94>
 8006cca:	e107      	b.n	8006edc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ccc:	23a4      	movs	r3, #164	; 0xa4
 8006cce:	18fb      	adds	r3, r7, r3
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d012      	beq.n	8006cfe <HAL_UART_IRQHandler+0xc6>
 8006cd8:	23a0      	movs	r3, #160	; 0xa0
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	2380      	movs	r3, #128	; 0x80
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2280      	movs	r2, #128	; 0x80
 8006cf2:	589b      	ldr	r3, [r3, r2]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cfe:	23a4      	movs	r3, #164	; 0xa4
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2202      	movs	r2, #2
 8006d06:	4013      	ands	r3, r2
 8006d08:	d011      	beq.n	8006d2e <HAL_UART_IRQHandler+0xf6>
 8006d0a:	239c      	movs	r3, #156	; 0x9c
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2201      	movs	r2, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	d00b      	beq.n	8006d2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2280      	movs	r2, #128	; 0x80
 8006d22:	589b      	ldr	r3, [r3, r2]
 8006d24:	2204      	movs	r2, #4
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2180      	movs	r1, #128	; 0x80
 8006d2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d2e:	23a4      	movs	r3, #164	; 0xa4
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2204      	movs	r2, #4
 8006d36:	4013      	ands	r3, r2
 8006d38:	d011      	beq.n	8006d5e <HAL_UART_IRQHandler+0x126>
 8006d3a:	239c      	movs	r3, #156	; 0x9c
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2201      	movs	r2, #1
 8006d42:	4013      	ands	r3, r2
 8006d44:	d00b      	beq.n	8006d5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2280      	movs	r2, #128	; 0x80
 8006d52:	589b      	ldr	r3, [r3, r2]
 8006d54:	2202      	movs	r2, #2
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d5e:	23a4      	movs	r3, #164	; 0xa4
 8006d60:	18fb      	adds	r3, r7, r3
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2208      	movs	r2, #8
 8006d66:	4013      	ands	r3, r2
 8006d68:	d017      	beq.n	8006d9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d6a:	23a0      	movs	r3, #160	; 0xa0
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2220      	movs	r2, #32
 8006d72:	4013      	ands	r3, r2
 8006d74:	d105      	bne.n	8006d82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d76:	239c      	movs	r3, #156	; 0x9c
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d80:	d00b      	beq.n	8006d9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2208      	movs	r2, #8
 8006d88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2280      	movs	r2, #128	; 0x80
 8006d8e:	589b      	ldr	r3, [r3, r2]
 8006d90:	2208      	movs	r2, #8
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2180      	movs	r1, #128	; 0x80
 8006d98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d9a:	23a4      	movs	r3, #164	; 0xa4
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	4013      	ands	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x198>
 8006da8:	23a0      	movs	r3, #160	; 0xa0
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	04db      	lsls	r3, r3, #19
 8006db2:	4013      	ands	r3, r2
 8006db4:	d00c      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2280      	movs	r2, #128	; 0x80
 8006dbc:	0112      	lsls	r2, r2, #4
 8006dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2280      	movs	r2, #128	; 0x80
 8006dc4:	589b      	ldr	r3, [r3, r2]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2280      	movs	r2, #128	; 0x80
 8006dd4:	589b      	ldr	r3, [r3, r2]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d100      	bne.n	8006ddc <HAL_UART_IRQHandler+0x1a4>
 8006dda:	e1f9      	b.n	80071d0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ddc:	23a4      	movs	r3, #164	; 0xa4
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2220      	movs	r2, #32
 8006de4:	4013      	ands	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006de8:	23a0      	movs	r3, #160	; 0xa0
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2220      	movs	r2, #32
 8006df0:	4013      	ands	r3, r2
 8006df2:	d008      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	0010      	movs	r0, r2
 8006e04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2280      	movs	r2, #128	; 0x80
 8006e0a:	589b      	ldr	r3, [r3, r2]
 8006e0c:	2194      	movs	r1, #148	; 0x94
 8006e0e:	187a      	adds	r2, r7, r1
 8006e10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2240      	movs	r2, #64	; 0x40
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d004      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e20:	187b      	adds	r3, r7, r1
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2228      	movs	r2, #40	; 0x28
 8006e26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e28:	d047      	beq.n	8006eba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f000 fe77 	bl	8007b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2240      	movs	r2, #64	; 0x40
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	d137      	bne.n	8006eb0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e40:	f3ef 8310 	mrs	r3, PRIMASK
 8006e44:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e48:	2090      	movs	r0, #144	; 0x90
 8006e4a:	183a      	adds	r2, r7, r0
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e54:	f383 8810 	msr	PRIMASK, r3
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2140      	movs	r1, #64	; 0x40
 8006e66:	438a      	bics	r2, r1
 8006e68:	609a      	str	r2, [r3, #8]
 8006e6a:	183b      	adds	r3, r7, r0
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e72:	f383 8810 	msr	PRIMASK, r3
}
 8006e76:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d012      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <HAL_UART_IRQHandler+0x2a0>)
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f7fd fa55 	bl	800433c <HAL_DMA_Abort_IT>
 8006e92:	1e03      	subs	r3, r0, #0
 8006e94:	d01a      	beq.n	8006ecc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea4:	e012      	b.n	8006ecc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f000 f9a7 	bl	80071fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	e00d      	b.n	8006ecc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 f9a2 	bl	80071fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	e008      	b.n	8006ecc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f99d 	bl	80071fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2280      	movs	r2, #128	; 0x80
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006eca:	e181      	b.n	80071d0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ecc:	46c0      	nop			; (mov r8, r8)
    return;
 8006ece:	e17f      	b.n	80071d0 <HAL_UART_IRQHandler+0x598>
 8006ed0:	0000080f 	.word	0x0000080f
 8006ed4:	04000120 	.word	0x04000120
 8006ed8:	08007be5 	.word	0x08007be5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d000      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x2ae>
 8006ee4:	e133      	b.n	800714e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ee6:	23a4      	movs	r3, #164	; 0xa4
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2210      	movs	r2, #16
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d100      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x2bc>
 8006ef2:	e12c      	b.n	800714e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ef4:	23a0      	movs	r3, #160	; 0xa0
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2210      	movs	r2, #16
 8006efc:	4013      	ands	r3, r2
 8006efe:	d100      	bne.n	8006f02 <HAL_UART_IRQHandler+0x2ca>
 8006f00:	e125      	b.n	800714e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2210      	movs	r2, #16
 8006f08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2240      	movs	r2, #64	; 0x40
 8006f12:	4013      	ands	r3, r2
 8006f14:	2b40      	cmp	r3, #64	; 0x40
 8006f16:	d000      	beq.n	8006f1a <HAL_UART_IRQHandler+0x2e2>
 8006f18:	e09d      	b.n	8007056 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	217e      	movs	r1, #126	; 0x7e
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d100      	bne.n	8006f32 <HAL_UART_IRQHandler+0x2fa>
 8006f30:	e150      	b.n	80071d4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2258      	movs	r2, #88	; 0x58
 8006f36:	5a9b      	ldrh	r3, [r3, r2]
 8006f38:	187a      	adds	r2, r7, r1
 8006f3a:	8812      	ldrh	r2, [r2, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d300      	bcc.n	8006f42 <HAL_UART_IRQHandler+0x30a>
 8006f40:	e148      	b.n	80071d4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	187a      	adds	r2, r7, r1
 8006f46:	215a      	movs	r1, #90	; 0x5a
 8006f48:	8812      	ldrh	r2, [r2, #0]
 8006f4a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2220      	movs	r2, #32
 8006f56:	4013      	ands	r3, r2
 8006f58:	d16e      	bne.n	8007038 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f64:	2301      	movs	r3, #1
 8006f66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6a:	f383 8810 	msr	PRIMASK, r3
}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	499a      	ldr	r1, [pc, #616]	; (80071e4 <HAL_UART_IRQHandler+0x5ac>)
 8006f7c:	400a      	ands	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f94:	677b      	str	r3, [r7, #116]	; 0x74
 8006f96:	2301      	movs	r3, #1
 8006f98:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9c:	f383 8810 	msr	PRIMASK, r3
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2101      	movs	r1, #1
 8006fae:	438a      	bics	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]
 8006fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb8:	f383 8810 	msr	PRIMASK, r3
}
 8006fbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8006fc8:	2301      	movs	r3, #1
 8006fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fce:	f383 8810 	msr	PRIMASK, r3
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2140      	movs	r1, #64	; 0x40
 8006fe0:	438a      	bics	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
 8006fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fe6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fea:	f383 8810 	msr	PRIMASK, r3
}
 8006fee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8007000:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007002:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007006:	2301      	movs	r3, #1
 8007008:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800700c:	f383 8810 	msr	PRIMASK, r3
}
 8007010:	46c0      	nop			; (mov r8, r8)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2110      	movs	r1, #16
 800701e:	438a      	bics	r2, r1
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007028:	f383 8810 	msr	PRIMASK, r3
}
 800702c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	0018      	movs	r0, r3
 8007034:	f7fd f942 	bl	80042bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2258      	movs	r2, #88	; 0x58
 800703c:	5a9a      	ldrh	r2, [r3, r2]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	215a      	movs	r1, #90	; 0x5a
 8007042:	5a5b      	ldrh	r3, [r3, r1]
 8007044:	b29b      	uxth	r3, r3
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f000 f8dc 	bl	800720c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007054:	e0be      	b.n	80071d4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2258      	movs	r2, #88	; 0x58
 800705a:	5a99      	ldrh	r1, [r3, r2]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	225a      	movs	r2, #90	; 0x5a
 8007060:	5a9b      	ldrh	r3, [r3, r2]
 8007062:	b29a      	uxth	r2, r3
 8007064:	208e      	movs	r0, #142	; 0x8e
 8007066:	183b      	adds	r3, r7, r0
 8007068:	1a8a      	subs	r2, r1, r2
 800706a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	225a      	movs	r2, #90	; 0x5a
 8007070:	5a9b      	ldrh	r3, [r3, r2]
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d100      	bne.n	800707a <HAL_UART_IRQHandler+0x442>
 8007078:	e0ae      	b.n	80071d8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800707a:	183b      	adds	r3, r7, r0
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d100      	bne.n	8007084 <HAL_UART_IRQHandler+0x44c>
 8007082:	e0a9      	b.n	80071d8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007084:	f3ef 8310 	mrs	r3, PRIMASK
 8007088:	60fb      	str	r3, [r7, #12]
  return(result);
 800708a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708c:	2488      	movs	r4, #136	; 0x88
 800708e:	193a      	adds	r2, r7, r4
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	2301      	movs	r3, #1
 8007094:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f383 8810 	msr	PRIMASK, r3
}
 800709c:	46c0      	nop			; (mov r8, r8)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	494f      	ldr	r1, [pc, #316]	; (80071e8 <HAL_UART_IRQHandler+0x5b0>)
 80070aa:	400a      	ands	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	193b      	adds	r3, r7, r4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f383 8810 	msr	PRIMASK, r3
}
 80070ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070bc:	f3ef 8310 	mrs	r3, PRIMASK
 80070c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80070c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c4:	2484      	movs	r4, #132	; 0x84
 80070c6:	193a      	adds	r2, r7, r4
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	2301      	movs	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f383 8810 	msr	PRIMASK, r3
}
 80070d4:	46c0      	nop			; (mov r8, r8)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2101      	movs	r1, #1
 80070e2:	438a      	bics	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]
 80070e6:	193b      	adds	r3, r7, r4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	f383 8810 	msr	PRIMASK, r3
}
 80070f2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007106:	f3ef 8310 	mrs	r3, PRIMASK
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710e:	2480      	movs	r4, #128	; 0x80
 8007110:	193a      	adds	r2, r7, r4
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	2301      	movs	r3, #1
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	f383 8810 	msr	PRIMASK, r3
}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2110      	movs	r1, #16
 800712c:	438a      	bics	r2, r1
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	193b      	adds	r3, r7, r4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	f383 8810 	msr	PRIMASK, r3
}
 800713c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800713e:	183b      	adds	r3, r7, r0
 8007140:	881a      	ldrh	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0011      	movs	r1, r2
 8007146:	0018      	movs	r0, r3
 8007148:	f000 f860 	bl	800720c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800714c:	e044      	b.n	80071d8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800714e:	23a4      	movs	r3, #164	; 0xa4
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	035b      	lsls	r3, r3, #13
 8007158:	4013      	ands	r3, r2
 800715a:	d010      	beq.n	800717e <HAL_UART_IRQHandler+0x546>
 800715c:	239c      	movs	r3, #156	; 0x9c
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	2380      	movs	r3, #128	; 0x80
 8007164:	03db      	lsls	r3, r3, #15
 8007166:	4013      	ands	r3, r2
 8007168:	d009      	beq.n	800717e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2280      	movs	r2, #128	; 0x80
 8007170:	0352      	lsls	r2, r2, #13
 8007172:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	0018      	movs	r0, r3
 8007178:	f000 fd76 	bl	8007c68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800717c:	e02f      	b.n	80071de <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800717e:	23a4      	movs	r3, #164	; 0xa4
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2280      	movs	r2, #128	; 0x80
 8007186:	4013      	ands	r3, r2
 8007188:	d00f      	beq.n	80071aa <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800718a:	23a0      	movs	r3, #160	; 0xa0
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2280      	movs	r2, #128	; 0x80
 8007192:	4013      	ands	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01e      	beq.n	80071dc <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	0010      	movs	r0, r2
 80071a6:	4798      	blx	r3
    }
    return;
 80071a8:	e018      	b.n	80071dc <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071aa:	23a4      	movs	r3, #164	; 0xa4
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2240      	movs	r2, #64	; 0x40
 80071b2:	4013      	ands	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_UART_IRQHandler+0x5a6>
 80071b6:	23a0      	movs	r3, #160	; 0xa0
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2240      	movs	r2, #64	; 0x40
 80071be:	4013      	ands	r3, r2
 80071c0:	d00d      	beq.n	80071de <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	0018      	movs	r0, r3
 80071c6:	f000 fd24 	bl	8007c12 <UART_EndTransmit_IT>
    return;
 80071ca:	e008      	b.n	80071de <HAL_UART_IRQHandler+0x5a6>
      return;
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	e006      	b.n	80071de <HAL_UART_IRQHandler+0x5a6>
    return;
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	e004      	b.n	80071de <HAL_UART_IRQHandler+0x5a6>
      return;
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	e002      	b.n	80071de <HAL_UART_IRQHandler+0x5a6>
      return;
 80071d8:	46c0      	nop			; (mov r8, r8)
 80071da:	e000      	b.n	80071de <HAL_UART_IRQHandler+0x5a6>
    return;
 80071dc:	46c0      	nop			; (mov r8, r8)
  }

}
 80071de:	46bd      	mov	sp, r7
 80071e0:	b02b      	add	sp, #172	; 0xac
 80071e2:	bd90      	pop	{r4, r7, pc}
 80071e4:	fffffeff 	.word	0xfffffeff
 80071e8:	fffffedf 	.word	0xfffffedf

080071ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b002      	add	sp, #8
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007204:	46c0      	nop			; (mov r8, r8)
 8007206:	46bd      	mov	sp, r7
 8007208:	b002      	add	sp, #8
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	000a      	movs	r2, r1
 8007216:	1cbb      	adds	r3, r7, #2
 8007218:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800721a:	46c0      	nop			; (mov r8, r8)
 800721c:	46bd      	mov	sp, r7
 800721e:	b002      	add	sp, #8
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007224:	b5b0      	push	{r4, r5, r7, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	af00      	add	r7, sp, #0
 800722a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800722c:	231a      	movs	r3, #26
 800722e:	2218      	movs	r2, #24
 8007230:	4694      	mov	ip, r2
 8007232:	44bc      	add	ip, r7
 8007234:	4463      	add	r3, ip
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	431a      	orrs	r2, r3
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	431a      	orrs	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	4313      	orrs	r3, r2
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4ab0      	ldr	r2, [pc, #704]	; (800751c <UART_SetConfig+0x2f8>)
 800725a:	4013      	ands	r3, r2
 800725c:	0019      	movs	r1, r3
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007264:	430a      	orrs	r2, r1
 8007266:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4aac      	ldr	r2, [pc, #688]	; (8007520 <UART_SetConfig+0x2fc>)
 8007270:	4013      	ands	r3, r2
 8007272:	0019      	movs	r1, r3
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4aa6      	ldr	r2, [pc, #664]	; (8007524 <UART_SetConfig+0x300>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007296:	4313      	orrs	r3, r2
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	4aa1      	ldr	r2, [pc, #644]	; (8007528 <UART_SetConfig+0x304>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	0019      	movs	r1, r3
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ac:	430a      	orrs	r2, r1
 80072ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a9d      	ldr	r2, [pc, #628]	; (800752c <UART_SetConfig+0x308>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d136      	bne.n	8007328 <UART_SetConfig+0x104>
 80072ba:	4b9d      	ldr	r3, [pc, #628]	; (8007530 <UART_SetConfig+0x30c>)
 80072bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072be:	2203      	movs	r2, #3
 80072c0:	4013      	ands	r3, r2
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d020      	beq.n	8007308 <UART_SetConfig+0xe4>
 80072c6:	d827      	bhi.n	8007318 <UART_SetConfig+0xf4>
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d00d      	beq.n	80072e8 <UART_SetConfig+0xc4>
 80072cc:	d824      	bhi.n	8007318 <UART_SetConfig+0xf4>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <UART_SetConfig+0xb4>
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d010      	beq.n	80072f8 <UART_SetConfig+0xd4>
 80072d6:	e01f      	b.n	8007318 <UART_SetConfig+0xf4>
 80072d8:	231b      	movs	r3, #27
 80072da:	2218      	movs	r2, #24
 80072dc:	4694      	mov	ip, r2
 80072de:	44bc      	add	ip, r7
 80072e0:	4463      	add	r3, ip
 80072e2:	2201      	movs	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e0c5      	b.n	8007474 <UART_SetConfig+0x250>
 80072e8:	231b      	movs	r3, #27
 80072ea:	2218      	movs	r2, #24
 80072ec:	4694      	mov	ip, r2
 80072ee:	44bc      	add	ip, r7
 80072f0:	4463      	add	r3, ip
 80072f2:	2202      	movs	r2, #2
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	e0bd      	b.n	8007474 <UART_SetConfig+0x250>
 80072f8:	231b      	movs	r3, #27
 80072fa:	2218      	movs	r2, #24
 80072fc:	4694      	mov	ip, r2
 80072fe:	44bc      	add	ip, r7
 8007300:	4463      	add	r3, ip
 8007302:	2204      	movs	r2, #4
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	e0b5      	b.n	8007474 <UART_SetConfig+0x250>
 8007308:	231b      	movs	r3, #27
 800730a:	2218      	movs	r2, #24
 800730c:	4694      	mov	ip, r2
 800730e:	44bc      	add	ip, r7
 8007310:	4463      	add	r3, ip
 8007312:	2208      	movs	r2, #8
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e0ad      	b.n	8007474 <UART_SetConfig+0x250>
 8007318:	231b      	movs	r3, #27
 800731a:	2218      	movs	r2, #24
 800731c:	4694      	mov	ip, r2
 800731e:	44bc      	add	ip, r7
 8007320:	4463      	add	r3, ip
 8007322:	2210      	movs	r2, #16
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	e0a5      	b.n	8007474 <UART_SetConfig+0x250>
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a81      	ldr	r2, [pc, #516]	; (8007534 <UART_SetConfig+0x310>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d136      	bne.n	80073a0 <UART_SetConfig+0x17c>
 8007332:	4b7f      	ldr	r3, [pc, #508]	; (8007530 <UART_SetConfig+0x30c>)
 8007334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007336:	220c      	movs	r2, #12
 8007338:	4013      	ands	r3, r2
 800733a:	2b0c      	cmp	r3, #12
 800733c:	d020      	beq.n	8007380 <UART_SetConfig+0x15c>
 800733e:	d827      	bhi.n	8007390 <UART_SetConfig+0x16c>
 8007340:	2b08      	cmp	r3, #8
 8007342:	d00d      	beq.n	8007360 <UART_SetConfig+0x13c>
 8007344:	d824      	bhi.n	8007390 <UART_SetConfig+0x16c>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <UART_SetConfig+0x12c>
 800734a:	2b04      	cmp	r3, #4
 800734c:	d010      	beq.n	8007370 <UART_SetConfig+0x14c>
 800734e:	e01f      	b.n	8007390 <UART_SetConfig+0x16c>
 8007350:	231b      	movs	r3, #27
 8007352:	2218      	movs	r2, #24
 8007354:	4694      	mov	ip, r2
 8007356:	44bc      	add	ip, r7
 8007358:	4463      	add	r3, ip
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	e089      	b.n	8007474 <UART_SetConfig+0x250>
 8007360:	231b      	movs	r3, #27
 8007362:	2218      	movs	r2, #24
 8007364:	4694      	mov	ip, r2
 8007366:	44bc      	add	ip, r7
 8007368:	4463      	add	r3, ip
 800736a:	2202      	movs	r2, #2
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e081      	b.n	8007474 <UART_SetConfig+0x250>
 8007370:	231b      	movs	r3, #27
 8007372:	2218      	movs	r2, #24
 8007374:	4694      	mov	ip, r2
 8007376:	44bc      	add	ip, r7
 8007378:	4463      	add	r3, ip
 800737a:	2204      	movs	r2, #4
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e079      	b.n	8007474 <UART_SetConfig+0x250>
 8007380:	231b      	movs	r3, #27
 8007382:	2218      	movs	r2, #24
 8007384:	4694      	mov	ip, r2
 8007386:	44bc      	add	ip, r7
 8007388:	4463      	add	r3, ip
 800738a:	2208      	movs	r2, #8
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	e071      	b.n	8007474 <UART_SetConfig+0x250>
 8007390:	231b      	movs	r3, #27
 8007392:	2218      	movs	r2, #24
 8007394:	4694      	mov	ip, r2
 8007396:	44bc      	add	ip, r7
 8007398:	4463      	add	r3, ip
 800739a:	2210      	movs	r2, #16
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e069      	b.n	8007474 <UART_SetConfig+0x250>
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a64      	ldr	r2, [pc, #400]	; (8007538 <UART_SetConfig+0x314>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d107      	bne.n	80073ba <UART_SetConfig+0x196>
 80073aa:	231b      	movs	r3, #27
 80073ac:	2218      	movs	r2, #24
 80073ae:	4694      	mov	ip, r2
 80073b0:	44bc      	add	ip, r7
 80073b2:	4463      	add	r3, ip
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e05c      	b.n	8007474 <UART_SetConfig+0x250>
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a5f      	ldr	r2, [pc, #380]	; (800753c <UART_SetConfig+0x318>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d107      	bne.n	80073d4 <UART_SetConfig+0x1b0>
 80073c4:	231b      	movs	r3, #27
 80073c6:	2218      	movs	r2, #24
 80073c8:	4694      	mov	ip, r2
 80073ca:	44bc      	add	ip, r7
 80073cc:	4463      	add	r3, ip
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	e04f      	b.n	8007474 <UART_SetConfig+0x250>
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a52      	ldr	r2, [pc, #328]	; (8007524 <UART_SetConfig+0x300>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d143      	bne.n	8007466 <UART_SetConfig+0x242>
 80073de:	4b54      	ldr	r3, [pc, #336]	; (8007530 <UART_SetConfig+0x30c>)
 80073e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e2:	23c0      	movs	r3, #192	; 0xc0
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	4013      	ands	r3, r2
 80073e8:	22c0      	movs	r2, #192	; 0xc0
 80073ea:	0112      	lsls	r2, r2, #4
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d02a      	beq.n	8007446 <UART_SetConfig+0x222>
 80073f0:	22c0      	movs	r2, #192	; 0xc0
 80073f2:	0112      	lsls	r2, r2, #4
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d82e      	bhi.n	8007456 <UART_SetConfig+0x232>
 80073f8:	2280      	movs	r2, #128	; 0x80
 80073fa:	0112      	lsls	r2, r2, #4
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d012      	beq.n	8007426 <UART_SetConfig+0x202>
 8007400:	2280      	movs	r2, #128	; 0x80
 8007402:	0112      	lsls	r2, r2, #4
 8007404:	4293      	cmp	r3, r2
 8007406:	d826      	bhi.n	8007456 <UART_SetConfig+0x232>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <UART_SetConfig+0x1f2>
 800740c:	2280      	movs	r2, #128	; 0x80
 800740e:	00d2      	lsls	r2, r2, #3
 8007410:	4293      	cmp	r3, r2
 8007412:	d010      	beq.n	8007436 <UART_SetConfig+0x212>
 8007414:	e01f      	b.n	8007456 <UART_SetConfig+0x232>
 8007416:	231b      	movs	r3, #27
 8007418:	2218      	movs	r2, #24
 800741a:	4694      	mov	ip, r2
 800741c:	44bc      	add	ip, r7
 800741e:	4463      	add	r3, ip
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e026      	b.n	8007474 <UART_SetConfig+0x250>
 8007426:	231b      	movs	r3, #27
 8007428:	2218      	movs	r2, #24
 800742a:	4694      	mov	ip, r2
 800742c:	44bc      	add	ip, r7
 800742e:	4463      	add	r3, ip
 8007430:	2202      	movs	r2, #2
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	e01e      	b.n	8007474 <UART_SetConfig+0x250>
 8007436:	231b      	movs	r3, #27
 8007438:	2218      	movs	r2, #24
 800743a:	4694      	mov	ip, r2
 800743c:	44bc      	add	ip, r7
 800743e:	4463      	add	r3, ip
 8007440:	2204      	movs	r2, #4
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	e016      	b.n	8007474 <UART_SetConfig+0x250>
 8007446:	231b      	movs	r3, #27
 8007448:	2218      	movs	r2, #24
 800744a:	4694      	mov	ip, r2
 800744c:	44bc      	add	ip, r7
 800744e:	4463      	add	r3, ip
 8007450:	2208      	movs	r2, #8
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	e00e      	b.n	8007474 <UART_SetConfig+0x250>
 8007456:	231b      	movs	r3, #27
 8007458:	2218      	movs	r2, #24
 800745a:	4694      	mov	ip, r2
 800745c:	44bc      	add	ip, r7
 800745e:	4463      	add	r3, ip
 8007460:	2210      	movs	r2, #16
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	e006      	b.n	8007474 <UART_SetConfig+0x250>
 8007466:	231b      	movs	r3, #27
 8007468:	2218      	movs	r2, #24
 800746a:	4694      	mov	ip, r2
 800746c:	44bc      	add	ip, r7
 800746e:	4463      	add	r3, ip
 8007470:	2210      	movs	r2, #16
 8007472:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a2a      	ldr	r2, [pc, #168]	; (8007524 <UART_SetConfig+0x300>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d000      	beq.n	8007480 <UART_SetConfig+0x25c>
 800747e:	e09e      	b.n	80075be <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007480:	231b      	movs	r3, #27
 8007482:	2218      	movs	r2, #24
 8007484:	4694      	mov	ip, r2
 8007486:	44bc      	add	ip, r7
 8007488:	4463      	add	r3, ip
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b08      	cmp	r3, #8
 800748e:	d01d      	beq.n	80074cc <UART_SetConfig+0x2a8>
 8007490:	dc20      	bgt.n	80074d4 <UART_SetConfig+0x2b0>
 8007492:	2b04      	cmp	r3, #4
 8007494:	d015      	beq.n	80074c2 <UART_SetConfig+0x29e>
 8007496:	dc1d      	bgt.n	80074d4 <UART_SetConfig+0x2b0>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <UART_SetConfig+0x27e>
 800749c:	2b02      	cmp	r3, #2
 800749e:	d005      	beq.n	80074ac <UART_SetConfig+0x288>
 80074a0:	e018      	b.n	80074d4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a2:	f7fe fd17 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 80074a6:	0003      	movs	r3, r0
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074aa:	e01d      	b.n	80074e8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ac:	4b20      	ldr	r3, [pc, #128]	; (8007530 <UART_SetConfig+0x30c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2210      	movs	r2, #16
 80074b2:	4013      	ands	r3, r2
 80074b4:	d002      	beq.n	80074bc <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80074b6:	4b22      	ldr	r3, [pc, #136]	; (8007540 <UART_SetConfig+0x31c>)
 80074b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074ba:	e015      	b.n	80074e8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 80074bc:	4b21      	ldr	r3, [pc, #132]	; (8007544 <UART_SetConfig+0x320>)
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074c0:	e012      	b.n	80074e8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c2:	f7fe fc57 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 80074c6:	0003      	movs	r3, r0
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074ca:	e00d      	b.n	80074e8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074d2:	e009      	b.n	80074e8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80074d8:	231a      	movs	r3, #26
 80074da:	2218      	movs	r2, #24
 80074dc:	4694      	mov	ip, r2
 80074de:	44bc      	add	ip, r7
 80074e0:	4463      	add	r3, ip
 80074e2:	2201      	movs	r2, #1
 80074e4:	701a      	strb	r2, [r3, #0]
        break;
 80074e6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d100      	bne.n	80074f0 <UART_SetConfig+0x2cc>
 80074ee:	e13c      	b.n	800776a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	0013      	movs	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	189b      	adds	r3, r3, r2
 80074fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d305      	bcc.n	800750c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007508:	429a      	cmp	r2, r3
 800750a:	d91d      	bls.n	8007548 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800750c:	231a      	movs	r3, #26
 800750e:	2218      	movs	r2, #24
 8007510:	4694      	mov	ip, r2
 8007512:	44bc      	add	ip, r7
 8007514:	4463      	add	r3, ip
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e126      	b.n	800776a <UART_SetConfig+0x546>
 800751c:	efff69f3 	.word	0xefff69f3
 8007520:	ffffcfff 	.word	0xffffcfff
 8007524:	40004800 	.word	0x40004800
 8007528:	fffff4ff 	.word	0xfffff4ff
 800752c:	40013800 	.word	0x40013800
 8007530:	40021000 	.word	0x40021000
 8007534:	40004400 	.word	0x40004400
 8007538:	40004c00 	.word	0x40004c00
 800753c:	40005000 	.word	0x40005000
 8007540:	003d0900 	.word	0x003d0900
 8007544:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	6939      	ldr	r1, [r7, #16]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	000b      	movs	r3, r1
 8007556:	0e1b      	lsrs	r3, r3, #24
 8007558:	0010      	movs	r0, r2
 800755a:	0205      	lsls	r5, r0, #8
 800755c:	431d      	orrs	r5, r3
 800755e:	000b      	movs	r3, r1
 8007560:	021c      	lsls	r4, r3, #8
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	60bb      	str	r3, [r7, #8]
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	68b8      	ldr	r0, [r7, #8]
 8007570:	68f9      	ldr	r1, [r7, #12]
 8007572:	1900      	adds	r0, r0, r4
 8007574:	4169      	adcs	r1, r5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	2300      	movs	r3, #0
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f7f8 ffca 	bl	800051c <__aeabi_uldivmod>
 8007588:	0002      	movs	r2, r0
 800758a:	000b      	movs	r3, r1
 800758c:	0013      	movs	r3, r2
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007592:	23c0      	movs	r3, #192	; 0xc0
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	429a      	cmp	r2, r3
 8007598:	d309      	bcc.n	80075ae <UART_SetConfig+0x38a>
 800759a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759c:	2380      	movs	r3, #128	; 0x80
 800759e:	035b      	lsls	r3, r3, #13
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d204      	bcs.n	80075ae <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075aa:	60da      	str	r2, [r3, #12]
 80075ac:	e0dd      	b.n	800776a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80075ae:	231a      	movs	r3, #26
 80075b0:	2218      	movs	r2, #24
 80075b2:	4694      	mov	ip, r2
 80075b4:	44bc      	add	ip, r7
 80075b6:	4463      	add	r3, ip
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	e0d5      	b.n	800776a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	69da      	ldr	r2, [r3, #28]
 80075c2:	2380      	movs	r3, #128	; 0x80
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d000      	beq.n	80075cc <UART_SetConfig+0x3a8>
 80075ca:	e074      	b.n	80076b6 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80075cc:	231b      	movs	r3, #27
 80075ce:	2218      	movs	r2, #24
 80075d0:	4694      	mov	ip, r2
 80075d2:	44bc      	add	ip, r7
 80075d4:	4463      	add	r3, ip
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d822      	bhi.n	8007622 <UART_SetConfig+0x3fe>
 80075dc:	009a      	lsls	r2, r3, #2
 80075de:	4b6b      	ldr	r3, [pc, #428]	; (800778c <UART_SetConfig+0x568>)
 80075e0:	18d3      	adds	r3, r2, r3
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e6:	f7fe fc75 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 80075ea:	0003      	movs	r3, r0
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ee:	e022      	b.n	8007636 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075f0:	f7fe fc86 	bl	8005f00 <HAL_RCC_GetPCLK2Freq>
 80075f4:	0003      	movs	r3, r0
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075f8:	e01d      	b.n	8007636 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075fa:	4b65      	ldr	r3, [pc, #404]	; (8007790 <UART_SetConfig+0x56c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2210      	movs	r2, #16
 8007600:	4013      	ands	r3, r2
 8007602:	d002      	beq.n	800760a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007604:	4b63      	ldr	r3, [pc, #396]	; (8007794 <UART_SetConfig+0x570>)
 8007606:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007608:	e015      	b.n	8007636 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800760a:	4b63      	ldr	r3, [pc, #396]	; (8007798 <UART_SetConfig+0x574>)
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800760e:	e012      	b.n	8007636 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007610:	f7fe fbb0 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8007614:	0003      	movs	r3, r0
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007618:	e00d      	b.n	8007636 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761a:	2380      	movs	r3, #128	; 0x80
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007620:	e009      	b.n	8007636 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007626:	231a      	movs	r3, #26
 8007628:	2218      	movs	r2, #24
 800762a:	4694      	mov	ip, r2
 800762c:	44bc      	add	ip, r7
 800762e:	4463      	add	r3, ip
 8007630:	2201      	movs	r2, #1
 8007632:	701a      	strb	r2, [r3, #0]
        break;
 8007634:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d100      	bne.n	800763e <UART_SetConfig+0x41a>
 800763c:	e095      	b.n	800776a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	005a      	lsls	r2, r3, #1
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	085b      	lsrs	r3, r3, #1
 8007648:	18d2      	adds	r2, r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	0019      	movs	r1, r3
 8007650:	0010      	movs	r0, r2
 8007652:	f7f8 fd75 	bl	8000140 <__udivsi3>
 8007656:	0003      	movs	r3, r0
 8007658:	b29b      	uxth	r3, r3
 800765a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	2b0f      	cmp	r3, #15
 8007660:	d921      	bls.n	80076a6 <UART_SetConfig+0x482>
 8007662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007664:	2380      	movs	r3, #128	; 0x80
 8007666:	025b      	lsls	r3, r3, #9
 8007668:	429a      	cmp	r2, r3
 800766a:	d21c      	bcs.n	80076a6 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	b29a      	uxth	r2, r3
 8007670:	200e      	movs	r0, #14
 8007672:	2418      	movs	r4, #24
 8007674:	193b      	adds	r3, r7, r4
 8007676:	181b      	adds	r3, r3, r0
 8007678:	210f      	movs	r1, #15
 800767a:	438a      	bics	r2, r1
 800767c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	b29b      	uxth	r3, r3
 8007684:	2207      	movs	r2, #7
 8007686:	4013      	ands	r3, r2
 8007688:	b299      	uxth	r1, r3
 800768a:	193b      	adds	r3, r7, r4
 800768c:	181b      	adds	r3, r3, r0
 800768e:	193a      	adds	r2, r7, r4
 8007690:	1812      	adds	r2, r2, r0
 8007692:	8812      	ldrh	r2, [r2, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	193a      	adds	r2, r7, r4
 800769e:	1812      	adds	r2, r2, r0
 80076a0:	8812      	ldrh	r2, [r2, #0]
 80076a2:	60da      	str	r2, [r3, #12]
 80076a4:	e061      	b.n	800776a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80076a6:	231a      	movs	r3, #26
 80076a8:	2218      	movs	r2, #24
 80076aa:	4694      	mov	ip, r2
 80076ac:	44bc      	add	ip, r7
 80076ae:	4463      	add	r3, ip
 80076b0:	2201      	movs	r2, #1
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e059      	b.n	800776a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076b6:	231b      	movs	r3, #27
 80076b8:	2218      	movs	r2, #24
 80076ba:	4694      	mov	ip, r2
 80076bc:	44bc      	add	ip, r7
 80076be:	4463      	add	r3, ip
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b08      	cmp	r3, #8
 80076c4:	d822      	bhi.n	800770c <UART_SetConfig+0x4e8>
 80076c6:	009a      	lsls	r2, r3, #2
 80076c8:	4b34      	ldr	r3, [pc, #208]	; (800779c <UART_SetConfig+0x578>)
 80076ca:	18d3      	adds	r3, r2, r3
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d0:	f7fe fc00 	bl	8005ed4 <HAL_RCC_GetPCLK1Freq>
 80076d4:	0003      	movs	r3, r0
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076d8:	e022      	b.n	8007720 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076da:	f7fe fc11 	bl	8005f00 <HAL_RCC_GetPCLK2Freq>
 80076de:	0003      	movs	r3, r0
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076e2:	e01d      	b.n	8007720 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e4:	4b2a      	ldr	r3, [pc, #168]	; (8007790 <UART_SetConfig+0x56c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2210      	movs	r2, #16
 80076ea:	4013      	ands	r3, r2
 80076ec:	d002      	beq.n	80076f4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80076ee:	4b29      	ldr	r3, [pc, #164]	; (8007794 <UART_SetConfig+0x570>)
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076f2:	e015      	b.n	8007720 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80076f4:	4b28      	ldr	r3, [pc, #160]	; (8007798 <UART_SetConfig+0x574>)
 80076f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076f8:	e012      	b.n	8007720 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076fa:	f7fe fb3b 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 80076fe:	0003      	movs	r3, r0
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007702:	e00d      	b.n	8007720 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007704:	2380      	movs	r3, #128	; 0x80
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800770a:	e009      	b.n	8007720 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007710:	231a      	movs	r3, #26
 8007712:	2218      	movs	r2, #24
 8007714:	4694      	mov	ip, r2
 8007716:	44bc      	add	ip, r7
 8007718:	4463      	add	r3, ip
 800771a:	2201      	movs	r2, #1
 800771c:	701a      	strb	r2, [r3, #0]
        break;
 800771e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d021      	beq.n	800776a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	085a      	lsrs	r2, r3, #1
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	18d2      	adds	r2, r2, r3
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	0019      	movs	r1, r3
 8007736:	0010      	movs	r0, r2
 8007738:	f7f8 fd02 	bl	8000140 <__udivsi3>
 800773c:	0003      	movs	r3, r0
 800773e:	b29b      	uxth	r3, r3
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	2b0f      	cmp	r3, #15
 8007746:	d909      	bls.n	800775c <UART_SetConfig+0x538>
 8007748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774a:	2380      	movs	r3, #128	; 0x80
 800774c:	025b      	lsls	r3, r3, #9
 800774e:	429a      	cmp	r2, r3
 8007750:	d204      	bcs.n	800775c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	e006      	b.n	800776a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800775c:	231a      	movs	r3, #26
 800775e:	2218      	movs	r2, #24
 8007760:	4694      	mov	ip, r2
 8007762:	44bc      	add	ip, r7
 8007764:	4463      	add	r3, ip
 8007766:	2201      	movs	r2, #1
 8007768:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	2200      	movs	r2, #0
 800776e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2200      	movs	r2, #0
 8007774:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007776:	231a      	movs	r3, #26
 8007778:	2218      	movs	r2, #24
 800777a:	4694      	mov	ip, r2
 800777c:	44bc      	add	ip, r7
 800777e:	4463      	add	r3, ip
 8007780:	781b      	ldrb	r3, [r3, #0]
}
 8007782:	0018      	movs	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	b00e      	add	sp, #56	; 0x38
 8007788:	bdb0      	pop	{r4, r5, r7, pc}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	0800b084 	.word	0x0800b084
 8007790:	40021000 	.word	0x40021000
 8007794:	003d0900 	.word	0x003d0900
 8007798:	00f42400 	.word	0x00f42400
 800779c:	0800b0a8 	.word	0x0800b0a8

080077a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	2201      	movs	r2, #1
 80077ae:	4013      	ands	r3, r2
 80077b0:	d00b      	beq.n	80077ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4a4a      	ldr	r2, [pc, #296]	; (80078e4 <UART_AdvFeatureConfig+0x144>)
 80077ba:	4013      	ands	r3, r2
 80077bc:	0019      	movs	r1, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2202      	movs	r2, #2
 80077d0:	4013      	ands	r3, r2
 80077d2:	d00b      	beq.n	80077ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	4a43      	ldr	r2, [pc, #268]	; (80078e8 <UART_AdvFeatureConfig+0x148>)
 80077dc:	4013      	ands	r3, r2
 80077de:	0019      	movs	r1, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	2204      	movs	r2, #4
 80077f2:	4013      	ands	r3, r2
 80077f4:	d00b      	beq.n	800780e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4a3b      	ldr	r2, [pc, #236]	; (80078ec <UART_AdvFeatureConfig+0x14c>)
 80077fe:	4013      	ands	r3, r2
 8007800:	0019      	movs	r1, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	2208      	movs	r2, #8
 8007814:	4013      	ands	r3, r2
 8007816:	d00b      	beq.n	8007830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	4a34      	ldr	r2, [pc, #208]	; (80078f0 <UART_AdvFeatureConfig+0x150>)
 8007820:	4013      	ands	r3, r2
 8007822:	0019      	movs	r1, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	2210      	movs	r2, #16
 8007836:	4013      	ands	r3, r2
 8007838:	d00b      	beq.n	8007852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a2c      	ldr	r2, [pc, #176]	; (80078f4 <UART_AdvFeatureConfig+0x154>)
 8007842:	4013      	ands	r3, r2
 8007844:	0019      	movs	r1, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2220      	movs	r2, #32
 8007858:	4013      	ands	r3, r2
 800785a:	d00b      	beq.n	8007874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	4a25      	ldr	r2, [pc, #148]	; (80078f8 <UART_AdvFeatureConfig+0x158>)
 8007864:	4013      	ands	r3, r2
 8007866:	0019      	movs	r1, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2240      	movs	r2, #64	; 0x40
 800787a:	4013      	ands	r3, r2
 800787c:	d01d      	beq.n	80078ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4a1d      	ldr	r2, [pc, #116]	; (80078fc <UART_AdvFeatureConfig+0x15c>)
 8007886:	4013      	ands	r3, r2
 8007888:	0019      	movs	r1, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	035b      	lsls	r3, r3, #13
 800789e:	429a      	cmp	r2, r3
 80078a0:	d10b      	bne.n	80078ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <UART_AdvFeatureConfig+0x160>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	0019      	movs	r1, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	2280      	movs	r2, #128	; 0x80
 80078c0:	4013      	ands	r3, r2
 80078c2:	d00b      	beq.n	80078dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4a0e      	ldr	r2, [pc, #56]	; (8007904 <UART_AdvFeatureConfig+0x164>)
 80078cc:	4013      	ands	r3, r2
 80078ce:	0019      	movs	r1, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	fffdffff 	.word	0xfffdffff
 80078e8:	fffeffff 	.word	0xfffeffff
 80078ec:	fffbffff 	.word	0xfffbffff
 80078f0:	ffff7fff 	.word	0xffff7fff
 80078f4:	ffffefff 	.word	0xffffefff
 80078f8:	ffffdfff 	.word	0xffffdfff
 80078fc:	ffefffff 	.word	0xffefffff
 8007900:	ff9fffff 	.word	0xff9fffff
 8007904:	fff7ffff 	.word	0xfff7ffff

08007908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af02      	add	r7, sp, #8
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2280      	movs	r2, #128	; 0x80
 8007914:	2100      	movs	r1, #0
 8007916:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007918:	f7fc fbc4 	bl	80040a4 <HAL_GetTick>
 800791c:	0003      	movs	r3, r0
 800791e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2208      	movs	r2, #8
 8007928:	4013      	ands	r3, r2
 800792a:	2b08      	cmp	r3, #8
 800792c:	d10c      	bne.n	8007948 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2280      	movs	r2, #128	; 0x80
 8007932:	0391      	lsls	r1, r2, #14
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4a17      	ldr	r2, [pc, #92]	; (8007994 <UART_CheckIdleState+0x8c>)
 8007938:	9200      	str	r2, [sp, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	f000 f82c 	bl	8007998 <UART_WaitOnFlagUntilTimeout>
 8007940:	1e03      	subs	r3, r0, #0
 8007942:	d001      	beq.n	8007948 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e021      	b.n	800798c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2204      	movs	r2, #4
 8007950:	4013      	ands	r3, r2
 8007952:	2b04      	cmp	r3, #4
 8007954:	d10c      	bne.n	8007970 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2280      	movs	r2, #128	; 0x80
 800795a:	03d1      	lsls	r1, r2, #15
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <UART_CheckIdleState+0x8c>)
 8007960:	9200      	str	r2, [sp, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	f000 f818 	bl	8007998 <UART_WaitOnFlagUntilTimeout>
 8007968:	1e03      	subs	r3, r0, #0
 800796a:	d001      	beq.n	8007970 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e00d      	b.n	800798c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2274      	movs	r2, #116	; 0x74
 8007986:	2100      	movs	r1, #0
 8007988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	0018      	movs	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	b004      	add	sp, #16
 8007992:	bd80      	pop	{r7, pc}
 8007994:	01ffffff 	.word	0x01ffffff

08007998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b094      	sub	sp, #80	; 0x50
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	1dfb      	adds	r3, r7, #7
 80079a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a8:	e0a3      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ac:	3301      	adds	r3, #1
 80079ae:	d100      	bne.n	80079b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80079b0:	e09f      	b.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b2:	f7fc fb77 	bl	80040a4 <HAL_GetTick>
 80079b6:	0002      	movs	r2, r0
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079be:	429a      	cmp	r2, r3
 80079c0:	d302      	bcc.n	80079c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d13d      	bne.n	8007a44 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c8:	f3ef 8310 	mrs	r3, PRIMASK
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079d0:	647b      	str	r3, [r7, #68]	; 0x44
 80079d2:	2301      	movs	r3, #1
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	f383 8810 	msr	PRIMASK, r3
}
 80079dc:	46c0      	nop			; (mov r8, r8)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	494c      	ldr	r1, [pc, #304]	; (8007b1c <UART_WaitOnFlagUntilTimeout+0x184>)
 80079ea:	400a      	ands	r2, r1
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	f383 8810 	msr	PRIMASK, r3
}
 80079f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079fa:	f3ef 8310 	mrs	r3, PRIMASK
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	643b      	str	r3, [r7, #64]	; 0x40
 8007a04:	2301      	movs	r3, #1
 8007a06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	f383 8810 	msr	PRIMASK, r3
}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	438a      	bics	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]
 8007a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a26:	f383 8810 	msr	PRIMASK, r3
}
 8007a2a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2274      	movs	r2, #116	; 0x74
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e067      	b.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	d050      	beq.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69da      	ldr	r2, [r3, #28]
 8007a56:	2380      	movs	r3, #128	; 0x80
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	401a      	ands	r2, r3
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d146      	bne.n	8007af2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2280      	movs	r2, #128	; 0x80
 8007a6a:	0112      	lsls	r2, r2, #4
 8007a6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a72:	613b      	str	r3, [r7, #16]
  return(result);
 8007a74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f383 8810 	msr	PRIMASK, r3
}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4923      	ldr	r1, [pc, #140]	; (8007b1c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007a90:	400a      	ands	r2, r1
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f383 8810 	msr	PRIMASK, r3
}
 8007a9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aaa:	2301      	movs	r3, #1
 8007aac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	f383 8810 	msr	PRIMASK, r3
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	438a      	bics	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]
 8007ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	f383 8810 	msr	PRIMASK, r3
}
 8007ad0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2220      	movs	r2, #32
 8007adc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2280      	movs	r2, #128	; 0x80
 8007ae2:	2120      	movs	r1, #32
 8007ae4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2274      	movs	r2, #116	; 0x74
 8007aea:	2100      	movs	r1, #0
 8007aec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e010      	b.n	8007b14 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4013      	ands	r3, r2
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	425a      	negs	r2, r3
 8007b02:	4153      	adcs	r3, r2
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	001a      	movs	r2, r3
 8007b08:	1dfb      	adds	r3, r7, #7
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d100      	bne.n	8007b12 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007b10:	e74b      	b.n	80079aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b014      	add	sp, #80	; 0x50
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	fffffe5f 	.word	0xfffffe5f

08007b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	; 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b28:	f3ef 8310 	mrs	r3, PRIMASK
 8007b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
 8007b32:	2301      	movs	r3, #1
 8007b34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f383 8810 	msr	PRIMASK, r3
}
 8007b3c:	46c0      	nop			; (mov r8, r8)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4925      	ldr	r1, [pc, #148]	; (8007be0 <UART_EndRxTransfer+0xc0>)
 8007b4a:	400a      	ands	r2, r1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f383 8810 	msr	PRIMASK, r3
}
 8007b58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b5e:	623b      	str	r3, [r7, #32]
  return(result);
 8007b60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b62:	633b      	str	r3, [r7, #48]	; 0x30
 8007b64:	2301      	movs	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	f383 8810 	msr	PRIMASK, r3
}
 8007b6e:	46c0      	nop			; (mov r8, r8)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	438a      	bics	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	f383 8810 	msr	PRIMASK, r3
}
 8007b8a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d118      	bne.n	8007bc6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b94:	f3ef 8310 	mrs	r3, PRIMASK
 8007b98:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f383 8810 	msr	PRIMASK, r3
}
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2110      	movs	r1, #16
 8007bb6:	438a      	bics	r2, r1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f383 8810 	msr	PRIMASK, r3
}
 8007bc4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007bd8:	46c0      	nop			; (mov r8, r8)
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	b00e      	add	sp, #56	; 0x38
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	fffffedf 	.word	0xfffffedf

08007be4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	225a      	movs	r2, #90	; 0x5a
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2252      	movs	r2, #82	; 0x52
 8007bfe:	2100      	movs	r1, #0
 8007c00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f7ff faf9 	bl	80071fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b086      	sub	sp, #24
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c20:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	2301      	movs	r3, #1
 8007c26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f383 8810 	msr	PRIMASK, r3
}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2140      	movs	r1, #64	; 0x40
 8007c3c:	438a      	bics	r2, r1
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f383 8810 	msr	PRIMASK, r3
}
 8007c4a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f7ff fac6 	bl	80071ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c60:	46c0      	nop			; (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b006      	add	sp, #24
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b002      	add	sp, #8
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <__errno>:
 8007c78:	4b01      	ldr	r3, [pc, #4]	; (8007c80 <__errno+0x8>)
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	4770      	bx	lr
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	2000000c 	.word	0x2000000c

08007c84 <__libc_init_array>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	2600      	movs	r6, #0
 8007c88:	4d0c      	ldr	r5, [pc, #48]	; (8007cbc <__libc_init_array+0x38>)
 8007c8a:	4c0d      	ldr	r4, [pc, #52]	; (8007cc0 <__libc_init_array+0x3c>)
 8007c8c:	1b64      	subs	r4, r4, r5
 8007c8e:	10a4      	asrs	r4, r4, #2
 8007c90:	42a6      	cmp	r6, r4
 8007c92:	d109      	bne.n	8007ca8 <__libc_init_array+0x24>
 8007c94:	2600      	movs	r6, #0
 8007c96:	f003 f911 	bl	800aebc <_init>
 8007c9a:	4d0a      	ldr	r5, [pc, #40]	; (8007cc4 <__libc_init_array+0x40>)
 8007c9c:	4c0a      	ldr	r4, [pc, #40]	; (8007cc8 <__libc_init_array+0x44>)
 8007c9e:	1b64      	subs	r4, r4, r5
 8007ca0:	10a4      	asrs	r4, r4, #2
 8007ca2:	42a6      	cmp	r6, r4
 8007ca4:	d105      	bne.n	8007cb2 <__libc_init_array+0x2e>
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}
 8007ca8:	00b3      	lsls	r3, r6, #2
 8007caa:	58eb      	ldr	r3, [r5, r3]
 8007cac:	4798      	blx	r3
 8007cae:	3601      	adds	r6, #1
 8007cb0:	e7ee      	b.n	8007c90 <__libc_init_array+0xc>
 8007cb2:	00b3      	lsls	r3, r6, #2
 8007cb4:	58eb      	ldr	r3, [r5, r3]
 8007cb6:	4798      	blx	r3
 8007cb8:	3601      	adds	r6, #1
 8007cba:	e7f2      	b.n	8007ca2 <__libc_init_array+0x1e>
 8007cbc:	0800b4d4 	.word	0x0800b4d4
 8007cc0:	0800b4d4 	.word	0x0800b4d4
 8007cc4:	0800b4d4 	.word	0x0800b4d4
 8007cc8:	0800b4d8 	.word	0x0800b4d8

08007ccc <memset>:
 8007ccc:	0003      	movs	r3, r0
 8007cce:	1882      	adds	r2, r0, r2
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d100      	bne.n	8007cd6 <memset+0xa>
 8007cd4:	4770      	bx	lr
 8007cd6:	7019      	strb	r1, [r3, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	e7f9      	b.n	8007cd0 <memset+0x4>

08007cdc <__cvt>:
 8007cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cde:	001e      	movs	r6, r3
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	0014      	movs	r4, r2
 8007ce4:	b08b      	sub	sp, #44	; 0x2c
 8007ce6:	429e      	cmp	r6, r3
 8007ce8:	da04      	bge.n	8007cf4 <__cvt+0x18>
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	0609      	lsls	r1, r1, #24
 8007cee:	1873      	adds	r3, r6, r1
 8007cf0:	001e      	movs	r6, r3
 8007cf2:	232d      	movs	r3, #45	; 0x2d
 8007cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cf6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007cf8:	7013      	strb	r3, [r2, #0]
 8007cfa:	2320      	movs	r3, #32
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	439f      	bics	r7, r3
 8007d00:	2f46      	cmp	r7, #70	; 0x46
 8007d02:	d007      	beq.n	8007d14 <__cvt+0x38>
 8007d04:	003b      	movs	r3, r7
 8007d06:	3b45      	subs	r3, #69	; 0x45
 8007d08:	4259      	negs	r1, r3
 8007d0a:	414b      	adcs	r3, r1
 8007d0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d0e:	3a01      	subs	r2, #1
 8007d10:	18cb      	adds	r3, r1, r3
 8007d12:	9310      	str	r3, [sp, #64]	; 0x40
 8007d14:	ab09      	add	r3, sp, #36	; 0x24
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	ab08      	add	r3, sp, #32
 8007d1a:	9303      	str	r3, [sp, #12]
 8007d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d1e:	9200      	str	r2, [sp, #0]
 8007d20:	9302      	str	r3, [sp, #8]
 8007d22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d24:	0022      	movs	r2, r4
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	0033      	movs	r3, r6
 8007d2a:	f000 fd11 	bl	8008750 <_dtoa_r>
 8007d2e:	0005      	movs	r5, r0
 8007d30:	2f47      	cmp	r7, #71	; 0x47
 8007d32:	d102      	bne.n	8007d3a <__cvt+0x5e>
 8007d34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d36:	07db      	lsls	r3, r3, #31
 8007d38:	d528      	bpl.n	8007d8c <__cvt+0xb0>
 8007d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d3c:	18eb      	adds	r3, r5, r3
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	2f46      	cmp	r7, #70	; 0x46
 8007d42:	d114      	bne.n	8007d6e <__cvt+0x92>
 8007d44:	782b      	ldrb	r3, [r5, #0]
 8007d46:	2b30      	cmp	r3, #48	; 0x30
 8007d48:	d10c      	bne.n	8007d64 <__cvt+0x88>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	0020      	movs	r0, r4
 8007d50:	0031      	movs	r1, r6
 8007d52:	f7f8 fb7b 	bl	800044c <__aeabi_dcmpeq>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d104      	bne.n	8007d64 <__cvt+0x88>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d66:	9a07      	ldr	r2, [sp, #28]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	18d3      	adds	r3, r2, r3
 8007d6c:	9307      	str	r3, [sp, #28]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2300      	movs	r3, #0
 8007d72:	0020      	movs	r0, r4
 8007d74:	0031      	movs	r1, r6
 8007d76:	f7f8 fb69 	bl	800044c <__aeabi_dcmpeq>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d001      	beq.n	8007d82 <__cvt+0xa6>
 8007d7e:	9b07      	ldr	r3, [sp, #28]
 8007d80:	9309      	str	r3, [sp, #36]	; 0x24
 8007d82:	2230      	movs	r2, #48	; 0x30
 8007d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d86:	9907      	ldr	r1, [sp, #28]
 8007d88:	428b      	cmp	r3, r1
 8007d8a:	d306      	bcc.n	8007d9a <__cvt+0xbe>
 8007d8c:	0028      	movs	r0, r5
 8007d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d92:	1b5b      	subs	r3, r3, r5
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	b00b      	add	sp, #44	; 0x2c
 8007d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9a:	1c59      	adds	r1, r3, #1
 8007d9c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d9e:	701a      	strb	r2, [r3, #0]
 8007da0:	e7f0      	b.n	8007d84 <__cvt+0xa8>

08007da2 <__exponent>:
 8007da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da4:	1c83      	adds	r3, r0, #2
 8007da6:	b087      	sub	sp, #28
 8007da8:	9303      	str	r3, [sp, #12]
 8007daa:	0005      	movs	r5, r0
 8007dac:	000c      	movs	r4, r1
 8007dae:	232b      	movs	r3, #43	; 0x2b
 8007db0:	7002      	strb	r2, [r0, #0]
 8007db2:	2900      	cmp	r1, #0
 8007db4:	da01      	bge.n	8007dba <__exponent+0x18>
 8007db6:	424c      	negs	r4, r1
 8007db8:	3302      	adds	r3, #2
 8007dba:	706b      	strb	r3, [r5, #1]
 8007dbc:	2c09      	cmp	r4, #9
 8007dbe:	dd31      	ble.n	8007e24 <__exponent+0x82>
 8007dc0:	270a      	movs	r7, #10
 8007dc2:	ab04      	add	r3, sp, #16
 8007dc4:	1dde      	adds	r6, r3, #7
 8007dc6:	0020      	movs	r0, r4
 8007dc8:	0039      	movs	r1, r7
 8007dca:	9601      	str	r6, [sp, #4]
 8007dcc:	f7f8 fb28 	bl	8000420 <__aeabi_idivmod>
 8007dd0:	3e01      	subs	r6, #1
 8007dd2:	3130      	adds	r1, #48	; 0x30
 8007dd4:	0020      	movs	r0, r4
 8007dd6:	7031      	strb	r1, [r6, #0]
 8007dd8:	0039      	movs	r1, r7
 8007dda:	9402      	str	r4, [sp, #8]
 8007ddc:	f7f8 fa3a 	bl	8000254 <__divsi3>
 8007de0:	9b02      	ldr	r3, [sp, #8]
 8007de2:	0004      	movs	r4, r0
 8007de4:	2b63      	cmp	r3, #99	; 0x63
 8007de6:	dcee      	bgt.n	8007dc6 <__exponent+0x24>
 8007de8:	9b01      	ldr	r3, [sp, #4]
 8007dea:	3430      	adds	r4, #48	; 0x30
 8007dec:	1e9a      	subs	r2, r3, #2
 8007dee:	0013      	movs	r3, r2
 8007df0:	9903      	ldr	r1, [sp, #12]
 8007df2:	7014      	strb	r4, [r2, #0]
 8007df4:	a804      	add	r0, sp, #16
 8007df6:	3007      	adds	r0, #7
 8007df8:	4298      	cmp	r0, r3
 8007dfa:	d80e      	bhi.n	8007e1a <__exponent+0x78>
 8007dfc:	ab04      	add	r3, sp, #16
 8007dfe:	3307      	adds	r3, #7
 8007e00:	2000      	movs	r0, #0
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d804      	bhi.n	8007e10 <__exponent+0x6e>
 8007e06:	ab04      	add	r3, sp, #16
 8007e08:	3009      	adds	r0, #9
 8007e0a:	18c0      	adds	r0, r0, r3
 8007e0c:	9b01      	ldr	r3, [sp, #4]
 8007e0e:	1ac0      	subs	r0, r0, r3
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	1818      	adds	r0, r3, r0
 8007e14:	1b40      	subs	r0, r0, r5
 8007e16:	b007      	add	sp, #28
 8007e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1a:	7818      	ldrb	r0, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	7008      	strb	r0, [r1, #0]
 8007e20:	3101      	adds	r1, #1
 8007e22:	e7e7      	b.n	8007df4 <__exponent+0x52>
 8007e24:	2330      	movs	r3, #48	; 0x30
 8007e26:	18e4      	adds	r4, r4, r3
 8007e28:	70ab      	strb	r3, [r5, #2]
 8007e2a:	1d28      	adds	r0, r5, #4
 8007e2c:	70ec      	strb	r4, [r5, #3]
 8007e2e:	e7f1      	b.n	8007e14 <__exponent+0x72>

08007e30 <_printf_float>:
 8007e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e32:	b095      	sub	sp, #84	; 0x54
 8007e34:	000c      	movs	r4, r1
 8007e36:	9208      	str	r2, [sp, #32]
 8007e38:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3c:	0007      	movs	r7, r0
 8007e3e:	f001 faa5 	bl	800938c <_localeconv_r>
 8007e42:	6803      	ldr	r3, [r0, #0]
 8007e44:	0018      	movs	r0, r3
 8007e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e48:	f7f8 f95e 	bl	8000108 <strlen>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9312      	str	r3, [sp, #72]	; 0x48
 8007e50:	7e23      	ldrb	r3, [r4, #24]
 8007e52:	2207      	movs	r2, #7
 8007e54:	001e      	movs	r6, r3
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	900d      	str	r0, [sp, #52]	; 0x34
 8007e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	05c9      	lsls	r1, r1, #23
 8007e62:	d547      	bpl.n	8007ef4 <_printf_float+0xc4>
 8007e64:	189b      	adds	r3, r3, r2
 8007e66:	4393      	bics	r3, r2
 8007e68:	001a      	movs	r2, r3
 8007e6a:	3208      	adds	r2, #8
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	64a2      	str	r2, [r4, #72]	; 0x48
 8007e74:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e76:	2201      	movs	r2, #1
 8007e78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007e7a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e7e:	006b      	lsls	r3, r5, #1
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	930e      	str	r3, [sp, #56]	; 0x38
 8007e84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e86:	4ba8      	ldr	r3, [pc, #672]	; (8008128 <_printf_float+0x2f8>)
 8007e88:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007e8a:	4252      	negs	r2, r2
 8007e8c:	f7fb f86c 	bl	8002f68 <__aeabi_dcmpun>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d131      	bne.n	8007ef8 <_printf_float+0xc8>
 8007e94:	2201      	movs	r2, #1
 8007e96:	4ba4      	ldr	r3, [pc, #656]	; (8008128 <_printf_float+0x2f8>)
 8007e98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007e9c:	4252      	negs	r2, r2
 8007e9e:	f7f8 fae5 	bl	800046c <__aeabi_dcmple>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d128      	bne.n	8007ef8 <_printf_float+0xc8>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	0029      	movs	r1, r5
 8007eac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007eae:	f7f8 fad3 	bl	8000458 <__aeabi_dcmplt>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d003      	beq.n	8007ebe <_printf_float+0x8e>
 8007eb6:	0023      	movs	r3, r4
 8007eb8:	222d      	movs	r2, #45	; 0x2d
 8007eba:	3343      	adds	r3, #67	; 0x43
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	4d9b      	ldr	r5, [pc, #620]	; (800812c <_printf_float+0x2fc>)
 8007ec0:	2e47      	cmp	r6, #71	; 0x47
 8007ec2:	d900      	bls.n	8007ec6 <_printf_float+0x96>
 8007ec4:	4d9a      	ldr	r5, [pc, #616]	; (8008130 <_printf_float+0x300>)
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eca:	6123      	str	r3, [r4, #16]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	439a      	bics	r2, r3
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6022      	str	r2, [r4, #0]
 8007ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed8:	0021      	movs	r1, r4
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	0038      	movs	r0, r7
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	aa13      	add	r2, sp, #76	; 0x4c
 8007ee2:	f000 f9f3 	bl	80082cc <_printf_common>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d000      	beq.n	8007eec <_printf_float+0xbc>
 8007eea:	e09e      	b.n	800802a <_printf_float+0x1fa>
 8007eec:	2001      	movs	r0, #1
 8007eee:	4240      	negs	r0, r0
 8007ef0:	b015      	add	sp, #84	; 0x54
 8007ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef4:	3307      	adds	r3, #7
 8007ef6:	e7b6      	b.n	8007e66 <_printf_float+0x36>
 8007ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007efa:	002b      	movs	r3, r5
 8007efc:	0010      	movs	r0, r2
 8007efe:	0029      	movs	r1, r5
 8007f00:	f7fb f832 	bl	8002f68 <__aeabi_dcmpun>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d00a      	beq.n	8007f1e <_printf_float+0xee>
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	da03      	bge.n	8007f14 <_printf_float+0xe4>
 8007f0c:	0023      	movs	r3, r4
 8007f0e:	222d      	movs	r2, #45	; 0x2d
 8007f10:	3343      	adds	r3, #67	; 0x43
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	4d87      	ldr	r5, [pc, #540]	; (8008134 <_printf_float+0x304>)
 8007f16:	2e47      	cmp	r6, #71	; 0x47
 8007f18:	d9d5      	bls.n	8007ec6 <_printf_float+0x96>
 8007f1a:	4d87      	ldr	r5, [pc, #540]	; (8008138 <_printf_float+0x308>)
 8007f1c:	e7d3      	b.n	8007ec6 <_printf_float+0x96>
 8007f1e:	2220      	movs	r2, #32
 8007f20:	0031      	movs	r1, r6
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	4391      	bics	r1, r2
 8007f26:	910e      	str	r1, [sp, #56]	; 0x38
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	d147      	bne.n	8007fbc <_printf_float+0x18c>
 8007f2c:	3307      	adds	r3, #7
 8007f2e:	6063      	str	r3, [r4, #4]
 8007f30:	2380      	movs	r3, #128	; 0x80
 8007f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	9206      	str	r2, [sp, #24]
 8007f3c:	aa12      	add	r2, sp, #72	; 0x48
 8007f3e:	9205      	str	r2, [sp, #20]
 8007f40:	aa11      	add	r2, sp, #68	; 0x44
 8007f42:	9203      	str	r2, [sp, #12]
 8007f44:	2223      	movs	r2, #35	; 0x23
 8007f46:	a908      	add	r1, sp, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	1852      	adds	r2, r2, r1
 8007f50:	9202      	str	r2, [sp, #8]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	0038      	movs	r0, r7
 8007f56:	002b      	movs	r3, r5
 8007f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f5a:	9604      	str	r6, [sp, #16]
 8007f5c:	f7ff febe 	bl	8007cdc <__cvt>
 8007f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f62:	0005      	movs	r5, r0
 8007f64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f66:	2b47      	cmp	r3, #71	; 0x47
 8007f68:	d108      	bne.n	8007f7c <_printf_float+0x14c>
 8007f6a:	1ccb      	adds	r3, r1, #3
 8007f6c:	db02      	blt.n	8007f74 <_printf_float+0x144>
 8007f6e:	6863      	ldr	r3, [r4, #4]
 8007f70:	4299      	cmp	r1, r3
 8007f72:	dd46      	ble.n	8008002 <_printf_float+0x1d2>
 8007f74:	0033      	movs	r3, r6
 8007f76:	3b02      	subs	r3, #2
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	001e      	movs	r6, r3
 8007f7c:	2e65      	cmp	r6, #101	; 0x65
 8007f7e:	d824      	bhi.n	8007fca <_printf_float+0x19a>
 8007f80:	0020      	movs	r0, r4
 8007f82:	0032      	movs	r2, r6
 8007f84:	3901      	subs	r1, #1
 8007f86:	3050      	adds	r0, #80	; 0x50
 8007f88:	9111      	str	r1, [sp, #68]	; 0x44
 8007f8a:	f7ff ff0a 	bl	8007da2 <__exponent>
 8007f8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f90:	900a      	str	r0, [sp, #40]	; 0x28
 8007f92:	1813      	adds	r3, r2, r0
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	2a01      	cmp	r2, #1
 8007f98:	dc02      	bgt.n	8007fa0 <_printf_float+0x170>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	07d2      	lsls	r2, r2, #31
 8007f9e:	d501      	bpl.n	8007fa4 <_printf_float+0x174>
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	2323      	movs	r3, #35	; 0x23
 8007fa6:	aa08      	add	r2, sp, #32
 8007fa8:	189b      	adds	r3, r3, r2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d100      	bne.n	8007fb2 <_printf_float+0x182>
 8007fb0:	e791      	b.n	8007ed6 <_printf_float+0xa6>
 8007fb2:	0023      	movs	r3, r4
 8007fb4:	222d      	movs	r2, #45	; 0x2d
 8007fb6:	3343      	adds	r3, #67	; 0x43
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e78c      	b.n	8007ed6 <_printf_float+0xa6>
 8007fbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fbe:	2a47      	cmp	r2, #71	; 0x47
 8007fc0:	d1b6      	bne.n	8007f30 <_printf_float+0x100>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1b4      	bne.n	8007f30 <_printf_float+0x100>
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	e7b1      	b.n	8007f2e <_printf_float+0xfe>
 8007fca:	2e66      	cmp	r6, #102	; 0x66
 8007fcc:	d11b      	bne.n	8008006 <_printf_float+0x1d6>
 8007fce:	6863      	ldr	r3, [r4, #4]
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	dd0d      	ble.n	8007ff0 <_printf_float+0x1c0>
 8007fd4:	6121      	str	r1, [r4, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d102      	bne.n	8007fe0 <_printf_float+0x1b0>
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	07d2      	lsls	r2, r2, #31
 8007fde:	d502      	bpl.n	8007fe6 <_printf_float+0x1b6>
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	1859      	adds	r1, r3, r1
 8007fe4:	6121      	str	r1, [r4, #16]
 8007fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fe8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fea:	2300      	movs	r3, #0
 8007fec:	930a      	str	r3, [sp, #40]	; 0x28
 8007fee:	e7d9      	b.n	8007fa4 <_printf_float+0x174>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <_printf_float+0x1cc>
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	6821      	ldr	r1, [r4, #0]
 8007ff8:	4211      	tst	r1, r2
 8007ffa:	d000      	beq.n	8007ffe <_printf_float+0x1ce>
 8007ffc:	1c9a      	adds	r2, r3, #2
 8007ffe:	6122      	str	r2, [r4, #16]
 8008000:	e7f1      	b.n	8007fe6 <_printf_float+0x1b6>
 8008002:	2367      	movs	r3, #103	; 0x67
 8008004:	001e      	movs	r6, r3
 8008006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008008:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800800a:	4293      	cmp	r3, r2
 800800c:	db06      	blt.n	800801c <_printf_float+0x1ec>
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	07d2      	lsls	r2, r2, #31
 8008014:	d5e7      	bpl.n	8007fe6 <_printf_float+0x1b6>
 8008016:	3301      	adds	r3, #1
 8008018:	6123      	str	r3, [r4, #16]
 800801a:	e7e4      	b.n	8007fe6 <_printf_float+0x1b6>
 800801c:	2101      	movs	r1, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	dc01      	bgt.n	8008026 <_printf_float+0x1f6>
 8008022:	1849      	adds	r1, r1, r1
 8008024:	1ac9      	subs	r1, r1, r3
 8008026:	1852      	adds	r2, r2, r1
 8008028:	e7e9      	b.n	8007ffe <_printf_float+0x1ce>
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	0553      	lsls	r3, r2, #21
 800802e:	d408      	bmi.n	8008042 <_printf_float+0x212>
 8008030:	6923      	ldr	r3, [r4, #16]
 8008032:	002a      	movs	r2, r5
 8008034:	0038      	movs	r0, r7
 8008036:	9908      	ldr	r1, [sp, #32]
 8008038:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800803a:	47a8      	blx	r5
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d129      	bne.n	8008094 <_printf_float+0x264>
 8008040:	e754      	b.n	8007eec <_printf_float+0xbc>
 8008042:	2e65      	cmp	r6, #101	; 0x65
 8008044:	d800      	bhi.n	8008048 <_printf_float+0x218>
 8008046:	e0ec      	b.n	8008222 <_printf_float+0x3f2>
 8008048:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800804a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800804c:	2200      	movs	r2, #0
 800804e:	2300      	movs	r3, #0
 8008050:	f7f8 f9fc 	bl	800044c <__aeabi_dcmpeq>
 8008054:	2800      	cmp	r0, #0
 8008056:	d034      	beq.n	80080c2 <_printf_float+0x292>
 8008058:	2301      	movs	r3, #1
 800805a:	0038      	movs	r0, r7
 800805c:	4a37      	ldr	r2, [pc, #220]	; (800813c <_printf_float+0x30c>)
 800805e:	9908      	ldr	r1, [sp, #32]
 8008060:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008062:	47a8      	blx	r5
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d100      	bne.n	800806a <_printf_float+0x23a>
 8008068:	e740      	b.n	8007eec <_printf_float+0xbc>
 800806a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800806c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800806e:	4293      	cmp	r3, r2
 8008070:	db02      	blt.n	8008078 <_printf_float+0x248>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	07db      	lsls	r3, r3, #31
 8008076:	d50d      	bpl.n	8008094 <_printf_float+0x264>
 8008078:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800807a:	0038      	movs	r0, r7
 800807c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800807e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008080:	9908      	ldr	r1, [sp, #32]
 8008082:	47a8      	blx	r5
 8008084:	2500      	movs	r5, #0
 8008086:	1c43      	adds	r3, r0, #1
 8008088:	d100      	bne.n	800808c <_printf_float+0x25c>
 800808a:	e72f      	b.n	8007eec <_printf_float+0xbc>
 800808c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800808e:	3b01      	subs	r3, #1
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc0a      	bgt.n	80080aa <_printf_float+0x27a>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	079b      	lsls	r3, r3, #30
 8008098:	d500      	bpl.n	800809c <_printf_float+0x26c>
 800809a:	e114      	b.n	80082c6 <_printf_float+0x496>
 800809c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800809e:	68e0      	ldr	r0, [r4, #12]
 80080a0:	4298      	cmp	r0, r3
 80080a2:	db00      	blt.n	80080a6 <_printf_float+0x276>
 80080a4:	e724      	b.n	8007ef0 <_printf_float+0xc0>
 80080a6:	0018      	movs	r0, r3
 80080a8:	e722      	b.n	8007ef0 <_printf_float+0xc0>
 80080aa:	0022      	movs	r2, r4
 80080ac:	2301      	movs	r3, #1
 80080ae:	0038      	movs	r0, r7
 80080b0:	9908      	ldr	r1, [sp, #32]
 80080b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080b4:	321a      	adds	r2, #26
 80080b6:	47b0      	blx	r6
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d100      	bne.n	80080be <_printf_float+0x28e>
 80080bc:	e716      	b.n	8007eec <_printf_float+0xbc>
 80080be:	3501      	adds	r5, #1
 80080c0:	e7e4      	b.n	800808c <_printf_float+0x25c>
 80080c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	dc3b      	bgt.n	8008140 <_printf_float+0x310>
 80080c8:	2301      	movs	r3, #1
 80080ca:	0038      	movs	r0, r7
 80080cc:	4a1b      	ldr	r2, [pc, #108]	; (800813c <_printf_float+0x30c>)
 80080ce:	9908      	ldr	r1, [sp, #32]
 80080d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080d2:	47b0      	blx	r6
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d100      	bne.n	80080da <_printf_float+0x2aa>
 80080d8:	e708      	b.n	8007eec <_printf_float+0xbc>
 80080da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080de:	4313      	orrs	r3, r2
 80080e0:	d102      	bne.n	80080e8 <_printf_float+0x2b8>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	07db      	lsls	r3, r3, #31
 80080e6:	d5d5      	bpl.n	8008094 <_printf_float+0x264>
 80080e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ea:	0038      	movs	r0, r7
 80080ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080ee:	9908      	ldr	r1, [sp, #32]
 80080f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080f2:	47b0      	blx	r6
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d100      	bne.n	80080fa <_printf_float+0x2ca>
 80080f8:	e6f8      	b.n	8007eec <_printf_float+0xbc>
 80080fa:	2300      	movs	r3, #0
 80080fc:	930a      	str	r3, [sp, #40]	; 0x28
 80080fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008102:	425b      	negs	r3, r3
 8008104:	4293      	cmp	r3, r2
 8008106:	dc01      	bgt.n	800810c <_printf_float+0x2dc>
 8008108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800810a:	e792      	b.n	8008032 <_printf_float+0x202>
 800810c:	0022      	movs	r2, r4
 800810e:	2301      	movs	r3, #1
 8008110:	0038      	movs	r0, r7
 8008112:	9908      	ldr	r1, [sp, #32]
 8008114:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008116:	321a      	adds	r2, #26
 8008118:	47b0      	blx	r6
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d100      	bne.n	8008120 <_printf_float+0x2f0>
 800811e:	e6e5      	b.n	8007eec <_printf_float+0xbc>
 8008120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008122:	3301      	adds	r3, #1
 8008124:	e7ea      	b.n	80080fc <_printf_float+0x2cc>
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	7fefffff 	.word	0x7fefffff
 800812c:	0800b0d0 	.word	0x0800b0d0
 8008130:	0800b0d4 	.word	0x0800b0d4
 8008134:	0800b0d8 	.word	0x0800b0d8
 8008138:	0800b0dc 	.word	0x0800b0dc
 800813c:	0800b0e0 	.word	0x0800b0e0
 8008140:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008144:	920a      	str	r2, [sp, #40]	; 0x28
 8008146:	429a      	cmp	r2, r3
 8008148:	dd00      	ble.n	800814c <_printf_float+0x31c>
 800814a:	930a      	str	r3, [sp, #40]	; 0x28
 800814c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	dc3d      	bgt.n	80081ce <_printf_float+0x39e>
 8008152:	2300      	movs	r3, #0
 8008154:	930e      	str	r3, [sp, #56]	; 0x38
 8008156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008158:	43db      	mvns	r3, r3
 800815a:	17db      	asrs	r3, r3, #31
 800815c:	930f      	str	r3, [sp, #60]	; 0x3c
 800815e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008162:	930c      	str	r3, [sp, #48]	; 0x30
 8008164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008166:	4013      	ands	r3, r2
 8008168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800816e:	4293      	cmp	r3, r2
 8008170:	dc36      	bgt.n	80081e0 <_printf_float+0x3b0>
 8008172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008176:	4293      	cmp	r3, r2
 8008178:	db40      	blt.n	80081fc <_printf_float+0x3cc>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	07db      	lsls	r3, r3, #31
 800817e:	d43d      	bmi.n	80081fc <_printf_float+0x3cc>
 8008180:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008184:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	1a52      	subs	r2, r2, r1
 800818a:	920a      	str	r2, [sp, #40]	; 0x28
 800818c:	429a      	cmp	r2, r3
 800818e:	dd00      	ble.n	8008192 <_printf_float+0x362>
 8008190:	930a      	str	r3, [sp, #40]	; 0x28
 8008192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008194:	2b00      	cmp	r3, #0
 8008196:	dc3a      	bgt.n	800820e <_printf_float+0x3de>
 8008198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819a:	2500      	movs	r5, #0
 800819c:	43db      	mvns	r3, r3
 800819e:	17db      	asrs	r3, r3, #31
 80081a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ac:	400a      	ands	r2, r1
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dc00      	bgt.n	80081b6 <_printf_float+0x386>
 80081b4:	e76e      	b.n	8008094 <_printf_float+0x264>
 80081b6:	0022      	movs	r2, r4
 80081b8:	2301      	movs	r3, #1
 80081ba:	0038      	movs	r0, r7
 80081bc:	9908      	ldr	r1, [sp, #32]
 80081be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081c0:	321a      	adds	r2, #26
 80081c2:	47b0      	blx	r6
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d100      	bne.n	80081ca <_printf_float+0x39a>
 80081c8:	e690      	b.n	8007eec <_printf_float+0xbc>
 80081ca:	3501      	adds	r5, #1
 80081cc:	e7e9      	b.n	80081a2 <_printf_float+0x372>
 80081ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d0:	002a      	movs	r2, r5
 80081d2:	0038      	movs	r0, r7
 80081d4:	9908      	ldr	r1, [sp, #32]
 80081d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081d8:	47b0      	blx	r6
 80081da:	1c43      	adds	r3, r0, #1
 80081dc:	d1b9      	bne.n	8008152 <_printf_float+0x322>
 80081de:	e685      	b.n	8007eec <_printf_float+0xbc>
 80081e0:	0022      	movs	r2, r4
 80081e2:	2301      	movs	r3, #1
 80081e4:	0038      	movs	r0, r7
 80081e6:	9908      	ldr	r1, [sp, #32]
 80081e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081ea:	321a      	adds	r2, #26
 80081ec:	47b0      	blx	r6
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d100      	bne.n	80081f4 <_printf_float+0x3c4>
 80081f2:	e67b      	b.n	8007eec <_printf_float+0xbc>
 80081f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081f6:	3301      	adds	r3, #1
 80081f8:	930e      	str	r3, [sp, #56]	; 0x38
 80081fa:	e7b0      	b.n	800815e <_printf_float+0x32e>
 80081fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081fe:	0038      	movs	r0, r7
 8008200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008202:	9908      	ldr	r1, [sp, #32]
 8008204:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008206:	47b0      	blx	r6
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d1b9      	bne.n	8008180 <_printf_float+0x350>
 800820c:	e66e      	b.n	8007eec <_printf_float+0xbc>
 800820e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008210:	0038      	movs	r0, r7
 8008212:	18ea      	adds	r2, r5, r3
 8008214:	9908      	ldr	r1, [sp, #32]
 8008216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008218:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800821a:	47a8      	blx	r5
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d1bb      	bne.n	8008198 <_printf_float+0x368>
 8008220:	e664      	b.n	8007eec <_printf_float+0xbc>
 8008222:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008224:	2b01      	cmp	r3, #1
 8008226:	dc02      	bgt.n	800822e <_printf_float+0x3fe>
 8008228:	2301      	movs	r3, #1
 800822a:	421a      	tst	r2, r3
 800822c:	d038      	beq.n	80082a0 <_printf_float+0x470>
 800822e:	2301      	movs	r3, #1
 8008230:	002a      	movs	r2, r5
 8008232:	0038      	movs	r0, r7
 8008234:	9908      	ldr	r1, [sp, #32]
 8008236:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008238:	47b0      	blx	r6
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	d100      	bne.n	8008240 <_printf_float+0x410>
 800823e:	e655      	b.n	8007eec <_printf_float+0xbc>
 8008240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008242:	0038      	movs	r0, r7
 8008244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008246:	9908      	ldr	r1, [sp, #32]
 8008248:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800824a:	47b0      	blx	r6
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d100      	bne.n	8008252 <_printf_float+0x422>
 8008250:	e64c      	b.n	8007eec <_printf_float+0xbc>
 8008252:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008254:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008256:	2200      	movs	r2, #0
 8008258:	2300      	movs	r3, #0
 800825a:	f7f8 f8f7 	bl	800044c <__aeabi_dcmpeq>
 800825e:	2800      	cmp	r0, #0
 8008260:	d11c      	bne.n	800829c <_printf_float+0x46c>
 8008262:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008264:	1c6a      	adds	r2, r5, #1
 8008266:	3b01      	subs	r3, #1
 8008268:	0038      	movs	r0, r7
 800826a:	9908      	ldr	r1, [sp, #32]
 800826c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800826e:	47a8      	blx	r5
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d10f      	bne.n	8008294 <_printf_float+0x464>
 8008274:	e63a      	b.n	8007eec <_printf_float+0xbc>
 8008276:	0022      	movs	r2, r4
 8008278:	2301      	movs	r3, #1
 800827a:	0038      	movs	r0, r7
 800827c:	9908      	ldr	r1, [sp, #32]
 800827e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008280:	321a      	adds	r2, #26
 8008282:	47b0      	blx	r6
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d100      	bne.n	800828a <_printf_float+0x45a>
 8008288:	e630      	b.n	8007eec <_printf_float+0xbc>
 800828a:	3501      	adds	r5, #1
 800828c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800828e:	3b01      	subs	r3, #1
 8008290:	42ab      	cmp	r3, r5
 8008292:	dcf0      	bgt.n	8008276 <_printf_float+0x446>
 8008294:	0022      	movs	r2, r4
 8008296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008298:	3250      	adds	r2, #80	; 0x50
 800829a:	e6cb      	b.n	8008034 <_printf_float+0x204>
 800829c:	2500      	movs	r5, #0
 800829e:	e7f5      	b.n	800828c <_printf_float+0x45c>
 80082a0:	002a      	movs	r2, r5
 80082a2:	e7e1      	b.n	8008268 <_printf_float+0x438>
 80082a4:	0022      	movs	r2, r4
 80082a6:	2301      	movs	r3, #1
 80082a8:	0038      	movs	r0, r7
 80082aa:	9908      	ldr	r1, [sp, #32]
 80082ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082ae:	3219      	adds	r2, #25
 80082b0:	47b0      	blx	r6
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	d100      	bne.n	80082b8 <_printf_float+0x488>
 80082b6:	e619      	b.n	8007eec <_printf_float+0xbc>
 80082b8:	3501      	adds	r5, #1
 80082ba:	68e3      	ldr	r3, [r4, #12]
 80082bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082be:	1a9b      	subs	r3, r3, r2
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	dcef      	bgt.n	80082a4 <_printf_float+0x474>
 80082c4:	e6ea      	b.n	800809c <_printf_float+0x26c>
 80082c6:	2500      	movs	r5, #0
 80082c8:	e7f7      	b.n	80082ba <_printf_float+0x48a>
 80082ca:	46c0      	nop			; (mov r8, r8)

080082cc <_printf_common>:
 80082cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ce:	0015      	movs	r5, r2
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	688a      	ldr	r2, [r1, #8]
 80082d4:	690b      	ldr	r3, [r1, #16]
 80082d6:	000c      	movs	r4, r1
 80082d8:	9000      	str	r0, [sp, #0]
 80082da:	4293      	cmp	r3, r2
 80082dc:	da00      	bge.n	80082e0 <_printf_common+0x14>
 80082de:	0013      	movs	r3, r2
 80082e0:	0022      	movs	r2, r4
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	3243      	adds	r2, #67	; 0x43
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d001      	beq.n	80082f0 <_printf_common+0x24>
 80082ec:	3301      	adds	r3, #1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	069b      	lsls	r3, r3, #26
 80082f4:	d502      	bpl.n	80082fc <_printf_common+0x30>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	3302      	adds	r3, #2
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	2306      	movs	r3, #6
 8008300:	0017      	movs	r7, r2
 8008302:	401f      	ands	r7, r3
 8008304:	421a      	tst	r2, r3
 8008306:	d027      	beq.n	8008358 <_printf_common+0x8c>
 8008308:	0023      	movs	r3, r4
 800830a:	3343      	adds	r3, #67	; 0x43
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	1e5a      	subs	r2, r3, #1
 8008310:	4193      	sbcs	r3, r2
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	0692      	lsls	r2, r2, #26
 8008316:	d430      	bmi.n	800837a <_printf_common+0xae>
 8008318:	0022      	movs	r2, r4
 800831a:	9901      	ldr	r1, [sp, #4]
 800831c:	9800      	ldr	r0, [sp, #0]
 800831e:	9e08      	ldr	r6, [sp, #32]
 8008320:	3243      	adds	r2, #67	; 0x43
 8008322:	47b0      	blx	r6
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d025      	beq.n	8008374 <_printf_common+0xa8>
 8008328:	2306      	movs	r3, #6
 800832a:	6820      	ldr	r0, [r4, #0]
 800832c:	682a      	ldr	r2, [r5, #0]
 800832e:	68e1      	ldr	r1, [r4, #12]
 8008330:	2500      	movs	r5, #0
 8008332:	4003      	ands	r3, r0
 8008334:	2b04      	cmp	r3, #4
 8008336:	d103      	bne.n	8008340 <_printf_common+0x74>
 8008338:	1a8d      	subs	r5, r1, r2
 800833a:	43eb      	mvns	r3, r5
 800833c:	17db      	asrs	r3, r3, #31
 800833e:	401d      	ands	r5, r3
 8008340:	68a3      	ldr	r3, [r4, #8]
 8008342:	6922      	ldr	r2, [r4, #16]
 8008344:	4293      	cmp	r3, r2
 8008346:	dd01      	ble.n	800834c <_printf_common+0x80>
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	18ed      	adds	r5, r5, r3
 800834c:	2700      	movs	r7, #0
 800834e:	42bd      	cmp	r5, r7
 8008350:	d120      	bne.n	8008394 <_printf_common+0xc8>
 8008352:	2000      	movs	r0, #0
 8008354:	e010      	b.n	8008378 <_printf_common+0xac>
 8008356:	3701      	adds	r7, #1
 8008358:	68e3      	ldr	r3, [r4, #12]
 800835a:	682a      	ldr	r2, [r5, #0]
 800835c:	1a9b      	subs	r3, r3, r2
 800835e:	42bb      	cmp	r3, r7
 8008360:	ddd2      	ble.n	8008308 <_printf_common+0x3c>
 8008362:	0022      	movs	r2, r4
 8008364:	2301      	movs	r3, #1
 8008366:	9901      	ldr	r1, [sp, #4]
 8008368:	9800      	ldr	r0, [sp, #0]
 800836a:	9e08      	ldr	r6, [sp, #32]
 800836c:	3219      	adds	r2, #25
 800836e:	47b0      	blx	r6
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d1f0      	bne.n	8008356 <_printf_common+0x8a>
 8008374:	2001      	movs	r0, #1
 8008376:	4240      	negs	r0, r0
 8008378:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800837a:	2030      	movs	r0, #48	; 0x30
 800837c:	18e1      	adds	r1, r4, r3
 800837e:	3143      	adds	r1, #67	; 0x43
 8008380:	7008      	strb	r0, [r1, #0]
 8008382:	0021      	movs	r1, r4
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	3145      	adds	r1, #69	; 0x45
 8008388:	7809      	ldrb	r1, [r1, #0]
 800838a:	18a2      	adds	r2, r4, r2
 800838c:	3243      	adds	r2, #67	; 0x43
 800838e:	3302      	adds	r3, #2
 8008390:	7011      	strb	r1, [r2, #0]
 8008392:	e7c1      	b.n	8008318 <_printf_common+0x4c>
 8008394:	0022      	movs	r2, r4
 8008396:	2301      	movs	r3, #1
 8008398:	9901      	ldr	r1, [sp, #4]
 800839a:	9800      	ldr	r0, [sp, #0]
 800839c:	9e08      	ldr	r6, [sp, #32]
 800839e:	321a      	adds	r2, #26
 80083a0:	47b0      	blx	r6
 80083a2:	1c43      	adds	r3, r0, #1
 80083a4:	d0e6      	beq.n	8008374 <_printf_common+0xa8>
 80083a6:	3701      	adds	r7, #1
 80083a8:	e7d1      	b.n	800834e <_printf_common+0x82>
	...

080083ac <_printf_i>:
 80083ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ae:	b08b      	sub	sp, #44	; 0x2c
 80083b0:	9206      	str	r2, [sp, #24]
 80083b2:	000a      	movs	r2, r1
 80083b4:	3243      	adds	r2, #67	; 0x43
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	9005      	str	r0, [sp, #20]
 80083ba:	9204      	str	r2, [sp, #16]
 80083bc:	7e0a      	ldrb	r2, [r1, #24]
 80083be:	000c      	movs	r4, r1
 80083c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083c2:	2a78      	cmp	r2, #120	; 0x78
 80083c4:	d806      	bhi.n	80083d4 <_printf_i+0x28>
 80083c6:	2a62      	cmp	r2, #98	; 0x62
 80083c8:	d808      	bhi.n	80083dc <_printf_i+0x30>
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	d100      	bne.n	80083d0 <_printf_i+0x24>
 80083ce:	e0c0      	b.n	8008552 <_printf_i+0x1a6>
 80083d0:	2a58      	cmp	r2, #88	; 0x58
 80083d2:	d052      	beq.n	800847a <_printf_i+0xce>
 80083d4:	0026      	movs	r6, r4
 80083d6:	3642      	adds	r6, #66	; 0x42
 80083d8:	7032      	strb	r2, [r6, #0]
 80083da:	e022      	b.n	8008422 <_printf_i+0x76>
 80083dc:	0010      	movs	r0, r2
 80083de:	3863      	subs	r0, #99	; 0x63
 80083e0:	2815      	cmp	r0, #21
 80083e2:	d8f7      	bhi.n	80083d4 <_printf_i+0x28>
 80083e4:	f7f7 fea2 	bl	800012c <__gnu_thumb1_case_shi>
 80083e8:	001f0016 	.word	0x001f0016
 80083ec:	fff6fff6 	.word	0xfff6fff6
 80083f0:	fff6fff6 	.word	0xfff6fff6
 80083f4:	fff6001f 	.word	0xfff6001f
 80083f8:	fff6fff6 	.word	0xfff6fff6
 80083fc:	00a8fff6 	.word	0x00a8fff6
 8008400:	009a0036 	.word	0x009a0036
 8008404:	fff6fff6 	.word	0xfff6fff6
 8008408:	fff600b9 	.word	0xfff600b9
 800840c:	fff60036 	.word	0xfff60036
 8008410:	009efff6 	.word	0x009efff6
 8008414:	0026      	movs	r6, r4
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	3642      	adds	r6, #66	; 0x42
 800841a:	1d11      	adds	r1, r2, #4
 800841c:	6019      	str	r1, [r3, #0]
 800841e:	6813      	ldr	r3, [r2, #0]
 8008420:	7033      	strb	r3, [r6, #0]
 8008422:	2301      	movs	r3, #1
 8008424:	e0a7      	b.n	8008576 <_printf_i+0x1ca>
 8008426:	6808      	ldr	r0, [r1, #0]
 8008428:	6819      	ldr	r1, [r3, #0]
 800842a:	1d0a      	adds	r2, r1, #4
 800842c:	0605      	lsls	r5, r0, #24
 800842e:	d50b      	bpl.n	8008448 <_printf_i+0x9c>
 8008430:	680d      	ldr	r5, [r1, #0]
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	2d00      	cmp	r5, #0
 8008436:	da03      	bge.n	8008440 <_printf_i+0x94>
 8008438:	232d      	movs	r3, #45	; 0x2d
 800843a:	9a04      	ldr	r2, [sp, #16]
 800843c:	426d      	negs	r5, r5
 800843e:	7013      	strb	r3, [r2, #0]
 8008440:	4b61      	ldr	r3, [pc, #388]	; (80085c8 <_printf_i+0x21c>)
 8008442:	270a      	movs	r7, #10
 8008444:	9303      	str	r3, [sp, #12]
 8008446:	e032      	b.n	80084ae <_printf_i+0x102>
 8008448:	680d      	ldr	r5, [r1, #0]
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	0641      	lsls	r1, r0, #25
 800844e:	d5f1      	bpl.n	8008434 <_printf_i+0x88>
 8008450:	b22d      	sxth	r5, r5
 8008452:	e7ef      	b.n	8008434 <_printf_i+0x88>
 8008454:	680d      	ldr	r5, [r1, #0]
 8008456:	6819      	ldr	r1, [r3, #0]
 8008458:	1d08      	adds	r0, r1, #4
 800845a:	6018      	str	r0, [r3, #0]
 800845c:	062e      	lsls	r6, r5, #24
 800845e:	d501      	bpl.n	8008464 <_printf_i+0xb8>
 8008460:	680d      	ldr	r5, [r1, #0]
 8008462:	e003      	b.n	800846c <_printf_i+0xc0>
 8008464:	066d      	lsls	r5, r5, #25
 8008466:	d5fb      	bpl.n	8008460 <_printf_i+0xb4>
 8008468:	680d      	ldr	r5, [r1, #0]
 800846a:	b2ad      	uxth	r5, r5
 800846c:	4b56      	ldr	r3, [pc, #344]	; (80085c8 <_printf_i+0x21c>)
 800846e:	270a      	movs	r7, #10
 8008470:	9303      	str	r3, [sp, #12]
 8008472:	2a6f      	cmp	r2, #111	; 0x6f
 8008474:	d117      	bne.n	80084a6 <_printf_i+0xfa>
 8008476:	2708      	movs	r7, #8
 8008478:	e015      	b.n	80084a6 <_printf_i+0xfa>
 800847a:	3145      	adds	r1, #69	; 0x45
 800847c:	700a      	strb	r2, [r1, #0]
 800847e:	4a52      	ldr	r2, [pc, #328]	; (80085c8 <_printf_i+0x21c>)
 8008480:	9203      	str	r2, [sp, #12]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	6821      	ldr	r1, [r4, #0]
 8008486:	ca20      	ldmia	r2!, {r5}
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	0608      	lsls	r0, r1, #24
 800848c:	d550      	bpl.n	8008530 <_printf_i+0x184>
 800848e:	07cb      	lsls	r3, r1, #31
 8008490:	d502      	bpl.n	8008498 <_printf_i+0xec>
 8008492:	2320      	movs	r3, #32
 8008494:	4319      	orrs	r1, r3
 8008496:	6021      	str	r1, [r4, #0]
 8008498:	2710      	movs	r7, #16
 800849a:	2d00      	cmp	r5, #0
 800849c:	d103      	bne.n	80084a6 <_printf_i+0xfa>
 800849e:	2320      	movs	r3, #32
 80084a0:	6822      	ldr	r2, [r4, #0]
 80084a2:	439a      	bics	r2, r3
 80084a4:	6022      	str	r2, [r4, #0]
 80084a6:	0023      	movs	r3, r4
 80084a8:	2200      	movs	r2, #0
 80084aa:	3343      	adds	r3, #67	; 0x43
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	6863      	ldr	r3, [r4, #4]
 80084b0:	60a3      	str	r3, [r4, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db03      	blt.n	80084be <_printf_i+0x112>
 80084b6:	2204      	movs	r2, #4
 80084b8:	6821      	ldr	r1, [r4, #0]
 80084ba:	4391      	bics	r1, r2
 80084bc:	6021      	str	r1, [r4, #0]
 80084be:	2d00      	cmp	r5, #0
 80084c0:	d102      	bne.n	80084c8 <_printf_i+0x11c>
 80084c2:	9e04      	ldr	r6, [sp, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00c      	beq.n	80084e2 <_printf_i+0x136>
 80084c8:	9e04      	ldr	r6, [sp, #16]
 80084ca:	0028      	movs	r0, r5
 80084cc:	0039      	movs	r1, r7
 80084ce:	f7f7 febd 	bl	800024c <__aeabi_uidivmod>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	3e01      	subs	r6, #1
 80084d6:	5c5b      	ldrb	r3, [r3, r1]
 80084d8:	7033      	strb	r3, [r6, #0]
 80084da:	002b      	movs	r3, r5
 80084dc:	0005      	movs	r5, r0
 80084de:	429f      	cmp	r7, r3
 80084e0:	d9f3      	bls.n	80084ca <_printf_i+0x11e>
 80084e2:	2f08      	cmp	r7, #8
 80084e4:	d109      	bne.n	80084fa <_printf_i+0x14e>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d506      	bpl.n	80084fa <_printf_i+0x14e>
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	6922      	ldr	r2, [r4, #16]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	dc02      	bgt.n	80084fa <_printf_i+0x14e>
 80084f4:	2330      	movs	r3, #48	; 0x30
 80084f6:	3e01      	subs	r6, #1
 80084f8:	7033      	strb	r3, [r6, #0]
 80084fa:	9b04      	ldr	r3, [sp, #16]
 80084fc:	1b9b      	subs	r3, r3, r6
 80084fe:	6123      	str	r3, [r4, #16]
 8008500:	9b07      	ldr	r3, [sp, #28]
 8008502:	0021      	movs	r1, r4
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	9805      	ldr	r0, [sp, #20]
 8008508:	9b06      	ldr	r3, [sp, #24]
 800850a:	aa09      	add	r2, sp, #36	; 0x24
 800850c:	f7ff fede 	bl	80082cc <_printf_common>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d135      	bne.n	8008580 <_printf_i+0x1d4>
 8008514:	2001      	movs	r0, #1
 8008516:	4240      	negs	r0, r0
 8008518:	b00b      	add	sp, #44	; 0x2c
 800851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851c:	2220      	movs	r2, #32
 800851e:	6809      	ldr	r1, [r1, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	6022      	str	r2, [r4, #0]
 8008524:	0022      	movs	r2, r4
 8008526:	2178      	movs	r1, #120	; 0x78
 8008528:	3245      	adds	r2, #69	; 0x45
 800852a:	7011      	strb	r1, [r2, #0]
 800852c:	4a27      	ldr	r2, [pc, #156]	; (80085cc <_printf_i+0x220>)
 800852e:	e7a7      	b.n	8008480 <_printf_i+0xd4>
 8008530:	0648      	lsls	r0, r1, #25
 8008532:	d5ac      	bpl.n	800848e <_printf_i+0xe2>
 8008534:	b2ad      	uxth	r5, r5
 8008536:	e7aa      	b.n	800848e <_printf_i+0xe2>
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	680d      	ldr	r5, [r1, #0]
 800853c:	1d10      	adds	r0, r2, #4
 800853e:	6949      	ldr	r1, [r1, #20]
 8008540:	6018      	str	r0, [r3, #0]
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	062e      	lsls	r6, r5, #24
 8008546:	d501      	bpl.n	800854c <_printf_i+0x1a0>
 8008548:	6019      	str	r1, [r3, #0]
 800854a:	e002      	b.n	8008552 <_printf_i+0x1a6>
 800854c:	066d      	lsls	r5, r5, #25
 800854e:	d5fb      	bpl.n	8008548 <_printf_i+0x19c>
 8008550:	8019      	strh	r1, [r3, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	9e04      	ldr	r6, [sp, #16]
 8008556:	6123      	str	r3, [r4, #16]
 8008558:	e7d2      	b.n	8008500 <_printf_i+0x154>
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	1d11      	adds	r1, r2, #4
 800855e:	6019      	str	r1, [r3, #0]
 8008560:	6816      	ldr	r6, [r2, #0]
 8008562:	2100      	movs	r1, #0
 8008564:	0030      	movs	r0, r6
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	f000 ff1e 	bl	80093a8 <memchr>
 800856c:	2800      	cmp	r0, #0
 800856e:	d001      	beq.n	8008574 <_printf_i+0x1c8>
 8008570:	1b80      	subs	r0, r0, r6
 8008572:	6060      	str	r0, [r4, #4]
 8008574:	6863      	ldr	r3, [r4, #4]
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	2300      	movs	r3, #0
 800857a:	9a04      	ldr	r2, [sp, #16]
 800857c:	7013      	strb	r3, [r2, #0]
 800857e:	e7bf      	b.n	8008500 <_printf_i+0x154>
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	0032      	movs	r2, r6
 8008584:	9906      	ldr	r1, [sp, #24]
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	9d07      	ldr	r5, [sp, #28]
 800858a:	47a8      	blx	r5
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d0c1      	beq.n	8008514 <_printf_i+0x168>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	079b      	lsls	r3, r3, #30
 8008594:	d415      	bmi.n	80085c2 <_printf_i+0x216>
 8008596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008598:	68e0      	ldr	r0, [r4, #12]
 800859a:	4298      	cmp	r0, r3
 800859c:	dabc      	bge.n	8008518 <_printf_i+0x16c>
 800859e:	0018      	movs	r0, r3
 80085a0:	e7ba      	b.n	8008518 <_printf_i+0x16c>
 80085a2:	0022      	movs	r2, r4
 80085a4:	2301      	movs	r3, #1
 80085a6:	9906      	ldr	r1, [sp, #24]
 80085a8:	9805      	ldr	r0, [sp, #20]
 80085aa:	9e07      	ldr	r6, [sp, #28]
 80085ac:	3219      	adds	r2, #25
 80085ae:	47b0      	blx	r6
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d0af      	beq.n	8008514 <_printf_i+0x168>
 80085b4:	3501      	adds	r5, #1
 80085b6:	68e3      	ldr	r3, [r4, #12]
 80085b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ba:	1a9b      	subs	r3, r3, r2
 80085bc:	42ab      	cmp	r3, r5
 80085be:	dcf0      	bgt.n	80085a2 <_printf_i+0x1f6>
 80085c0:	e7e9      	b.n	8008596 <_printf_i+0x1ea>
 80085c2:	2500      	movs	r5, #0
 80085c4:	e7f7      	b.n	80085b6 <_printf_i+0x20a>
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	0800b0e2 	.word	0x0800b0e2
 80085cc:	0800b0f3 	.word	0x0800b0f3

080085d0 <sniprintf>:
 80085d0:	b40c      	push	{r2, r3}
 80085d2:	b530      	push	{r4, r5, lr}
 80085d4:	4b17      	ldr	r3, [pc, #92]	; (8008634 <sniprintf+0x64>)
 80085d6:	000c      	movs	r4, r1
 80085d8:	681d      	ldr	r5, [r3, #0]
 80085da:	b09d      	sub	sp, #116	; 0x74
 80085dc:	2900      	cmp	r1, #0
 80085de:	da08      	bge.n	80085f2 <sniprintf+0x22>
 80085e0:	238b      	movs	r3, #139	; 0x8b
 80085e2:	2001      	movs	r0, #1
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	4240      	negs	r0, r0
 80085e8:	b01d      	add	sp, #116	; 0x74
 80085ea:	bc30      	pop	{r4, r5}
 80085ec:	bc08      	pop	{r3}
 80085ee:	b002      	add	sp, #8
 80085f0:	4718      	bx	r3
 80085f2:	2382      	movs	r3, #130	; 0x82
 80085f4:	466a      	mov	r2, sp
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	8293      	strh	r3, [r2, #20]
 80085fa:	2300      	movs	r3, #0
 80085fc:	9002      	str	r0, [sp, #8]
 80085fe:	9006      	str	r0, [sp, #24]
 8008600:	4299      	cmp	r1, r3
 8008602:	d000      	beq.n	8008606 <sniprintf+0x36>
 8008604:	1e4b      	subs	r3, r1, #1
 8008606:	9304      	str	r3, [sp, #16]
 8008608:	9307      	str	r3, [sp, #28]
 800860a:	2301      	movs	r3, #1
 800860c:	466a      	mov	r2, sp
 800860e:	425b      	negs	r3, r3
 8008610:	82d3      	strh	r3, [r2, #22]
 8008612:	0028      	movs	r0, r5
 8008614:	ab21      	add	r3, sp, #132	; 0x84
 8008616:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008618:	a902      	add	r1, sp, #8
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	f001 fb8e 	bl	8009d3c <_svfiprintf_r>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	da01      	bge.n	8008628 <sniprintf+0x58>
 8008624:	238b      	movs	r3, #139	; 0x8b
 8008626:	602b      	str	r3, [r5, #0]
 8008628:	2c00      	cmp	r4, #0
 800862a:	d0dd      	beq.n	80085e8 <sniprintf+0x18>
 800862c:	2300      	movs	r3, #0
 800862e:	9a02      	ldr	r2, [sp, #8]
 8008630:	7013      	strb	r3, [r2, #0]
 8008632:	e7d9      	b.n	80085e8 <sniprintf+0x18>
 8008634:	2000000c 	.word	0x2000000c

08008638 <quorem>:
 8008638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863a:	0006      	movs	r6, r0
 800863c:	690d      	ldr	r5, [r1, #16]
 800863e:	6933      	ldr	r3, [r6, #16]
 8008640:	b087      	sub	sp, #28
 8008642:	2000      	movs	r0, #0
 8008644:	9102      	str	r1, [sp, #8]
 8008646:	42ab      	cmp	r3, r5
 8008648:	db6b      	blt.n	8008722 <quorem+0xea>
 800864a:	000b      	movs	r3, r1
 800864c:	3d01      	subs	r5, #1
 800864e:	00ac      	lsls	r4, r5, #2
 8008650:	3314      	adds	r3, #20
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	191b      	adds	r3, r3, r4
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	0033      	movs	r3, r6
 800865a:	3314      	adds	r3, #20
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	191c      	adds	r4, r3, r4
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	6827      	ldr	r7, [r4, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	0038      	movs	r0, r7
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	3301      	adds	r3, #1
 800866c:	0019      	movs	r1, r3
 800866e:	9304      	str	r3, [sp, #16]
 8008670:	f7f7 fd66 	bl	8000140 <__udivsi3>
 8008674:	9b04      	ldr	r3, [sp, #16]
 8008676:	9000      	str	r0, [sp, #0]
 8008678:	429f      	cmp	r7, r3
 800867a:	d329      	bcc.n	80086d0 <quorem+0x98>
 800867c:	2300      	movs	r3, #0
 800867e:	469c      	mov	ip, r3
 8008680:	9801      	ldr	r0, [sp, #4]
 8008682:	9f05      	ldr	r7, [sp, #20]
 8008684:	9304      	str	r3, [sp, #16]
 8008686:	cf08      	ldmia	r7!, {r3}
 8008688:	9a00      	ldr	r2, [sp, #0]
 800868a:	b299      	uxth	r1, r3
 800868c:	4351      	muls	r1, r2
 800868e:	0c1b      	lsrs	r3, r3, #16
 8008690:	4353      	muls	r3, r2
 8008692:	4461      	add	r1, ip
 8008694:	0c0a      	lsrs	r2, r1, #16
 8008696:	189b      	adds	r3, r3, r2
 8008698:	0c1a      	lsrs	r2, r3, #16
 800869a:	9305      	str	r3, [sp, #20]
 800869c:	6803      	ldr	r3, [r0, #0]
 800869e:	4694      	mov	ip, r2
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	b289      	uxth	r1, r1
 80086a6:	18d2      	adds	r2, r2, r3
 80086a8:	6803      	ldr	r3, [r0, #0]
 80086aa:	1a52      	subs	r2, r2, r1
 80086ac:	0c19      	lsrs	r1, r3, #16
 80086ae:	466b      	mov	r3, sp
 80086b0:	8a9b      	ldrh	r3, [r3, #20]
 80086b2:	1acb      	subs	r3, r1, r3
 80086b4:	1411      	asrs	r1, r2, #16
 80086b6:	185b      	adds	r3, r3, r1
 80086b8:	1419      	asrs	r1, r3, #16
 80086ba:	b292      	uxth	r2, r2
 80086bc:	041b      	lsls	r3, r3, #16
 80086be:	431a      	orrs	r2, r3
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	9104      	str	r1, [sp, #16]
 80086c4:	c004      	stmia	r0!, {r2}
 80086c6:	42bb      	cmp	r3, r7
 80086c8:	d2dd      	bcs.n	8008686 <quorem+0x4e>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d02e      	beq.n	800872e <quorem+0xf6>
 80086d0:	0030      	movs	r0, r6
 80086d2:	9902      	ldr	r1, [sp, #8]
 80086d4:	f001 f902 	bl	80098dc <__mcmp>
 80086d8:	2800      	cmp	r0, #0
 80086da:	db21      	blt.n	8008720 <quorem+0xe8>
 80086dc:	0030      	movs	r0, r6
 80086de:	2400      	movs	r4, #0
 80086e0:	9b00      	ldr	r3, [sp, #0]
 80086e2:	9902      	ldr	r1, [sp, #8]
 80086e4:	3301      	adds	r3, #1
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	3014      	adds	r0, #20
 80086ea:	3114      	adds	r1, #20
 80086ec:	6802      	ldr	r2, [r0, #0]
 80086ee:	c908      	ldmia	r1!, {r3}
 80086f0:	b292      	uxth	r2, r2
 80086f2:	1914      	adds	r4, r2, r4
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	1aa2      	subs	r2, r4, r2
 80086f8:	6804      	ldr	r4, [r0, #0]
 80086fa:	0c1b      	lsrs	r3, r3, #16
 80086fc:	0c24      	lsrs	r4, r4, #16
 80086fe:	1ae3      	subs	r3, r4, r3
 8008700:	1414      	asrs	r4, r2, #16
 8008702:	191b      	adds	r3, r3, r4
 8008704:	141c      	asrs	r4, r3, #16
 8008706:	b292      	uxth	r2, r2
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	4313      	orrs	r3, r2
 800870c:	c008      	stmia	r0!, {r3}
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	428b      	cmp	r3, r1
 8008712:	d2eb      	bcs.n	80086ec <quorem+0xb4>
 8008714:	9a01      	ldr	r2, [sp, #4]
 8008716:	00ab      	lsls	r3, r5, #2
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	2a00      	cmp	r2, #0
 800871e:	d010      	beq.n	8008742 <quorem+0x10a>
 8008720:	9800      	ldr	r0, [sp, #0]
 8008722:	b007      	add	sp, #28
 8008724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <quorem+0xfe>
 800872c:	3d01      	subs	r5, #1
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	3c04      	subs	r4, #4
 8008732:	42a3      	cmp	r3, r4
 8008734:	d3f7      	bcc.n	8008726 <quorem+0xee>
 8008736:	6135      	str	r5, [r6, #16]
 8008738:	e7ca      	b.n	80086d0 <quorem+0x98>
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	2a00      	cmp	r2, #0
 800873e:	d104      	bne.n	800874a <quorem+0x112>
 8008740:	3d01      	subs	r5, #1
 8008742:	9a01      	ldr	r2, [sp, #4]
 8008744:	3b04      	subs	r3, #4
 8008746:	429a      	cmp	r2, r3
 8008748:	d3f7      	bcc.n	800873a <quorem+0x102>
 800874a:	6135      	str	r5, [r6, #16]
 800874c:	e7e8      	b.n	8008720 <quorem+0xe8>
	...

08008750 <_dtoa_r>:
 8008750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008752:	b09d      	sub	sp, #116	; 0x74
 8008754:	9202      	str	r2, [sp, #8]
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	9b02      	ldr	r3, [sp, #8]
 800875a:	9c03      	ldr	r4, [sp, #12]
 800875c:	930a      	str	r3, [sp, #40]	; 0x28
 800875e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008760:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008762:	0007      	movs	r7, r0
 8008764:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008766:	2c00      	cmp	r4, #0
 8008768:	d10e      	bne.n	8008788 <_dtoa_r+0x38>
 800876a:	2010      	movs	r0, #16
 800876c:	f000 fe12 	bl	8009394 <malloc>
 8008770:	1e02      	subs	r2, r0, #0
 8008772:	6278      	str	r0, [r7, #36]	; 0x24
 8008774:	d104      	bne.n	8008780 <_dtoa_r+0x30>
 8008776:	21ea      	movs	r1, #234	; 0xea
 8008778:	4bc0      	ldr	r3, [pc, #768]	; (8008a7c <_dtoa_r+0x32c>)
 800877a:	48c1      	ldr	r0, [pc, #772]	; (8008a80 <_dtoa_r+0x330>)
 800877c:	f001 fbf0 	bl	8009f60 <__assert_func>
 8008780:	6044      	str	r4, [r0, #4]
 8008782:	6084      	str	r4, [r0, #8]
 8008784:	6004      	str	r4, [r0, #0]
 8008786:	60c4      	str	r4, [r0, #12]
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	6819      	ldr	r1, [r3, #0]
 800878c:	2900      	cmp	r1, #0
 800878e:	d00a      	beq.n	80087a6 <_dtoa_r+0x56>
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	2301      	movs	r3, #1
 8008794:	4093      	lsls	r3, r2
 8008796:	604a      	str	r2, [r1, #4]
 8008798:	608b      	str	r3, [r1, #8]
 800879a:	0038      	movs	r0, r7
 800879c:	f000 fe5c 	bl	8009458 <_Bfree>
 80087a0:	2200      	movs	r2, #0
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	da21      	bge.n	80087f0 <_dtoa_r+0xa0>
 80087ac:	2301      	movs	r3, #1
 80087ae:	602b      	str	r3, [r5, #0]
 80087b0:	9b03      	ldr	r3, [sp, #12]
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087ba:	4bb2      	ldr	r3, [pc, #712]	; (8008a84 <_dtoa_r+0x334>)
 80087bc:	002a      	movs	r2, r5
 80087be:	9318      	str	r3, [sp, #96]	; 0x60
 80087c0:	401a      	ands	r2, r3
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d117      	bne.n	80087f6 <_dtoa_r+0xa6>
 80087c6:	4bb0      	ldr	r3, [pc, #704]	; (8008a88 <_dtoa_r+0x338>)
 80087c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087ca:	0328      	lsls	r0, r5, #12
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	9b02      	ldr	r3, [sp, #8]
 80087d0:	0b00      	lsrs	r0, r0, #12
 80087d2:	4318      	orrs	r0, r3
 80087d4:	d101      	bne.n	80087da <_dtoa_r+0x8a>
 80087d6:	f000 fdc3 	bl	8009360 <_dtoa_r+0xc10>
 80087da:	48ac      	ldr	r0, [pc, #688]	; (8008a8c <_dtoa_r+0x33c>)
 80087dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087de:	9005      	str	r0, [sp, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <_dtoa_r+0x9a>
 80087e4:	4baa      	ldr	r3, [pc, #680]	; (8008a90 <_dtoa_r+0x340>)
 80087e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	9805      	ldr	r0, [sp, #20]
 80087ec:	b01d      	add	sp, #116	; 0x74
 80087ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f0:	2300      	movs	r3, #0
 80087f2:	602b      	str	r3, [r5, #0]
 80087f4:	e7e0      	b.n	80087b8 <_dtoa_r+0x68>
 80087f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80087fa:	9312      	str	r3, [sp, #72]	; 0x48
 80087fc:	9413      	str	r4, [sp, #76]	; 0x4c
 80087fe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008800:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008802:	2200      	movs	r2, #0
 8008804:	2300      	movs	r3, #0
 8008806:	f7f7 fe21 	bl	800044c <__aeabi_dcmpeq>
 800880a:	1e04      	subs	r4, r0, #0
 800880c:	d00b      	beq.n	8008826 <_dtoa_r+0xd6>
 800880e:	2301      	movs	r3, #1
 8008810:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	4b9f      	ldr	r3, [pc, #636]	; (8008a94 <_dtoa_r+0x344>)
 8008816:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	2a00      	cmp	r2, #0
 800881c:	d0e5      	beq.n	80087ea <_dtoa_r+0x9a>
 800881e:	4a9e      	ldr	r2, [pc, #632]	; (8008a98 <_dtoa_r+0x348>)
 8008820:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008822:	600a      	str	r2, [r1, #0]
 8008824:	e7e1      	b.n	80087ea <_dtoa_r+0x9a>
 8008826:	ab1a      	add	r3, sp, #104	; 0x68
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	ab1b      	add	r3, sp, #108	; 0x6c
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	0038      	movs	r0, r7
 8008830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008832:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008834:	f001 f906 	bl	8009a44 <__d2b>
 8008838:	006e      	lsls	r6, r5, #1
 800883a:	9004      	str	r0, [sp, #16]
 800883c:	0d76      	lsrs	r6, r6, #21
 800883e:	d100      	bne.n	8008842 <_dtoa_r+0xf2>
 8008840:	e07c      	b.n	800893c <_dtoa_r+0x1ec>
 8008842:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008844:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008846:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008848:	4a94      	ldr	r2, [pc, #592]	; (8008a9c <_dtoa_r+0x34c>)
 800884a:	031b      	lsls	r3, r3, #12
 800884c:	0b1b      	lsrs	r3, r3, #12
 800884e:	431a      	orrs	r2, r3
 8008850:	0011      	movs	r1, r2
 8008852:	4b93      	ldr	r3, [pc, #588]	; (8008aa0 <_dtoa_r+0x350>)
 8008854:	9416      	str	r4, [sp, #88]	; 0x58
 8008856:	18f6      	adds	r6, r6, r3
 8008858:	2200      	movs	r2, #0
 800885a:	4b92      	ldr	r3, [pc, #584]	; (8008aa4 <_dtoa_r+0x354>)
 800885c:	f7f9 fff2 	bl	8002844 <__aeabi_dsub>
 8008860:	4a91      	ldr	r2, [pc, #580]	; (8008aa8 <_dtoa_r+0x358>)
 8008862:	4b92      	ldr	r3, [pc, #584]	; (8008aac <_dtoa_r+0x35c>)
 8008864:	f7f9 fd82 	bl	800236c <__aeabi_dmul>
 8008868:	4a91      	ldr	r2, [pc, #580]	; (8008ab0 <_dtoa_r+0x360>)
 800886a:	4b92      	ldr	r3, [pc, #584]	; (8008ab4 <_dtoa_r+0x364>)
 800886c:	f7f8 fe0e 	bl	800148c <__aeabi_dadd>
 8008870:	0004      	movs	r4, r0
 8008872:	0030      	movs	r0, r6
 8008874:	000d      	movs	r5, r1
 8008876:	f7fa fbcb 	bl	8003010 <__aeabi_i2d>
 800887a:	4a8f      	ldr	r2, [pc, #572]	; (8008ab8 <_dtoa_r+0x368>)
 800887c:	4b8f      	ldr	r3, [pc, #572]	; (8008abc <_dtoa_r+0x36c>)
 800887e:	f7f9 fd75 	bl	800236c <__aeabi_dmul>
 8008882:	0002      	movs	r2, r0
 8008884:	000b      	movs	r3, r1
 8008886:	0020      	movs	r0, r4
 8008888:	0029      	movs	r1, r5
 800888a:	f7f8 fdff 	bl	800148c <__aeabi_dadd>
 800888e:	0004      	movs	r4, r0
 8008890:	000d      	movs	r5, r1
 8008892:	f7fa fb87 	bl	8002fa4 <__aeabi_d2iz>
 8008896:	2200      	movs	r2, #0
 8008898:	9002      	str	r0, [sp, #8]
 800889a:	2300      	movs	r3, #0
 800889c:	0020      	movs	r0, r4
 800889e:	0029      	movs	r1, r5
 80088a0:	f7f7 fdda 	bl	8000458 <__aeabi_dcmplt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d00b      	beq.n	80088c0 <_dtoa_r+0x170>
 80088a8:	9802      	ldr	r0, [sp, #8]
 80088aa:	f7fa fbb1 	bl	8003010 <__aeabi_i2d>
 80088ae:	002b      	movs	r3, r5
 80088b0:	0022      	movs	r2, r4
 80088b2:	f7f7 fdcb 	bl	800044c <__aeabi_dcmpeq>
 80088b6:	4243      	negs	r3, r0
 80088b8:	4158      	adcs	r0, r3
 80088ba:	9b02      	ldr	r3, [sp, #8]
 80088bc:	1a1b      	subs	r3, r3, r0
 80088be:	9302      	str	r3, [sp, #8]
 80088c0:	2301      	movs	r3, #1
 80088c2:	9315      	str	r3, [sp, #84]	; 0x54
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	2b16      	cmp	r3, #22
 80088c8:	d80f      	bhi.n	80088ea <_dtoa_r+0x19a>
 80088ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088ce:	00da      	lsls	r2, r3, #3
 80088d0:	4b7b      	ldr	r3, [pc, #492]	; (8008ac0 <_dtoa_r+0x370>)
 80088d2:	189b      	adds	r3, r3, r2
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f7f7 fdbe 	bl	8000458 <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d049      	beq.n	8008974 <_dtoa_r+0x224>
 80088e0:	9b02      	ldr	r3, [sp, #8]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	9302      	str	r3, [sp, #8]
 80088e6:	2300      	movs	r3, #0
 80088e8:	9315      	str	r3, [sp, #84]	; 0x54
 80088ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80088ec:	1b9e      	subs	r6, r3, r6
 80088ee:	2300      	movs	r3, #0
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	0033      	movs	r3, r6
 80088f4:	3b01      	subs	r3, #1
 80088f6:	930d      	str	r3, [sp, #52]	; 0x34
 80088f8:	d504      	bpl.n	8008904 <_dtoa_r+0x1b4>
 80088fa:	2301      	movs	r3, #1
 80088fc:	1b9b      	subs	r3, r3, r6
 80088fe:	9308      	str	r3, [sp, #32]
 8008900:	2300      	movs	r3, #0
 8008902:	930d      	str	r3, [sp, #52]	; 0x34
 8008904:	9b02      	ldr	r3, [sp, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	db36      	blt.n	8008978 <_dtoa_r+0x228>
 800890a:	9a02      	ldr	r2, [sp, #8]
 800890c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800890e:	4694      	mov	ip, r2
 8008910:	4463      	add	r3, ip
 8008912:	930d      	str	r3, [sp, #52]	; 0x34
 8008914:	2300      	movs	r3, #0
 8008916:	9214      	str	r2, [sp, #80]	; 0x50
 8008918:	930e      	str	r3, [sp, #56]	; 0x38
 800891a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800891c:	2401      	movs	r4, #1
 800891e:	2b09      	cmp	r3, #9
 8008920:	d862      	bhi.n	80089e8 <_dtoa_r+0x298>
 8008922:	2b05      	cmp	r3, #5
 8008924:	dd02      	ble.n	800892c <_dtoa_r+0x1dc>
 8008926:	2400      	movs	r4, #0
 8008928:	3b04      	subs	r3, #4
 800892a:	9322      	str	r3, [sp, #136]	; 0x88
 800892c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800892e:	1e98      	subs	r0, r3, #2
 8008930:	2803      	cmp	r0, #3
 8008932:	d862      	bhi.n	80089fa <_dtoa_r+0x2aa>
 8008934:	f7f7 fbf0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008938:	56343629 	.word	0x56343629
 800893c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800893e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008940:	189e      	adds	r6, r3, r2
 8008942:	4b60      	ldr	r3, [pc, #384]	; (8008ac4 <_dtoa_r+0x374>)
 8008944:	18f2      	adds	r2, r6, r3
 8008946:	2a20      	cmp	r2, #32
 8008948:	dd0f      	ble.n	800896a <_dtoa_r+0x21a>
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	409d      	lsls	r5, r3
 8008950:	4b5d      	ldr	r3, [pc, #372]	; (8008ac8 <_dtoa_r+0x378>)
 8008952:	9802      	ldr	r0, [sp, #8]
 8008954:	18f3      	adds	r3, r6, r3
 8008956:	40d8      	lsrs	r0, r3
 8008958:	4328      	orrs	r0, r5
 800895a:	f7fa fb89 	bl	8003070 <__aeabi_ui2d>
 800895e:	2301      	movs	r3, #1
 8008960:	4c5a      	ldr	r4, [pc, #360]	; (8008acc <_dtoa_r+0x37c>)
 8008962:	3e01      	subs	r6, #1
 8008964:	1909      	adds	r1, r1, r4
 8008966:	9316      	str	r3, [sp, #88]	; 0x58
 8008968:	e776      	b.n	8008858 <_dtoa_r+0x108>
 800896a:	2320      	movs	r3, #32
 800896c:	9802      	ldr	r0, [sp, #8]
 800896e:	1a9b      	subs	r3, r3, r2
 8008970:	4098      	lsls	r0, r3
 8008972:	e7f2      	b.n	800895a <_dtoa_r+0x20a>
 8008974:	9015      	str	r0, [sp, #84]	; 0x54
 8008976:	e7b8      	b.n	80088ea <_dtoa_r+0x19a>
 8008978:	9b08      	ldr	r3, [sp, #32]
 800897a:	9a02      	ldr	r2, [sp, #8]
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	9308      	str	r3, [sp, #32]
 8008980:	4253      	negs	r3, r2
 8008982:	930e      	str	r3, [sp, #56]	; 0x38
 8008984:	2300      	movs	r3, #0
 8008986:	9314      	str	r3, [sp, #80]	; 0x50
 8008988:	e7c7      	b.n	800891a <_dtoa_r+0x1ca>
 800898a:	2300      	movs	r3, #0
 800898c:	930f      	str	r3, [sp, #60]	; 0x3c
 800898e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008990:	2b00      	cmp	r3, #0
 8008992:	dc36      	bgt.n	8008a02 <_dtoa_r+0x2b2>
 8008994:	2301      	movs	r3, #1
 8008996:	001a      	movs	r2, r3
 8008998:	930c      	str	r3, [sp, #48]	; 0x30
 800899a:	9306      	str	r3, [sp, #24]
 800899c:	9223      	str	r2, [sp, #140]	; 0x8c
 800899e:	e00d      	b.n	80089bc <_dtoa_r+0x26c>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e7f3      	b.n	800898c <_dtoa_r+0x23c>
 80089a4:	2300      	movs	r3, #0
 80089a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80089a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80089aa:	4694      	mov	ip, r2
 80089ac:	9b02      	ldr	r3, [sp, #8]
 80089ae:	4463      	add	r3, ip
 80089b0:	930c      	str	r3, [sp, #48]	; 0x30
 80089b2:	3301      	adds	r3, #1
 80089b4:	9306      	str	r3, [sp, #24]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc00      	bgt.n	80089bc <_dtoa_r+0x26c>
 80089ba:	2301      	movs	r3, #1
 80089bc:	2200      	movs	r2, #0
 80089be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089c0:	6042      	str	r2, [r0, #4]
 80089c2:	3204      	adds	r2, #4
 80089c4:	0015      	movs	r5, r2
 80089c6:	3514      	adds	r5, #20
 80089c8:	6841      	ldr	r1, [r0, #4]
 80089ca:	429d      	cmp	r5, r3
 80089cc:	d91d      	bls.n	8008a0a <_dtoa_r+0x2ba>
 80089ce:	0038      	movs	r0, r7
 80089d0:	f000 fcfe 	bl	80093d0 <_Balloc>
 80089d4:	9005      	str	r0, [sp, #20]
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d11b      	bne.n	8008a12 <_dtoa_r+0x2c2>
 80089da:	21d5      	movs	r1, #213	; 0xd5
 80089dc:	0002      	movs	r2, r0
 80089de:	4b3c      	ldr	r3, [pc, #240]	; (8008ad0 <_dtoa_r+0x380>)
 80089e0:	0049      	lsls	r1, r1, #1
 80089e2:	e6ca      	b.n	800877a <_dtoa_r+0x2a>
 80089e4:	2301      	movs	r3, #1
 80089e6:	e7de      	b.n	80089a6 <_dtoa_r+0x256>
 80089e8:	2300      	movs	r3, #0
 80089ea:	940f      	str	r4, [sp, #60]	; 0x3c
 80089ec:	9322      	str	r3, [sp, #136]	; 0x88
 80089ee:	3b01      	subs	r3, #1
 80089f0:	930c      	str	r3, [sp, #48]	; 0x30
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	2200      	movs	r2, #0
 80089f6:	3313      	adds	r3, #19
 80089f8:	e7d0      	b.n	800899c <_dtoa_r+0x24c>
 80089fa:	2301      	movs	r3, #1
 80089fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80089fe:	3b02      	subs	r3, #2
 8008a00:	e7f6      	b.n	80089f0 <_dtoa_r+0x2a0>
 8008a02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a04:	930c      	str	r3, [sp, #48]	; 0x30
 8008a06:	9306      	str	r3, [sp, #24]
 8008a08:	e7d8      	b.n	80089bc <_dtoa_r+0x26c>
 8008a0a:	3101      	adds	r1, #1
 8008a0c:	6041      	str	r1, [r0, #4]
 8008a0e:	0052      	lsls	r2, r2, #1
 8008a10:	e7d8      	b.n	80089c4 <_dtoa_r+0x274>
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	9a05      	ldr	r2, [sp, #20]
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	9b06      	ldr	r3, [sp, #24]
 8008a1a:	2b0e      	cmp	r3, #14
 8008a1c:	d900      	bls.n	8008a20 <_dtoa_r+0x2d0>
 8008a1e:	e0eb      	b.n	8008bf8 <_dtoa_r+0x4a8>
 8008a20:	2c00      	cmp	r4, #0
 8008a22:	d100      	bne.n	8008a26 <_dtoa_r+0x2d6>
 8008a24:	e0e8      	b.n	8008bf8 <_dtoa_r+0x4a8>
 8008a26:	9b02      	ldr	r3, [sp, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dd68      	ble.n	8008afe <_dtoa_r+0x3ae>
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	210f      	movs	r1, #15
 8008a30:	4b23      	ldr	r3, [pc, #140]	; (8008ac0 <_dtoa_r+0x370>)
 8008a32:	400a      	ands	r2, r1
 8008a34:	00d2      	lsls	r2, r2, #3
 8008a36:	189b      	adds	r3, r3, r2
 8008a38:	681d      	ldr	r5, [r3, #0]
 8008a3a:	685e      	ldr	r6, [r3, #4]
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	111c      	asrs	r4, r3, #4
 8008a40:	2302      	movs	r3, #2
 8008a42:	9310      	str	r3, [sp, #64]	; 0x40
 8008a44:	9b02      	ldr	r3, [sp, #8]
 8008a46:	05db      	lsls	r3, r3, #23
 8008a48:	d50b      	bpl.n	8008a62 <_dtoa_r+0x312>
 8008a4a:	4b22      	ldr	r3, [pc, #136]	; (8008ad4 <_dtoa_r+0x384>)
 8008a4c:	400c      	ands	r4, r1
 8008a4e:	6a1a      	ldr	r2, [r3, #32]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008a56:	f7f9 f883 	bl	8001b60 <__aeabi_ddiv>
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a60:	9310      	str	r3, [sp, #64]	; 0x40
 8008a62:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <_dtoa_r+0x384>)
 8008a64:	9307      	str	r3, [sp, #28]
 8008a66:	2c00      	cmp	r4, #0
 8008a68:	d136      	bne.n	8008ad8 <_dtoa_r+0x388>
 8008a6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a6e:	002a      	movs	r2, r5
 8008a70:	0033      	movs	r3, r6
 8008a72:	f7f9 f875 	bl	8001b60 <__aeabi_ddiv>
 8008a76:	900a      	str	r0, [sp, #40]	; 0x28
 8008a78:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a7a:	e05c      	b.n	8008b36 <_dtoa_r+0x3e6>
 8008a7c:	0800b111 	.word	0x0800b111
 8008a80:	0800b128 	.word	0x0800b128
 8008a84:	7ff00000 	.word	0x7ff00000
 8008a88:	0000270f 	.word	0x0000270f
 8008a8c:	0800b10d 	.word	0x0800b10d
 8008a90:	0800b110 	.word	0x0800b110
 8008a94:	0800b0e0 	.word	0x0800b0e0
 8008a98:	0800b0e1 	.word	0x0800b0e1
 8008a9c:	3ff00000 	.word	0x3ff00000
 8008aa0:	fffffc01 	.word	0xfffffc01
 8008aa4:	3ff80000 	.word	0x3ff80000
 8008aa8:	636f4361 	.word	0x636f4361
 8008aac:	3fd287a7 	.word	0x3fd287a7
 8008ab0:	8b60c8b3 	.word	0x8b60c8b3
 8008ab4:	3fc68a28 	.word	0x3fc68a28
 8008ab8:	509f79fb 	.word	0x509f79fb
 8008abc:	3fd34413 	.word	0x3fd34413
 8008ac0:	0800b220 	.word	0x0800b220
 8008ac4:	00000432 	.word	0x00000432
 8008ac8:	00000412 	.word	0x00000412
 8008acc:	fe100000 	.word	0xfe100000
 8008ad0:	0800b187 	.word	0x0800b187
 8008ad4:	0800b1f8 	.word	0x0800b1f8
 8008ad8:	2301      	movs	r3, #1
 8008ada:	421c      	tst	r4, r3
 8008adc:	d00b      	beq.n	8008af6 <_dtoa_r+0x3a6>
 8008ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ae0:	0028      	movs	r0, r5
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9310      	str	r3, [sp, #64]	; 0x40
 8008ae6:	9b07      	ldr	r3, [sp, #28]
 8008ae8:	0031      	movs	r1, r6
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f7f9 fc3d 	bl	800236c <__aeabi_dmul>
 8008af2:	0005      	movs	r5, r0
 8008af4:	000e      	movs	r6, r1
 8008af6:	9b07      	ldr	r3, [sp, #28]
 8008af8:	1064      	asrs	r4, r4, #1
 8008afa:	3308      	adds	r3, #8
 8008afc:	e7b2      	b.n	8008a64 <_dtoa_r+0x314>
 8008afe:	2302      	movs	r3, #2
 8008b00:	9310      	str	r3, [sp, #64]	; 0x40
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d016      	beq.n	8008b36 <_dtoa_r+0x3e6>
 8008b08:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b0a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b0c:	425c      	negs	r4, r3
 8008b0e:	230f      	movs	r3, #15
 8008b10:	4ab5      	ldr	r2, [pc, #724]	; (8008de8 <_dtoa_r+0x698>)
 8008b12:	4023      	ands	r3, r4
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	18d3      	adds	r3, r2, r3
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f7f9 fc26 	bl	800236c <__aeabi_dmul>
 8008b20:	2601      	movs	r6, #1
 8008b22:	2300      	movs	r3, #0
 8008b24:	900a      	str	r0, [sp, #40]	; 0x28
 8008b26:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b28:	4db0      	ldr	r5, [pc, #704]	; (8008dec <_dtoa_r+0x69c>)
 8008b2a:	1124      	asrs	r4, r4, #4
 8008b2c:	2c00      	cmp	r4, #0
 8008b2e:	d000      	beq.n	8008b32 <_dtoa_r+0x3e2>
 8008b30:	e094      	b.n	8008c5c <_dtoa_r+0x50c>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d19f      	bne.n	8008a76 <_dtoa_r+0x326>
 8008b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d100      	bne.n	8008b3e <_dtoa_r+0x3ee>
 8008b3c:	e09b      	b.n	8008c76 <_dtoa_r+0x526>
 8008b3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008b42:	2200      	movs	r2, #0
 8008b44:	0020      	movs	r0, r4
 8008b46:	0029      	movs	r1, r5
 8008b48:	4ba9      	ldr	r3, [pc, #676]	; (8008df0 <_dtoa_r+0x6a0>)
 8008b4a:	f7f7 fc85 	bl	8000458 <__aeabi_dcmplt>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d100      	bne.n	8008b54 <_dtoa_r+0x404>
 8008b52:	e090      	b.n	8008c76 <_dtoa_r+0x526>
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d100      	bne.n	8008b5c <_dtoa_r+0x40c>
 8008b5a:	e08c      	b.n	8008c76 <_dtoa_r+0x526>
 8008b5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dd46      	ble.n	8008bf0 <_dtoa_r+0x4a0>
 8008b62:	9b02      	ldr	r3, [sp, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	0020      	movs	r0, r4
 8008b68:	0029      	movs	r1, r5
 8008b6a:	1e5e      	subs	r6, r3, #1
 8008b6c:	4ba1      	ldr	r3, [pc, #644]	; (8008df4 <_dtoa_r+0x6a4>)
 8008b6e:	f7f9 fbfd 	bl	800236c <__aeabi_dmul>
 8008b72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b74:	900a      	str	r0, [sp, #40]	; 0x28
 8008b76:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b78:	3301      	adds	r3, #1
 8008b7a:	9310      	str	r3, [sp, #64]	; 0x40
 8008b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008b84:	9307      	str	r3, [sp, #28]
 8008b86:	f7fa fa43 	bl	8003010 <__aeabi_i2d>
 8008b8a:	0022      	movs	r2, r4
 8008b8c:	002b      	movs	r3, r5
 8008b8e:	f7f9 fbed 	bl	800236c <__aeabi_dmul>
 8008b92:	2200      	movs	r2, #0
 8008b94:	4b98      	ldr	r3, [pc, #608]	; (8008df8 <_dtoa_r+0x6a8>)
 8008b96:	f7f8 fc79 	bl	800148c <__aeabi_dadd>
 8008b9a:	9010      	str	r0, [sp, #64]	; 0x40
 8008b9c:	9111      	str	r1, [sp, #68]	; 0x44
 8008b9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ba2:	920a      	str	r2, [sp, #40]	; 0x28
 8008ba4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba6:	4a95      	ldr	r2, [pc, #596]	; (8008dfc <_dtoa_r+0x6ac>)
 8008ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008baa:	4694      	mov	ip, r2
 8008bac:	4463      	add	r3, ip
 8008bae:	9317      	str	r3, [sp, #92]	; 0x5c
 8008bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bb2:	9b07      	ldr	r3, [sp, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d161      	bne.n	8008c7c <_dtoa_r+0x52c>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	0020      	movs	r0, r4
 8008bbc:	0029      	movs	r1, r5
 8008bbe:	4b90      	ldr	r3, [pc, #576]	; (8008e00 <_dtoa_r+0x6b0>)
 8008bc0:	f7f9 fe40 	bl	8002844 <__aeabi_dsub>
 8008bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bc8:	0004      	movs	r4, r0
 8008bca:	000d      	movs	r5, r1
 8008bcc:	f7f7 fc58 	bl	8000480 <__aeabi_dcmpgt>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d000      	beq.n	8008bd6 <_dtoa_r+0x486>
 8008bd4:	e2b5      	b.n	8009142 <_dtoa_r+0x9f2>
 8008bd6:	488b      	ldr	r0, [pc, #556]	; (8008e04 <_dtoa_r+0x6b4>)
 8008bd8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008bda:	4684      	mov	ip, r0
 8008bdc:	4461      	add	r1, ip
 8008bde:	000b      	movs	r3, r1
 8008be0:	0020      	movs	r0, r4
 8008be2:	0029      	movs	r1, r5
 8008be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008be6:	f7f7 fc37 	bl	8000458 <__aeabi_dcmplt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d000      	beq.n	8008bf0 <_dtoa_r+0x4a0>
 8008bee:	e2a5      	b.n	800913c <_dtoa_r+0x9ec>
 8008bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bf2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf6:	940b      	str	r4, [sp, #44]	; 0x2c
 8008bf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da00      	bge.n	8008c00 <_dtoa_r+0x4b0>
 8008bfe:	e171      	b.n	8008ee4 <_dtoa_r+0x794>
 8008c00:	9a02      	ldr	r2, [sp, #8]
 8008c02:	2a0e      	cmp	r2, #14
 8008c04:	dd00      	ble.n	8008c08 <_dtoa_r+0x4b8>
 8008c06:	e16d      	b.n	8008ee4 <_dtoa_r+0x794>
 8008c08:	4b77      	ldr	r3, [pc, #476]	; (8008de8 <_dtoa_r+0x698>)
 8008c0a:	00d2      	lsls	r2, r2, #3
 8008c0c:	189b      	adds	r3, r3, r2
 8008c0e:	685c      	ldr	r4, [r3, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9308      	str	r3, [sp, #32]
 8008c14:	9409      	str	r4, [sp, #36]	; 0x24
 8008c16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	db00      	blt.n	8008c1e <_dtoa_r+0x4ce>
 8008c1c:	e0f6      	b.n	8008e0c <_dtoa_r+0x6bc>
 8008c1e:	9b06      	ldr	r3, [sp, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dd00      	ble.n	8008c26 <_dtoa_r+0x4d6>
 8008c24:	e0f2      	b.n	8008e0c <_dtoa_r+0x6bc>
 8008c26:	d000      	beq.n	8008c2a <_dtoa_r+0x4da>
 8008c28:	e288      	b.n	800913c <_dtoa_r+0x9ec>
 8008c2a:	9808      	ldr	r0, [sp, #32]
 8008c2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4b73      	ldr	r3, [pc, #460]	; (8008e00 <_dtoa_r+0x6b0>)
 8008c32:	f7f9 fb9b 	bl	800236c <__aeabi_dmul>
 8008c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3a:	f7f7 fc2b 	bl	8000494 <__aeabi_dcmpge>
 8008c3e:	9e06      	ldr	r6, [sp, #24]
 8008c40:	0035      	movs	r5, r6
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d000      	beq.n	8008c48 <_dtoa_r+0x4f8>
 8008c46:	e25f      	b.n	8009108 <_dtoa_r+0x9b8>
 8008c48:	9b05      	ldr	r3, [sp, #20]
 8008c4a:	9a05      	ldr	r2, [sp, #20]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	2331      	movs	r3, #49	; 0x31
 8008c52:	7013      	strb	r3, [r2, #0]
 8008c54:	9b02      	ldr	r3, [sp, #8]
 8008c56:	3301      	adds	r3, #1
 8008c58:	9302      	str	r3, [sp, #8]
 8008c5a:	e25a      	b.n	8009112 <_dtoa_r+0x9c2>
 8008c5c:	4234      	tst	r4, r6
 8008c5e:	d007      	beq.n	8008c70 <_dtoa_r+0x520>
 8008c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c62:	3301      	adds	r3, #1
 8008c64:	9310      	str	r3, [sp, #64]	; 0x40
 8008c66:	682a      	ldr	r2, [r5, #0]
 8008c68:	686b      	ldr	r3, [r5, #4]
 8008c6a:	f7f9 fb7f 	bl	800236c <__aeabi_dmul>
 8008c6e:	0033      	movs	r3, r6
 8008c70:	1064      	asrs	r4, r4, #1
 8008c72:	3508      	adds	r5, #8
 8008c74:	e75a      	b.n	8008b2c <_dtoa_r+0x3dc>
 8008c76:	9e02      	ldr	r6, [sp, #8]
 8008c78:	9b06      	ldr	r3, [sp, #24]
 8008c7a:	e780      	b.n	8008b7e <_dtoa_r+0x42e>
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c80:	1e5a      	subs	r2, r3, #1
 8008c82:	4b59      	ldr	r3, [pc, #356]	; (8008de8 <_dtoa_r+0x698>)
 8008c84:	00d2      	lsls	r2, r2, #3
 8008c86:	189b      	adds	r3, r3, r2
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d051      	beq.n	8008d34 <_dtoa_r+0x5e4>
 8008c90:	2000      	movs	r0, #0
 8008c92:	495d      	ldr	r1, [pc, #372]	; (8008e08 <_dtoa_r+0x6b8>)
 8008c94:	f7f8 ff64 	bl	8001b60 <__aeabi_ddiv>
 8008c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9c:	f7f9 fdd2 	bl	8002844 <__aeabi_dsub>
 8008ca0:	9a05      	ldr	r2, [sp, #20]
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	4694      	mov	ip, r2
 8008ca6:	9310      	str	r3, [sp, #64]	; 0x40
 8008ca8:	9b07      	ldr	r3, [sp, #28]
 8008caa:	900a      	str	r0, [sp, #40]	; 0x28
 8008cac:	910b      	str	r1, [sp, #44]	; 0x2c
 8008cae:	4463      	add	r3, ip
 8008cb0:	9319      	str	r3, [sp, #100]	; 0x64
 8008cb2:	0029      	movs	r1, r5
 8008cb4:	0020      	movs	r0, r4
 8008cb6:	f7fa f975 	bl	8002fa4 <__aeabi_d2iz>
 8008cba:	9017      	str	r0, [sp, #92]	; 0x5c
 8008cbc:	f7fa f9a8 	bl	8003010 <__aeabi_i2d>
 8008cc0:	0002      	movs	r2, r0
 8008cc2:	000b      	movs	r3, r1
 8008cc4:	0020      	movs	r0, r4
 8008cc6:	0029      	movs	r1, r5
 8008cc8:	f7f9 fdbc 	bl	8002844 <__aeabi_dsub>
 8008ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	9307      	str	r3, [sp, #28]
 8008cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cd6:	0004      	movs	r4, r0
 8008cd8:	3330      	adds	r3, #48	; 0x30
 8008cda:	7013      	strb	r3, [r2, #0]
 8008cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce0:	000d      	movs	r5, r1
 8008ce2:	f7f7 fbb9 	bl	8000458 <__aeabi_dcmplt>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d175      	bne.n	8008dd6 <_dtoa_r+0x686>
 8008cea:	0022      	movs	r2, r4
 8008cec:	002b      	movs	r3, r5
 8008cee:	2000      	movs	r0, #0
 8008cf0:	493f      	ldr	r1, [pc, #252]	; (8008df0 <_dtoa_r+0x6a0>)
 8008cf2:	f7f9 fda7 	bl	8002844 <__aeabi_dsub>
 8008cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cfa:	f7f7 fbad 	bl	8000458 <__aeabi_dcmplt>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d000      	beq.n	8008d04 <_dtoa_r+0x5b4>
 8008d02:	e0d1      	b.n	8008ea8 <_dtoa_r+0x758>
 8008d04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d06:	9a07      	ldr	r2, [sp, #28]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d100      	bne.n	8008d0e <_dtoa_r+0x5be>
 8008d0c:	e770      	b.n	8008bf0 <_dtoa_r+0x4a0>
 8008d0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d12:	2200      	movs	r2, #0
 8008d14:	4b37      	ldr	r3, [pc, #220]	; (8008df4 <_dtoa_r+0x6a4>)
 8008d16:	f7f9 fb29 	bl	800236c <__aeabi_dmul>
 8008d1a:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <_dtoa_r+0x6a4>)
 8008d1c:	900a      	str	r0, [sp, #40]	; 0x28
 8008d1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d20:	2200      	movs	r2, #0
 8008d22:	0020      	movs	r0, r4
 8008d24:	0029      	movs	r1, r5
 8008d26:	f7f9 fb21 	bl	800236c <__aeabi_dmul>
 8008d2a:	9b07      	ldr	r3, [sp, #28]
 8008d2c:	0004      	movs	r4, r0
 8008d2e:	000d      	movs	r5, r1
 8008d30:	9310      	str	r3, [sp, #64]	; 0x40
 8008d32:	e7be      	b.n	8008cb2 <_dtoa_r+0x562>
 8008d34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d38:	f7f9 fb18 	bl	800236c <__aeabi_dmul>
 8008d3c:	9a05      	ldr	r2, [sp, #20]
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	4694      	mov	ip, r2
 8008d42:	930a      	str	r3, [sp, #40]	; 0x28
 8008d44:	9b07      	ldr	r3, [sp, #28]
 8008d46:	9010      	str	r0, [sp, #64]	; 0x40
 8008d48:	9111      	str	r1, [sp, #68]	; 0x44
 8008d4a:	4463      	add	r3, ip
 8008d4c:	9319      	str	r3, [sp, #100]	; 0x64
 8008d4e:	0029      	movs	r1, r5
 8008d50:	0020      	movs	r0, r4
 8008d52:	f7fa f927 	bl	8002fa4 <__aeabi_d2iz>
 8008d56:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d58:	f7fa f95a 	bl	8003010 <__aeabi_i2d>
 8008d5c:	0002      	movs	r2, r0
 8008d5e:	000b      	movs	r3, r1
 8008d60:	0020      	movs	r0, r4
 8008d62:	0029      	movs	r1, r5
 8008d64:	f7f9 fd6e 	bl	8002844 <__aeabi_dsub>
 8008d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d6c:	3330      	adds	r3, #48	; 0x30
 8008d6e:	7013      	strb	r3, [r2, #0]
 8008d70:	0013      	movs	r3, r2
 8008d72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d74:	3301      	adds	r3, #1
 8008d76:	0004      	movs	r4, r0
 8008d78:	000d      	movs	r5, r1
 8008d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d12c      	bne.n	8008dda <_dtoa_r+0x68a>
 8008d80:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d82:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008d84:	9a05      	ldr	r2, [sp, #20]
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	4694      	mov	ip, r2
 8008d8a:	4463      	add	r3, ip
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	9307      	str	r3, [sp, #28]
 8008d90:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <_dtoa_r+0x6b8>)
 8008d92:	f7f8 fb7b 	bl	800148c <__aeabi_dadd>
 8008d96:	0002      	movs	r2, r0
 8008d98:	000b      	movs	r3, r1
 8008d9a:	0020      	movs	r0, r4
 8008d9c:	0029      	movs	r1, r5
 8008d9e:	f7f7 fb6f 	bl	8000480 <__aeabi_dcmpgt>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d000      	beq.n	8008da8 <_dtoa_r+0x658>
 8008da6:	e07f      	b.n	8008ea8 <_dtoa_r+0x758>
 8008da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008daa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dac:	2000      	movs	r0, #0
 8008dae:	4916      	ldr	r1, [pc, #88]	; (8008e08 <_dtoa_r+0x6b8>)
 8008db0:	f7f9 fd48 	bl	8002844 <__aeabi_dsub>
 8008db4:	0002      	movs	r2, r0
 8008db6:	000b      	movs	r3, r1
 8008db8:	0020      	movs	r0, r4
 8008dba:	0029      	movs	r1, r5
 8008dbc:	f7f7 fb4c 	bl	8000458 <__aeabi_dcmplt>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d100      	bne.n	8008dc6 <_dtoa_r+0x676>
 8008dc4:	e714      	b.n	8008bf0 <_dtoa_r+0x4a0>
 8008dc6:	9b07      	ldr	r3, [sp, #28]
 8008dc8:	001a      	movs	r2, r3
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	9207      	str	r2, [sp, #28]
 8008dce:	7812      	ldrb	r2, [r2, #0]
 8008dd0:	2a30      	cmp	r2, #48	; 0x30
 8008dd2:	d0f8      	beq.n	8008dc6 <_dtoa_r+0x676>
 8008dd4:	9307      	str	r3, [sp, #28]
 8008dd6:	9602      	str	r6, [sp, #8]
 8008dd8:	e054      	b.n	8008e84 <_dtoa_r+0x734>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <_dtoa_r+0x6a4>)
 8008dde:	f7f9 fac5 	bl	800236c <__aeabi_dmul>
 8008de2:	0004      	movs	r4, r0
 8008de4:	000d      	movs	r5, r1
 8008de6:	e7b2      	b.n	8008d4e <_dtoa_r+0x5fe>
 8008de8:	0800b220 	.word	0x0800b220
 8008dec:	0800b1f8 	.word	0x0800b1f8
 8008df0:	3ff00000 	.word	0x3ff00000
 8008df4:	40240000 	.word	0x40240000
 8008df8:	401c0000 	.word	0x401c0000
 8008dfc:	fcc00000 	.word	0xfcc00000
 8008e00:	40140000 	.word	0x40140000
 8008e04:	7cc00000 	.word	0x7cc00000
 8008e08:	3fe00000 	.word	0x3fe00000
 8008e0c:	9b06      	ldr	r3, [sp, #24]
 8008e0e:	9e05      	ldr	r6, [sp, #20]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	199b      	adds	r3, r3, r6
 8008e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008e18:	930a      	str	r3, [sp, #40]	; 0x28
 8008e1a:	9a08      	ldr	r2, [sp, #32]
 8008e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1e:	0020      	movs	r0, r4
 8008e20:	0029      	movs	r1, r5
 8008e22:	f7f8 fe9d 	bl	8001b60 <__aeabi_ddiv>
 8008e26:	f7fa f8bd 	bl	8002fa4 <__aeabi_d2iz>
 8008e2a:	9006      	str	r0, [sp, #24]
 8008e2c:	f7fa f8f0 	bl	8003010 <__aeabi_i2d>
 8008e30:	9a08      	ldr	r2, [sp, #32]
 8008e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e34:	f7f9 fa9a 	bl	800236c <__aeabi_dmul>
 8008e38:	0002      	movs	r2, r0
 8008e3a:	000b      	movs	r3, r1
 8008e3c:	0020      	movs	r0, r4
 8008e3e:	0029      	movs	r1, r5
 8008e40:	f7f9 fd00 	bl	8002844 <__aeabi_dsub>
 8008e44:	0033      	movs	r3, r6
 8008e46:	9a06      	ldr	r2, [sp, #24]
 8008e48:	3601      	adds	r6, #1
 8008e4a:	3230      	adds	r2, #48	; 0x30
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e50:	9607      	str	r6, [sp, #28]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d139      	bne.n	8008eca <_dtoa_r+0x77a>
 8008e56:	0002      	movs	r2, r0
 8008e58:	000b      	movs	r3, r1
 8008e5a:	f7f8 fb17 	bl	800148c <__aeabi_dadd>
 8008e5e:	9a08      	ldr	r2, [sp, #32]
 8008e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e62:	0004      	movs	r4, r0
 8008e64:	000d      	movs	r5, r1
 8008e66:	f7f7 fb0b 	bl	8000480 <__aeabi_dcmpgt>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d11b      	bne.n	8008ea6 <_dtoa_r+0x756>
 8008e6e:	9a08      	ldr	r2, [sp, #32]
 8008e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e72:	0020      	movs	r0, r4
 8008e74:	0029      	movs	r1, r5
 8008e76:	f7f7 fae9 	bl	800044c <__aeabi_dcmpeq>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d002      	beq.n	8008e84 <_dtoa_r+0x734>
 8008e7e:	9b06      	ldr	r3, [sp, #24]
 8008e80:	07db      	lsls	r3, r3, #31
 8008e82:	d410      	bmi.n	8008ea6 <_dtoa_r+0x756>
 8008e84:	0038      	movs	r0, r7
 8008e86:	9904      	ldr	r1, [sp, #16]
 8008e88:	f000 fae6 	bl	8009458 <_Bfree>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9a07      	ldr	r2, [sp, #28]
 8008e90:	9802      	ldr	r0, [sp, #8]
 8008e92:	7013      	strb	r3, [r2, #0]
 8008e94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e96:	3001      	adds	r0, #1
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d100      	bne.n	8008ea2 <_dtoa_r+0x752>
 8008ea0:	e4a3      	b.n	80087ea <_dtoa_r+0x9a>
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e4a1      	b.n	80087ea <_dtoa_r+0x9a>
 8008ea6:	9e02      	ldr	r6, [sp, #8]
 8008ea8:	9b07      	ldr	r3, [sp, #28]
 8008eaa:	9307      	str	r3, [sp, #28]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	781a      	ldrb	r2, [r3, #0]
 8008eb0:	2a39      	cmp	r2, #57	; 0x39
 8008eb2:	d106      	bne.n	8008ec2 <_dtoa_r+0x772>
 8008eb4:	9a05      	ldr	r2, [sp, #20]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d1f7      	bne.n	8008eaa <_dtoa_r+0x75a>
 8008eba:	2230      	movs	r2, #48	; 0x30
 8008ebc:	9905      	ldr	r1, [sp, #20]
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	700a      	strb	r2, [r1, #0]
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e785      	b.n	8008dd6 <_dtoa_r+0x686>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4bad      	ldr	r3, [pc, #692]	; (8009184 <_dtoa_r+0xa34>)
 8008ece:	f7f9 fa4d 	bl	800236c <__aeabi_dmul>
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	0004      	movs	r4, r0
 8008ed8:	000d      	movs	r5, r1
 8008eda:	f7f7 fab7 	bl	800044c <__aeabi_dcmpeq>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d09b      	beq.n	8008e1a <_dtoa_r+0x6ca>
 8008ee2:	e7cf      	b.n	8008e84 <_dtoa_r+0x734>
 8008ee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ee6:	2a00      	cmp	r2, #0
 8008ee8:	d100      	bne.n	8008eec <_dtoa_r+0x79c>
 8008eea:	e082      	b.n	8008ff2 <_dtoa_r+0x8a2>
 8008eec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008eee:	2a01      	cmp	r2, #1
 8008ef0:	dc66      	bgt.n	8008fc0 <_dtoa_r+0x870>
 8008ef2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	d05f      	beq.n	8008fb8 <_dtoa_r+0x868>
 8008ef8:	4aa3      	ldr	r2, [pc, #652]	; (8009188 <_dtoa_r+0xa38>)
 8008efa:	189b      	adds	r3, r3, r2
 8008efc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008efe:	9c08      	ldr	r4, [sp, #32]
 8008f00:	9a08      	ldr	r2, [sp, #32]
 8008f02:	2101      	movs	r1, #1
 8008f04:	18d2      	adds	r2, r2, r3
 8008f06:	9208      	str	r2, [sp, #32]
 8008f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f0a:	0038      	movs	r0, r7
 8008f0c:	18d3      	adds	r3, r2, r3
 8008f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008f10:	f000 fb52 	bl	80095b8 <__i2b>
 8008f14:	0005      	movs	r5, r0
 8008f16:	2c00      	cmp	r4, #0
 8008f18:	dd0e      	ble.n	8008f38 <_dtoa_r+0x7e8>
 8008f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd0b      	ble.n	8008f38 <_dtoa_r+0x7e8>
 8008f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f22:	0023      	movs	r3, r4
 8008f24:	4294      	cmp	r4, r2
 8008f26:	dd00      	ble.n	8008f2a <_dtoa_r+0x7da>
 8008f28:	0013      	movs	r3, r2
 8008f2a:	9a08      	ldr	r2, [sp, #32]
 8008f2c:	1ae4      	subs	r4, r4, r3
 8008f2e:	1ad2      	subs	r2, r2, r3
 8008f30:	9208      	str	r2, [sp, #32]
 8008f32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	930d      	str	r3, [sp, #52]	; 0x34
 8008f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d01f      	beq.n	8008f7e <_dtoa_r+0x82e>
 8008f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d05a      	beq.n	8008ffa <_dtoa_r+0x8aa>
 8008f44:	2e00      	cmp	r6, #0
 8008f46:	dd11      	ble.n	8008f6c <_dtoa_r+0x81c>
 8008f48:	0029      	movs	r1, r5
 8008f4a:	0032      	movs	r2, r6
 8008f4c:	0038      	movs	r0, r7
 8008f4e:	f000 fbf9 	bl	8009744 <__pow5mult>
 8008f52:	9a04      	ldr	r2, [sp, #16]
 8008f54:	0001      	movs	r1, r0
 8008f56:	0005      	movs	r5, r0
 8008f58:	0038      	movs	r0, r7
 8008f5a:	f000 fb43 	bl	80095e4 <__multiply>
 8008f5e:	9904      	ldr	r1, [sp, #16]
 8008f60:	9007      	str	r0, [sp, #28]
 8008f62:	0038      	movs	r0, r7
 8008f64:	f000 fa78 	bl	8009458 <_Bfree>
 8008f68:	9b07      	ldr	r3, [sp, #28]
 8008f6a:	9304      	str	r3, [sp, #16]
 8008f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f6e:	1b9a      	subs	r2, r3, r6
 8008f70:	42b3      	cmp	r3, r6
 8008f72:	d004      	beq.n	8008f7e <_dtoa_r+0x82e>
 8008f74:	0038      	movs	r0, r7
 8008f76:	9904      	ldr	r1, [sp, #16]
 8008f78:	f000 fbe4 	bl	8009744 <__pow5mult>
 8008f7c:	9004      	str	r0, [sp, #16]
 8008f7e:	2101      	movs	r1, #1
 8008f80:	0038      	movs	r0, r7
 8008f82:	f000 fb19 	bl	80095b8 <__i2b>
 8008f86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f88:	0006      	movs	r6, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dd37      	ble.n	8008ffe <_dtoa_r+0x8ae>
 8008f8e:	001a      	movs	r2, r3
 8008f90:	0001      	movs	r1, r0
 8008f92:	0038      	movs	r0, r7
 8008f94:	f000 fbd6 	bl	8009744 <__pow5mult>
 8008f98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f9a:	0006      	movs	r6, r0
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	dd33      	ble.n	8009008 <_dtoa_r+0x8b8>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	6933      	ldr	r3, [r6, #16]
 8008fa6:	3303      	adds	r3, #3
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	18f3      	adds	r3, r6, r3
 8008fac:	6858      	ldr	r0, [r3, #4]
 8008fae:	f000 fabb 	bl	8009528 <__hi0bits>
 8008fb2:	2320      	movs	r3, #32
 8008fb4:	1a18      	subs	r0, r3, r0
 8008fb6:	e03f      	b.n	8009038 <_dtoa_r+0x8e8>
 8008fb8:	2336      	movs	r3, #54	; 0x36
 8008fba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008fbc:	1a9b      	subs	r3, r3, r2
 8008fbe:	e79d      	b.n	8008efc <_dtoa_r+0x7ac>
 8008fc0:	9b06      	ldr	r3, [sp, #24]
 8008fc2:	1e5e      	subs	r6, r3, #1
 8008fc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fc6:	42b3      	cmp	r3, r6
 8008fc8:	db08      	blt.n	8008fdc <_dtoa_r+0x88c>
 8008fca:	1b9e      	subs	r6, r3, r6
 8008fcc:	9b06      	ldr	r3, [sp, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da0c      	bge.n	8008fec <_dtoa_r+0x89c>
 8008fd2:	9b08      	ldr	r3, [sp, #32]
 8008fd4:	9a06      	ldr	r2, [sp, #24]
 8008fd6:	1a9c      	subs	r4, r3, r2
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e791      	b.n	8008f00 <_dtoa_r+0x7b0>
 8008fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fe0:	1af3      	subs	r3, r6, r3
 8008fe2:	18d3      	adds	r3, r2, r3
 8008fe4:	960e      	str	r6, [sp, #56]	; 0x38
 8008fe6:	9314      	str	r3, [sp, #80]	; 0x50
 8008fe8:	2600      	movs	r6, #0
 8008fea:	e7ef      	b.n	8008fcc <_dtoa_r+0x87c>
 8008fec:	9c08      	ldr	r4, [sp, #32]
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	e786      	b.n	8008f00 <_dtoa_r+0x7b0>
 8008ff2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ff4:	9c08      	ldr	r4, [sp, #32]
 8008ff6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ff8:	e78d      	b.n	8008f16 <_dtoa_r+0x7c6>
 8008ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ffc:	e7ba      	b.n	8008f74 <_dtoa_r+0x824>
 8008ffe:	2300      	movs	r3, #0
 8009000:	9307      	str	r3, [sp, #28]
 8009002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009004:	2b01      	cmp	r3, #1
 8009006:	dc13      	bgt.n	8009030 <_dtoa_r+0x8e0>
 8009008:	2300      	movs	r3, #0
 800900a:	9307      	str	r3, [sp, #28]
 800900c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10e      	bne.n	8009030 <_dtoa_r+0x8e0>
 8009012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009014:	031b      	lsls	r3, r3, #12
 8009016:	d10b      	bne.n	8009030 <_dtoa_r+0x8e0>
 8009018:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800901a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800901c:	4213      	tst	r3, r2
 800901e:	d007      	beq.n	8009030 <_dtoa_r+0x8e0>
 8009020:	9b08      	ldr	r3, [sp, #32]
 8009022:	3301      	adds	r3, #1
 8009024:	9308      	str	r3, [sp, #32]
 8009026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009028:	3301      	adds	r3, #1
 800902a:	930d      	str	r3, [sp, #52]	; 0x34
 800902c:	2301      	movs	r3, #1
 800902e:	9307      	str	r3, [sp, #28]
 8009030:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009032:	2001      	movs	r0, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1b5      	bne.n	8008fa4 <_dtoa_r+0x854>
 8009038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800903a:	221f      	movs	r2, #31
 800903c:	1818      	adds	r0, r3, r0
 800903e:	0003      	movs	r3, r0
 8009040:	4013      	ands	r3, r2
 8009042:	4210      	tst	r0, r2
 8009044:	d046      	beq.n	80090d4 <_dtoa_r+0x984>
 8009046:	3201      	adds	r2, #1
 8009048:	1ad2      	subs	r2, r2, r3
 800904a:	2a04      	cmp	r2, #4
 800904c:	dd3f      	ble.n	80090ce <_dtoa_r+0x97e>
 800904e:	221c      	movs	r2, #28
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	9a08      	ldr	r2, [sp, #32]
 8009054:	18e4      	adds	r4, r4, r3
 8009056:	18d2      	adds	r2, r2, r3
 8009058:	9208      	str	r2, [sp, #32]
 800905a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800905c:	18d3      	adds	r3, r2, r3
 800905e:	930d      	str	r3, [sp, #52]	; 0x34
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	dd05      	ble.n	8009072 <_dtoa_r+0x922>
 8009066:	001a      	movs	r2, r3
 8009068:	0038      	movs	r0, r7
 800906a:	9904      	ldr	r1, [sp, #16]
 800906c:	f000 fbc6 	bl	80097fc <__lshift>
 8009070:	9004      	str	r0, [sp, #16]
 8009072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd05      	ble.n	8009084 <_dtoa_r+0x934>
 8009078:	0031      	movs	r1, r6
 800907a:	001a      	movs	r2, r3
 800907c:	0038      	movs	r0, r7
 800907e:	f000 fbbd 	bl	80097fc <__lshift>
 8009082:	0006      	movs	r6, r0
 8009084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009086:	2b00      	cmp	r3, #0
 8009088:	d026      	beq.n	80090d8 <_dtoa_r+0x988>
 800908a:	0031      	movs	r1, r6
 800908c:	9804      	ldr	r0, [sp, #16]
 800908e:	f000 fc25 	bl	80098dc <__mcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	da20      	bge.n	80090d8 <_dtoa_r+0x988>
 8009096:	9b02      	ldr	r3, [sp, #8]
 8009098:	220a      	movs	r2, #10
 800909a:	3b01      	subs	r3, #1
 800909c:	9302      	str	r3, [sp, #8]
 800909e:	0038      	movs	r0, r7
 80090a0:	2300      	movs	r3, #0
 80090a2:	9904      	ldr	r1, [sp, #16]
 80090a4:	f000 f9fc 	bl	80094a0 <__multadd>
 80090a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090aa:	9004      	str	r0, [sp, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d100      	bne.n	80090b2 <_dtoa_r+0x962>
 80090b0:	e160      	b.n	8009374 <_dtoa_r+0xc24>
 80090b2:	2300      	movs	r3, #0
 80090b4:	0029      	movs	r1, r5
 80090b6:	220a      	movs	r2, #10
 80090b8:	0038      	movs	r0, r7
 80090ba:	f000 f9f1 	bl	80094a0 <__multadd>
 80090be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090c0:	0005      	movs	r5, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dc47      	bgt.n	8009156 <_dtoa_r+0xa06>
 80090c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	dc0d      	bgt.n	80090e8 <_dtoa_r+0x998>
 80090cc:	e043      	b.n	8009156 <_dtoa_r+0xa06>
 80090ce:	2a04      	cmp	r2, #4
 80090d0:	d0c6      	beq.n	8009060 <_dtoa_r+0x910>
 80090d2:	0013      	movs	r3, r2
 80090d4:	331c      	adds	r3, #28
 80090d6:	e7bc      	b.n	8009052 <_dtoa_r+0x902>
 80090d8:	9b06      	ldr	r3, [sp, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dc35      	bgt.n	800914a <_dtoa_r+0x9fa>
 80090de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	dd32      	ble.n	800914a <_dtoa_r+0x9fa>
 80090e4:	9b06      	ldr	r3, [sp, #24]
 80090e6:	930c      	str	r3, [sp, #48]	; 0x30
 80090e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10c      	bne.n	8009108 <_dtoa_r+0x9b8>
 80090ee:	0031      	movs	r1, r6
 80090f0:	2205      	movs	r2, #5
 80090f2:	0038      	movs	r0, r7
 80090f4:	f000 f9d4 	bl	80094a0 <__multadd>
 80090f8:	0006      	movs	r6, r0
 80090fa:	0001      	movs	r1, r0
 80090fc:	9804      	ldr	r0, [sp, #16]
 80090fe:	f000 fbed 	bl	80098dc <__mcmp>
 8009102:	2800      	cmp	r0, #0
 8009104:	dd00      	ble.n	8009108 <_dtoa_r+0x9b8>
 8009106:	e59f      	b.n	8008c48 <_dtoa_r+0x4f8>
 8009108:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800910a:	43db      	mvns	r3, r3
 800910c:	9302      	str	r3, [sp, #8]
 800910e:	9b05      	ldr	r3, [sp, #20]
 8009110:	9307      	str	r3, [sp, #28]
 8009112:	2400      	movs	r4, #0
 8009114:	0031      	movs	r1, r6
 8009116:	0038      	movs	r0, r7
 8009118:	f000 f99e 	bl	8009458 <_Bfree>
 800911c:	2d00      	cmp	r5, #0
 800911e:	d100      	bne.n	8009122 <_dtoa_r+0x9d2>
 8009120:	e6b0      	b.n	8008e84 <_dtoa_r+0x734>
 8009122:	2c00      	cmp	r4, #0
 8009124:	d005      	beq.n	8009132 <_dtoa_r+0x9e2>
 8009126:	42ac      	cmp	r4, r5
 8009128:	d003      	beq.n	8009132 <_dtoa_r+0x9e2>
 800912a:	0021      	movs	r1, r4
 800912c:	0038      	movs	r0, r7
 800912e:	f000 f993 	bl	8009458 <_Bfree>
 8009132:	0029      	movs	r1, r5
 8009134:	0038      	movs	r0, r7
 8009136:	f000 f98f 	bl	8009458 <_Bfree>
 800913a:	e6a3      	b.n	8008e84 <_dtoa_r+0x734>
 800913c:	2600      	movs	r6, #0
 800913e:	0035      	movs	r5, r6
 8009140:	e7e2      	b.n	8009108 <_dtoa_r+0x9b8>
 8009142:	9602      	str	r6, [sp, #8]
 8009144:	9e07      	ldr	r6, [sp, #28]
 8009146:	0035      	movs	r5, r6
 8009148:	e57e      	b.n	8008c48 <_dtoa_r+0x4f8>
 800914a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d100      	bne.n	8009152 <_dtoa_r+0xa02>
 8009150:	e0c8      	b.n	80092e4 <_dtoa_r+0xb94>
 8009152:	9b06      	ldr	r3, [sp, #24]
 8009154:	930c      	str	r3, [sp, #48]	; 0x30
 8009156:	2c00      	cmp	r4, #0
 8009158:	dd05      	ble.n	8009166 <_dtoa_r+0xa16>
 800915a:	0029      	movs	r1, r5
 800915c:	0022      	movs	r2, r4
 800915e:	0038      	movs	r0, r7
 8009160:	f000 fb4c 	bl	80097fc <__lshift>
 8009164:	0005      	movs	r5, r0
 8009166:	9b07      	ldr	r3, [sp, #28]
 8009168:	0028      	movs	r0, r5
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01f      	beq.n	80091ae <_dtoa_r+0xa5e>
 800916e:	0038      	movs	r0, r7
 8009170:	6869      	ldr	r1, [r5, #4]
 8009172:	f000 f92d 	bl	80093d0 <_Balloc>
 8009176:	1e04      	subs	r4, r0, #0
 8009178:	d10c      	bne.n	8009194 <_dtoa_r+0xa44>
 800917a:	0002      	movs	r2, r0
 800917c:	4b03      	ldr	r3, [pc, #12]	; (800918c <_dtoa_r+0xa3c>)
 800917e:	4904      	ldr	r1, [pc, #16]	; (8009190 <_dtoa_r+0xa40>)
 8009180:	f7ff fafb 	bl	800877a <_dtoa_r+0x2a>
 8009184:	40240000 	.word	0x40240000
 8009188:	00000433 	.word	0x00000433
 800918c:	0800b187 	.word	0x0800b187
 8009190:	000002ea 	.word	0x000002ea
 8009194:	0029      	movs	r1, r5
 8009196:	692b      	ldr	r3, [r5, #16]
 8009198:	310c      	adds	r1, #12
 800919a:	1c9a      	adds	r2, r3, #2
 800919c:	0092      	lsls	r2, r2, #2
 800919e:	300c      	adds	r0, #12
 80091a0:	f000 f90d 	bl	80093be <memcpy>
 80091a4:	2201      	movs	r2, #1
 80091a6:	0021      	movs	r1, r4
 80091a8:	0038      	movs	r0, r7
 80091aa:	f000 fb27 	bl	80097fc <__lshift>
 80091ae:	002c      	movs	r4, r5
 80091b0:	0005      	movs	r5, r0
 80091b2:	9b05      	ldr	r3, [sp, #20]
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	0031      	movs	r1, r6
 80091b8:	9804      	ldr	r0, [sp, #16]
 80091ba:	f7ff fa3d 	bl	8008638 <quorem>
 80091be:	0003      	movs	r3, r0
 80091c0:	0021      	movs	r1, r4
 80091c2:	3330      	adds	r3, #48	; 0x30
 80091c4:	900e      	str	r0, [sp, #56]	; 0x38
 80091c6:	9804      	ldr	r0, [sp, #16]
 80091c8:	9306      	str	r3, [sp, #24]
 80091ca:	f000 fb87 	bl	80098dc <__mcmp>
 80091ce:	002a      	movs	r2, r5
 80091d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80091d2:	0031      	movs	r1, r6
 80091d4:	0038      	movs	r0, r7
 80091d6:	f000 fb9d 	bl	8009914 <__mdiff>
 80091da:	68c3      	ldr	r3, [r0, #12]
 80091dc:	9007      	str	r0, [sp, #28]
 80091de:	9310      	str	r3, [sp, #64]	; 0x40
 80091e0:	2301      	movs	r3, #1
 80091e2:	930d      	str	r3, [sp, #52]	; 0x34
 80091e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <_dtoa_r+0xaa4>
 80091ea:	0001      	movs	r1, r0
 80091ec:	9804      	ldr	r0, [sp, #16]
 80091ee:	f000 fb75 	bl	80098dc <__mcmp>
 80091f2:	900d      	str	r0, [sp, #52]	; 0x34
 80091f4:	0038      	movs	r0, r7
 80091f6:	9907      	ldr	r1, [sp, #28]
 80091f8:	f000 f92e 	bl	8009458 <_Bfree>
 80091fc:	2301      	movs	r3, #1
 80091fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009202:	4018      	ands	r0, r3
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	3301      	adds	r3, #1
 8009208:	9307      	str	r3, [sp, #28]
 800920a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800920c:	4313      	orrs	r3, r2
 800920e:	4303      	orrs	r3, r0
 8009210:	d10c      	bne.n	800922c <_dtoa_r+0xadc>
 8009212:	9b06      	ldr	r3, [sp, #24]
 8009214:	2b39      	cmp	r3, #57	; 0x39
 8009216:	d025      	beq.n	8009264 <_dtoa_r+0xb14>
 8009218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd02      	ble.n	8009224 <_dtoa_r+0xad4>
 800921e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009220:	3331      	adds	r3, #49	; 0x31
 8009222:	9306      	str	r3, [sp, #24]
 8009224:	9b08      	ldr	r3, [sp, #32]
 8009226:	9a06      	ldr	r2, [sp, #24]
 8009228:	701a      	strb	r2, [r3, #0]
 800922a:	e773      	b.n	8009114 <_dtoa_r+0x9c4>
 800922c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800922e:	2b00      	cmp	r3, #0
 8009230:	db03      	blt.n	800923a <_dtoa_r+0xaea>
 8009232:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009234:	4313      	orrs	r3, r2
 8009236:	4303      	orrs	r3, r0
 8009238:	d11f      	bne.n	800927a <_dtoa_r+0xb2a>
 800923a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800923c:	2b00      	cmp	r3, #0
 800923e:	ddf1      	ble.n	8009224 <_dtoa_r+0xad4>
 8009240:	9904      	ldr	r1, [sp, #16]
 8009242:	2201      	movs	r2, #1
 8009244:	0038      	movs	r0, r7
 8009246:	f000 fad9 	bl	80097fc <__lshift>
 800924a:	0031      	movs	r1, r6
 800924c:	9004      	str	r0, [sp, #16]
 800924e:	f000 fb45 	bl	80098dc <__mcmp>
 8009252:	2800      	cmp	r0, #0
 8009254:	dc03      	bgt.n	800925e <_dtoa_r+0xb0e>
 8009256:	d1e5      	bne.n	8009224 <_dtoa_r+0xad4>
 8009258:	9b06      	ldr	r3, [sp, #24]
 800925a:	07db      	lsls	r3, r3, #31
 800925c:	d5e2      	bpl.n	8009224 <_dtoa_r+0xad4>
 800925e:	9b06      	ldr	r3, [sp, #24]
 8009260:	2b39      	cmp	r3, #57	; 0x39
 8009262:	d1dc      	bne.n	800921e <_dtoa_r+0xace>
 8009264:	2339      	movs	r3, #57	; 0x39
 8009266:	9a08      	ldr	r2, [sp, #32]
 8009268:	7013      	strb	r3, [r2, #0]
 800926a:	9b07      	ldr	r3, [sp, #28]
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	3b01      	subs	r3, #1
 8009270:	781a      	ldrb	r2, [r3, #0]
 8009272:	2a39      	cmp	r2, #57	; 0x39
 8009274:	d06c      	beq.n	8009350 <_dtoa_r+0xc00>
 8009276:	3201      	adds	r2, #1
 8009278:	e7d6      	b.n	8009228 <_dtoa_r+0xad8>
 800927a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800927c:	2b00      	cmp	r3, #0
 800927e:	dd07      	ble.n	8009290 <_dtoa_r+0xb40>
 8009280:	9b06      	ldr	r3, [sp, #24]
 8009282:	2b39      	cmp	r3, #57	; 0x39
 8009284:	d0ee      	beq.n	8009264 <_dtoa_r+0xb14>
 8009286:	9b06      	ldr	r3, [sp, #24]
 8009288:	9a08      	ldr	r2, [sp, #32]
 800928a:	3301      	adds	r3, #1
 800928c:	7013      	strb	r3, [r2, #0]
 800928e:	e741      	b.n	8009114 <_dtoa_r+0x9c4>
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	9a06      	ldr	r2, [sp, #24]
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	2301      	movs	r3, #1
 8009298:	9a05      	ldr	r2, [sp, #20]
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	9a08      	ldr	r2, [sp, #32]
 800929e:	189b      	adds	r3, r3, r2
 80092a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d03e      	beq.n	8009324 <_dtoa_r+0xbd4>
 80092a6:	2300      	movs	r3, #0
 80092a8:	220a      	movs	r2, #10
 80092aa:	9904      	ldr	r1, [sp, #16]
 80092ac:	0038      	movs	r0, r7
 80092ae:	f000 f8f7 	bl	80094a0 <__multadd>
 80092b2:	2300      	movs	r3, #0
 80092b4:	9004      	str	r0, [sp, #16]
 80092b6:	220a      	movs	r2, #10
 80092b8:	0021      	movs	r1, r4
 80092ba:	0038      	movs	r0, r7
 80092bc:	42ac      	cmp	r4, r5
 80092be:	d106      	bne.n	80092ce <_dtoa_r+0xb7e>
 80092c0:	f000 f8ee 	bl	80094a0 <__multadd>
 80092c4:	0004      	movs	r4, r0
 80092c6:	0005      	movs	r5, r0
 80092c8:	9b07      	ldr	r3, [sp, #28]
 80092ca:	9308      	str	r3, [sp, #32]
 80092cc:	e773      	b.n	80091b6 <_dtoa_r+0xa66>
 80092ce:	f000 f8e7 	bl	80094a0 <__multadd>
 80092d2:	0029      	movs	r1, r5
 80092d4:	0004      	movs	r4, r0
 80092d6:	2300      	movs	r3, #0
 80092d8:	220a      	movs	r2, #10
 80092da:	0038      	movs	r0, r7
 80092dc:	f000 f8e0 	bl	80094a0 <__multadd>
 80092e0:	0005      	movs	r5, r0
 80092e2:	e7f1      	b.n	80092c8 <_dtoa_r+0xb78>
 80092e4:	9b06      	ldr	r3, [sp, #24]
 80092e6:	930c      	str	r3, [sp, #48]	; 0x30
 80092e8:	2400      	movs	r4, #0
 80092ea:	0031      	movs	r1, r6
 80092ec:	9804      	ldr	r0, [sp, #16]
 80092ee:	f7ff f9a3 	bl	8008638 <quorem>
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	3030      	adds	r0, #48	; 0x30
 80092f6:	5518      	strb	r0, [r3, r4]
 80092f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092fa:	3401      	adds	r4, #1
 80092fc:	9006      	str	r0, [sp, #24]
 80092fe:	42a3      	cmp	r3, r4
 8009300:	dd07      	ble.n	8009312 <_dtoa_r+0xbc2>
 8009302:	2300      	movs	r3, #0
 8009304:	220a      	movs	r2, #10
 8009306:	0038      	movs	r0, r7
 8009308:	9904      	ldr	r1, [sp, #16]
 800930a:	f000 f8c9 	bl	80094a0 <__multadd>
 800930e:	9004      	str	r0, [sp, #16]
 8009310:	e7eb      	b.n	80092ea <_dtoa_r+0xb9a>
 8009312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009314:	2001      	movs	r0, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd00      	ble.n	800931c <_dtoa_r+0xbcc>
 800931a:	0018      	movs	r0, r3
 800931c:	2400      	movs	r4, #0
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	181b      	adds	r3, r3, r0
 8009322:	9307      	str	r3, [sp, #28]
 8009324:	9904      	ldr	r1, [sp, #16]
 8009326:	2201      	movs	r2, #1
 8009328:	0038      	movs	r0, r7
 800932a:	f000 fa67 	bl	80097fc <__lshift>
 800932e:	0031      	movs	r1, r6
 8009330:	9004      	str	r0, [sp, #16]
 8009332:	f000 fad3 	bl	80098dc <__mcmp>
 8009336:	2800      	cmp	r0, #0
 8009338:	dc97      	bgt.n	800926a <_dtoa_r+0xb1a>
 800933a:	d102      	bne.n	8009342 <_dtoa_r+0xbf2>
 800933c:	9b06      	ldr	r3, [sp, #24]
 800933e:	07db      	lsls	r3, r3, #31
 8009340:	d493      	bmi.n	800926a <_dtoa_r+0xb1a>
 8009342:	9b07      	ldr	r3, [sp, #28]
 8009344:	9307      	str	r3, [sp, #28]
 8009346:	3b01      	subs	r3, #1
 8009348:	781a      	ldrb	r2, [r3, #0]
 800934a:	2a30      	cmp	r2, #48	; 0x30
 800934c:	d0fa      	beq.n	8009344 <_dtoa_r+0xbf4>
 800934e:	e6e1      	b.n	8009114 <_dtoa_r+0x9c4>
 8009350:	9a05      	ldr	r2, [sp, #20]
 8009352:	429a      	cmp	r2, r3
 8009354:	d18a      	bne.n	800926c <_dtoa_r+0xb1c>
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	3301      	adds	r3, #1
 800935a:	9302      	str	r3, [sp, #8]
 800935c:	2331      	movs	r3, #49	; 0x31
 800935e:	e795      	b.n	800928c <_dtoa_r+0xb3c>
 8009360:	4b08      	ldr	r3, [pc, #32]	; (8009384 <_dtoa_r+0xc34>)
 8009362:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	4b08      	ldr	r3, [pc, #32]	; (8009388 <_dtoa_r+0xc38>)
 8009368:	2a00      	cmp	r2, #0
 800936a:	d001      	beq.n	8009370 <_dtoa_r+0xc20>
 800936c:	f7ff fa3b 	bl	80087e6 <_dtoa_r+0x96>
 8009370:	f7ff fa3b 	bl	80087ea <_dtoa_r+0x9a>
 8009374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009376:	2b00      	cmp	r3, #0
 8009378:	dcb6      	bgt.n	80092e8 <_dtoa_r+0xb98>
 800937a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800937c:	2b02      	cmp	r3, #2
 800937e:	dd00      	ble.n	8009382 <_dtoa_r+0xc32>
 8009380:	e6b2      	b.n	80090e8 <_dtoa_r+0x998>
 8009382:	e7b1      	b.n	80092e8 <_dtoa_r+0xb98>
 8009384:	0800b104 	.word	0x0800b104
 8009388:	0800b10c 	.word	0x0800b10c

0800938c <_localeconv_r>:
 800938c:	4800      	ldr	r0, [pc, #0]	; (8009390 <_localeconv_r+0x4>)
 800938e:	4770      	bx	lr
 8009390:	20000160 	.word	0x20000160

08009394 <malloc>:
 8009394:	b510      	push	{r4, lr}
 8009396:	4b03      	ldr	r3, [pc, #12]	; (80093a4 <malloc+0x10>)
 8009398:	0001      	movs	r1, r0
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	f000 fc0e 	bl	8009bbc <_malloc_r>
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	2000000c 	.word	0x2000000c

080093a8 <memchr>:
 80093a8:	b2c9      	uxtb	r1, r1
 80093aa:	1882      	adds	r2, r0, r2
 80093ac:	4290      	cmp	r0, r2
 80093ae:	d101      	bne.n	80093b4 <memchr+0xc>
 80093b0:	2000      	movs	r0, #0
 80093b2:	4770      	bx	lr
 80093b4:	7803      	ldrb	r3, [r0, #0]
 80093b6:	428b      	cmp	r3, r1
 80093b8:	d0fb      	beq.n	80093b2 <memchr+0xa>
 80093ba:	3001      	adds	r0, #1
 80093bc:	e7f6      	b.n	80093ac <memchr+0x4>

080093be <memcpy>:
 80093be:	2300      	movs	r3, #0
 80093c0:	b510      	push	{r4, lr}
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d100      	bne.n	80093c8 <memcpy+0xa>
 80093c6:	bd10      	pop	{r4, pc}
 80093c8:	5ccc      	ldrb	r4, [r1, r3]
 80093ca:	54c4      	strb	r4, [r0, r3]
 80093cc:	3301      	adds	r3, #1
 80093ce:	e7f8      	b.n	80093c2 <memcpy+0x4>

080093d0 <_Balloc>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093d4:	0006      	movs	r6, r0
 80093d6:	000c      	movs	r4, r1
 80093d8:	2d00      	cmp	r5, #0
 80093da:	d10e      	bne.n	80093fa <_Balloc+0x2a>
 80093dc:	2010      	movs	r0, #16
 80093de:	f7ff ffd9 	bl	8009394 <malloc>
 80093e2:	1e02      	subs	r2, r0, #0
 80093e4:	6270      	str	r0, [r6, #36]	; 0x24
 80093e6:	d104      	bne.n	80093f2 <_Balloc+0x22>
 80093e8:	2166      	movs	r1, #102	; 0x66
 80093ea:	4b19      	ldr	r3, [pc, #100]	; (8009450 <_Balloc+0x80>)
 80093ec:	4819      	ldr	r0, [pc, #100]	; (8009454 <_Balloc+0x84>)
 80093ee:	f000 fdb7 	bl	8009f60 <__assert_func>
 80093f2:	6045      	str	r5, [r0, #4]
 80093f4:	6085      	str	r5, [r0, #8]
 80093f6:	6005      	str	r5, [r0, #0]
 80093f8:	60c5      	str	r5, [r0, #12]
 80093fa:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80093fc:	68eb      	ldr	r3, [r5, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d013      	beq.n	800942a <_Balloc+0x5a>
 8009402:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009404:	00a2      	lsls	r2, r4, #2
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	189b      	adds	r3, r3, r2
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	2800      	cmp	r0, #0
 800940e:	d118      	bne.n	8009442 <_Balloc+0x72>
 8009410:	2101      	movs	r1, #1
 8009412:	000d      	movs	r5, r1
 8009414:	40a5      	lsls	r5, r4
 8009416:	1d6a      	adds	r2, r5, #5
 8009418:	0030      	movs	r0, r6
 800941a:	0092      	lsls	r2, r2, #2
 800941c:	f000 fb76 	bl	8009b0c <_calloc_r>
 8009420:	2800      	cmp	r0, #0
 8009422:	d00c      	beq.n	800943e <_Balloc+0x6e>
 8009424:	6044      	str	r4, [r0, #4]
 8009426:	6085      	str	r5, [r0, #8]
 8009428:	e00d      	b.n	8009446 <_Balloc+0x76>
 800942a:	2221      	movs	r2, #33	; 0x21
 800942c:	2104      	movs	r1, #4
 800942e:	0030      	movs	r0, r6
 8009430:	f000 fb6c 	bl	8009b0c <_calloc_r>
 8009434:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009436:	60e8      	str	r0, [r5, #12]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e1      	bne.n	8009402 <_Balloc+0x32>
 800943e:	2000      	movs	r0, #0
 8009440:	bd70      	pop	{r4, r5, r6, pc}
 8009442:	6802      	ldr	r2, [r0, #0]
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	2300      	movs	r3, #0
 8009448:	6103      	str	r3, [r0, #16]
 800944a:	60c3      	str	r3, [r0, #12]
 800944c:	e7f8      	b.n	8009440 <_Balloc+0x70>
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	0800b111 	.word	0x0800b111
 8009454:	0800b198 	.word	0x0800b198

08009458 <_Bfree>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800945c:	0005      	movs	r5, r0
 800945e:	000c      	movs	r4, r1
 8009460:	2e00      	cmp	r6, #0
 8009462:	d10e      	bne.n	8009482 <_Bfree+0x2a>
 8009464:	2010      	movs	r0, #16
 8009466:	f7ff ff95 	bl	8009394 <malloc>
 800946a:	1e02      	subs	r2, r0, #0
 800946c:	6268      	str	r0, [r5, #36]	; 0x24
 800946e:	d104      	bne.n	800947a <_Bfree+0x22>
 8009470:	218a      	movs	r1, #138	; 0x8a
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <_Bfree+0x40>)
 8009474:	4809      	ldr	r0, [pc, #36]	; (800949c <_Bfree+0x44>)
 8009476:	f000 fd73 	bl	8009f60 <__assert_func>
 800947a:	6046      	str	r6, [r0, #4]
 800947c:	6086      	str	r6, [r0, #8]
 800947e:	6006      	str	r6, [r0, #0]
 8009480:	60c6      	str	r6, [r0, #12]
 8009482:	2c00      	cmp	r4, #0
 8009484:	d007      	beq.n	8009496 <_Bfree+0x3e>
 8009486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009488:	6862      	ldr	r2, [r4, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	0092      	lsls	r2, r2, #2
 800948e:	189b      	adds	r3, r3, r2
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	6022      	str	r2, [r4, #0]
 8009494:	601c      	str	r4, [r3, #0]
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	0800b111 	.word	0x0800b111
 800949c:	0800b198 	.word	0x0800b198

080094a0 <__multadd>:
 80094a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a2:	000e      	movs	r6, r1
 80094a4:	9001      	str	r0, [sp, #4]
 80094a6:	000c      	movs	r4, r1
 80094a8:	001d      	movs	r5, r3
 80094aa:	2000      	movs	r0, #0
 80094ac:	690f      	ldr	r7, [r1, #16]
 80094ae:	3614      	adds	r6, #20
 80094b0:	6833      	ldr	r3, [r6, #0]
 80094b2:	3001      	adds	r0, #1
 80094b4:	b299      	uxth	r1, r3
 80094b6:	4351      	muls	r1, r2
 80094b8:	0c1b      	lsrs	r3, r3, #16
 80094ba:	4353      	muls	r3, r2
 80094bc:	1949      	adds	r1, r1, r5
 80094be:	0c0d      	lsrs	r5, r1, #16
 80094c0:	195b      	adds	r3, r3, r5
 80094c2:	0c1d      	lsrs	r5, r3, #16
 80094c4:	b289      	uxth	r1, r1
 80094c6:	041b      	lsls	r3, r3, #16
 80094c8:	185b      	adds	r3, r3, r1
 80094ca:	c608      	stmia	r6!, {r3}
 80094cc:	4287      	cmp	r7, r0
 80094ce:	dcef      	bgt.n	80094b0 <__multadd+0x10>
 80094d0:	2d00      	cmp	r5, #0
 80094d2:	d022      	beq.n	800951a <__multadd+0x7a>
 80094d4:	68a3      	ldr	r3, [r4, #8]
 80094d6:	42bb      	cmp	r3, r7
 80094d8:	dc19      	bgt.n	800950e <__multadd+0x6e>
 80094da:	6863      	ldr	r3, [r4, #4]
 80094dc:	9801      	ldr	r0, [sp, #4]
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	f7ff ff76 	bl	80093d0 <_Balloc>
 80094e4:	1e06      	subs	r6, r0, #0
 80094e6:	d105      	bne.n	80094f4 <__multadd+0x54>
 80094e8:	0002      	movs	r2, r0
 80094ea:	21b5      	movs	r1, #181	; 0xb5
 80094ec:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <__multadd+0x80>)
 80094ee:	480d      	ldr	r0, [pc, #52]	; (8009524 <__multadd+0x84>)
 80094f0:	f000 fd36 	bl	8009f60 <__assert_func>
 80094f4:	0021      	movs	r1, r4
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	310c      	adds	r1, #12
 80094fa:	1c9a      	adds	r2, r3, #2
 80094fc:	0092      	lsls	r2, r2, #2
 80094fe:	300c      	adds	r0, #12
 8009500:	f7ff ff5d 	bl	80093be <memcpy>
 8009504:	0021      	movs	r1, r4
 8009506:	9801      	ldr	r0, [sp, #4]
 8009508:	f7ff ffa6 	bl	8009458 <_Bfree>
 800950c:	0034      	movs	r4, r6
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	18e3      	adds	r3, r4, r3
 8009514:	605d      	str	r5, [r3, #4]
 8009516:	1c7b      	adds	r3, r7, #1
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	0020      	movs	r0, r4
 800951c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	0800b187 	.word	0x0800b187
 8009524:	0800b198 	.word	0x0800b198

08009528 <__hi0bits>:
 8009528:	0003      	movs	r3, r0
 800952a:	0c02      	lsrs	r2, r0, #16
 800952c:	2000      	movs	r0, #0
 800952e:	4282      	cmp	r2, r0
 8009530:	d101      	bne.n	8009536 <__hi0bits+0xe>
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	3010      	adds	r0, #16
 8009536:	0e1a      	lsrs	r2, r3, #24
 8009538:	d101      	bne.n	800953e <__hi0bits+0x16>
 800953a:	3008      	adds	r0, #8
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	0f1a      	lsrs	r2, r3, #28
 8009540:	d101      	bne.n	8009546 <__hi0bits+0x1e>
 8009542:	3004      	adds	r0, #4
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	0f9a      	lsrs	r2, r3, #30
 8009548:	d101      	bne.n	800954e <__hi0bits+0x26>
 800954a:	3002      	adds	r0, #2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	2b00      	cmp	r3, #0
 8009550:	db03      	blt.n	800955a <__hi0bits+0x32>
 8009552:	3001      	adds	r0, #1
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	d400      	bmi.n	800955a <__hi0bits+0x32>
 8009558:	2020      	movs	r0, #32
 800955a:	4770      	bx	lr

0800955c <__lo0bits>:
 800955c:	6803      	ldr	r3, [r0, #0]
 800955e:	0002      	movs	r2, r0
 8009560:	2107      	movs	r1, #7
 8009562:	0018      	movs	r0, r3
 8009564:	4008      	ands	r0, r1
 8009566:	420b      	tst	r3, r1
 8009568:	d00d      	beq.n	8009586 <__lo0bits+0x2a>
 800956a:	3906      	subs	r1, #6
 800956c:	2000      	movs	r0, #0
 800956e:	420b      	tst	r3, r1
 8009570:	d105      	bne.n	800957e <__lo0bits+0x22>
 8009572:	3002      	adds	r0, #2
 8009574:	4203      	tst	r3, r0
 8009576:	d003      	beq.n	8009580 <__lo0bits+0x24>
 8009578:	40cb      	lsrs	r3, r1
 800957a:	0008      	movs	r0, r1
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	4770      	bx	lr
 8009580:	089b      	lsrs	r3, r3, #2
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	e7fb      	b.n	800957e <__lo0bits+0x22>
 8009586:	b299      	uxth	r1, r3
 8009588:	2900      	cmp	r1, #0
 800958a:	d101      	bne.n	8009590 <__lo0bits+0x34>
 800958c:	2010      	movs	r0, #16
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	b2d9      	uxtb	r1, r3
 8009592:	2900      	cmp	r1, #0
 8009594:	d101      	bne.n	800959a <__lo0bits+0x3e>
 8009596:	3008      	adds	r0, #8
 8009598:	0a1b      	lsrs	r3, r3, #8
 800959a:	0719      	lsls	r1, r3, #28
 800959c:	d101      	bne.n	80095a2 <__lo0bits+0x46>
 800959e:	3004      	adds	r0, #4
 80095a0:	091b      	lsrs	r3, r3, #4
 80095a2:	0799      	lsls	r1, r3, #30
 80095a4:	d101      	bne.n	80095aa <__lo0bits+0x4e>
 80095a6:	3002      	adds	r0, #2
 80095a8:	089b      	lsrs	r3, r3, #2
 80095aa:	07d9      	lsls	r1, r3, #31
 80095ac:	d4e9      	bmi.n	8009582 <__lo0bits+0x26>
 80095ae:	3001      	adds	r0, #1
 80095b0:	085b      	lsrs	r3, r3, #1
 80095b2:	d1e6      	bne.n	8009582 <__lo0bits+0x26>
 80095b4:	2020      	movs	r0, #32
 80095b6:	e7e2      	b.n	800957e <__lo0bits+0x22>

080095b8 <__i2b>:
 80095b8:	b510      	push	{r4, lr}
 80095ba:	000c      	movs	r4, r1
 80095bc:	2101      	movs	r1, #1
 80095be:	f7ff ff07 	bl	80093d0 <_Balloc>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d106      	bne.n	80095d4 <__i2b+0x1c>
 80095c6:	21a0      	movs	r1, #160	; 0xa0
 80095c8:	0002      	movs	r2, r0
 80095ca:	4b04      	ldr	r3, [pc, #16]	; (80095dc <__i2b+0x24>)
 80095cc:	4804      	ldr	r0, [pc, #16]	; (80095e0 <__i2b+0x28>)
 80095ce:	0049      	lsls	r1, r1, #1
 80095d0:	f000 fcc6 	bl	8009f60 <__assert_func>
 80095d4:	2301      	movs	r3, #1
 80095d6:	6144      	str	r4, [r0, #20]
 80095d8:	6103      	str	r3, [r0, #16]
 80095da:	bd10      	pop	{r4, pc}
 80095dc:	0800b187 	.word	0x0800b187
 80095e0:	0800b198 	.word	0x0800b198

080095e4 <__multiply>:
 80095e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e6:	690b      	ldr	r3, [r1, #16]
 80095e8:	0014      	movs	r4, r2
 80095ea:	6912      	ldr	r2, [r2, #16]
 80095ec:	000d      	movs	r5, r1
 80095ee:	b089      	sub	sp, #36	; 0x24
 80095f0:	4293      	cmp	r3, r2
 80095f2:	da01      	bge.n	80095f8 <__multiply+0x14>
 80095f4:	0025      	movs	r5, r4
 80095f6:	000c      	movs	r4, r1
 80095f8:	692f      	ldr	r7, [r5, #16]
 80095fa:	6926      	ldr	r6, [r4, #16]
 80095fc:	6869      	ldr	r1, [r5, #4]
 80095fe:	19bb      	adds	r3, r7, r6
 8009600:	9302      	str	r3, [sp, #8]
 8009602:	68ab      	ldr	r3, [r5, #8]
 8009604:	19ba      	adds	r2, r7, r6
 8009606:	4293      	cmp	r3, r2
 8009608:	da00      	bge.n	800960c <__multiply+0x28>
 800960a:	3101      	adds	r1, #1
 800960c:	f7ff fee0 	bl	80093d0 <_Balloc>
 8009610:	9001      	str	r0, [sp, #4]
 8009612:	2800      	cmp	r0, #0
 8009614:	d106      	bne.n	8009624 <__multiply+0x40>
 8009616:	215e      	movs	r1, #94	; 0x5e
 8009618:	0002      	movs	r2, r0
 800961a:	4b48      	ldr	r3, [pc, #288]	; (800973c <__multiply+0x158>)
 800961c:	4848      	ldr	r0, [pc, #288]	; (8009740 <__multiply+0x15c>)
 800961e:	31ff      	adds	r1, #255	; 0xff
 8009620:	f000 fc9e 	bl	8009f60 <__assert_func>
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	3314      	adds	r3, #20
 800962a:	469c      	mov	ip, r3
 800962c:	19bb      	adds	r3, r7, r6
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4463      	add	r3, ip
 8009632:	9303      	str	r3, [sp, #12]
 8009634:	4663      	mov	r3, ip
 8009636:	9903      	ldr	r1, [sp, #12]
 8009638:	428b      	cmp	r3, r1
 800963a:	d32c      	bcc.n	8009696 <__multiply+0xb2>
 800963c:	002b      	movs	r3, r5
 800963e:	0022      	movs	r2, r4
 8009640:	3314      	adds	r3, #20
 8009642:	00bf      	lsls	r7, r7, #2
 8009644:	3214      	adds	r2, #20
 8009646:	9306      	str	r3, [sp, #24]
 8009648:	00b6      	lsls	r6, r6, #2
 800964a:	19db      	adds	r3, r3, r7
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	1993      	adds	r3, r2, r6
 8009650:	9307      	str	r3, [sp, #28]
 8009652:	2304      	movs	r3, #4
 8009654:	9305      	str	r3, [sp, #20]
 8009656:	002b      	movs	r3, r5
 8009658:	9904      	ldr	r1, [sp, #16]
 800965a:	3315      	adds	r3, #21
 800965c:	9200      	str	r2, [sp, #0]
 800965e:	4299      	cmp	r1, r3
 8009660:	d305      	bcc.n	800966e <__multiply+0x8a>
 8009662:	1b4b      	subs	r3, r1, r5
 8009664:	3b15      	subs	r3, #21
 8009666:	089b      	lsrs	r3, r3, #2
 8009668:	3301      	adds	r3, #1
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	9305      	str	r3, [sp, #20]
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	9a00      	ldr	r2, [sp, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d311      	bcc.n	800969a <__multiply+0xb6>
 8009676:	9b02      	ldr	r3, [sp, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dd06      	ble.n	800968a <__multiply+0xa6>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	3b04      	subs	r3, #4
 8009680:	9303      	str	r3, [sp, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d054      	beq.n	8009734 <__multiply+0x150>
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	9a02      	ldr	r2, [sp, #8]
 800968e:	0018      	movs	r0, r3
 8009690:	611a      	str	r2, [r3, #16]
 8009692:	b009      	add	sp, #36	; 0x24
 8009694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009696:	c304      	stmia	r3!, {r2}
 8009698:	e7cd      	b.n	8009636 <__multiply+0x52>
 800969a:	9b00      	ldr	r3, [sp, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	b298      	uxth	r0, r3
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d01c      	beq.n	80096de <__multiply+0xfa>
 80096a4:	4667      	mov	r7, ip
 80096a6:	2400      	movs	r4, #0
 80096a8:	9e06      	ldr	r6, [sp, #24]
 80096aa:	ce02      	ldmia	r6!, {r1}
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	b28b      	uxth	r3, r1
 80096b0:	4343      	muls	r3, r0
 80096b2:	0c09      	lsrs	r1, r1, #16
 80096b4:	4341      	muls	r1, r0
 80096b6:	b292      	uxth	r2, r2
 80096b8:	189b      	adds	r3, r3, r2
 80096ba:	191b      	adds	r3, r3, r4
 80096bc:	000c      	movs	r4, r1
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	0c11      	lsrs	r1, r2, #16
 80096c2:	1861      	adds	r1, r4, r1
 80096c4:	0c1c      	lsrs	r4, r3, #16
 80096c6:	1909      	adds	r1, r1, r4
 80096c8:	0c0c      	lsrs	r4, r1, #16
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	0409      	lsls	r1, r1, #16
 80096ce:	430b      	orrs	r3, r1
 80096d0:	c708      	stmia	r7!, {r3}
 80096d2:	9b04      	ldr	r3, [sp, #16]
 80096d4:	42b3      	cmp	r3, r6
 80096d6:	d8e8      	bhi.n	80096aa <__multiply+0xc6>
 80096d8:	4663      	mov	r3, ip
 80096da:	9a05      	ldr	r2, [sp, #20]
 80096dc:	509c      	str	r4, [r3, r2]
 80096de:	9b00      	ldr	r3, [sp, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	0c1e      	lsrs	r6, r3, #16
 80096e4:	d020      	beq.n	8009728 <__multiply+0x144>
 80096e6:	4663      	mov	r3, ip
 80096e8:	002c      	movs	r4, r5
 80096ea:	4660      	mov	r0, ip
 80096ec:	2700      	movs	r7, #0
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3414      	adds	r4, #20
 80096f2:	6822      	ldr	r2, [r4, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	b291      	uxth	r1, r2
 80096f8:	4371      	muls	r1, r6
 80096fa:	6802      	ldr	r2, [r0, #0]
 80096fc:	0c12      	lsrs	r2, r2, #16
 80096fe:	1889      	adds	r1, r1, r2
 8009700:	19cf      	adds	r7, r1, r7
 8009702:	0439      	lsls	r1, r7, #16
 8009704:	430b      	orrs	r3, r1
 8009706:	6003      	str	r3, [r0, #0]
 8009708:	cc02      	ldmia	r4!, {r1}
 800970a:	6843      	ldr	r3, [r0, #4]
 800970c:	0c09      	lsrs	r1, r1, #16
 800970e:	4371      	muls	r1, r6
 8009710:	b29b      	uxth	r3, r3
 8009712:	0c3f      	lsrs	r7, r7, #16
 8009714:	18cb      	adds	r3, r1, r3
 8009716:	9a04      	ldr	r2, [sp, #16]
 8009718:	19db      	adds	r3, r3, r7
 800971a:	0c1f      	lsrs	r7, r3, #16
 800971c:	3004      	adds	r0, #4
 800971e:	42a2      	cmp	r2, r4
 8009720:	d8e7      	bhi.n	80096f2 <__multiply+0x10e>
 8009722:	4662      	mov	r2, ip
 8009724:	9905      	ldr	r1, [sp, #20]
 8009726:	5053      	str	r3, [r2, r1]
 8009728:	9b00      	ldr	r3, [sp, #0]
 800972a:	3304      	adds	r3, #4
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	2304      	movs	r3, #4
 8009730:	449c      	add	ip, r3
 8009732:	e79c      	b.n	800966e <__multiply+0x8a>
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	3b01      	subs	r3, #1
 8009738:	9302      	str	r3, [sp, #8]
 800973a:	e79c      	b.n	8009676 <__multiply+0x92>
 800973c:	0800b187 	.word	0x0800b187
 8009740:	0800b198 	.word	0x0800b198

08009744 <__pow5mult>:
 8009744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009746:	2303      	movs	r3, #3
 8009748:	0015      	movs	r5, r2
 800974a:	0007      	movs	r7, r0
 800974c:	000e      	movs	r6, r1
 800974e:	401a      	ands	r2, r3
 8009750:	421d      	tst	r5, r3
 8009752:	d008      	beq.n	8009766 <__pow5mult+0x22>
 8009754:	4925      	ldr	r1, [pc, #148]	; (80097ec <__pow5mult+0xa8>)
 8009756:	3a01      	subs	r2, #1
 8009758:	0092      	lsls	r2, r2, #2
 800975a:	5852      	ldr	r2, [r2, r1]
 800975c:	2300      	movs	r3, #0
 800975e:	0031      	movs	r1, r6
 8009760:	f7ff fe9e 	bl	80094a0 <__multadd>
 8009764:	0006      	movs	r6, r0
 8009766:	10ad      	asrs	r5, r5, #2
 8009768:	d03d      	beq.n	80097e6 <__pow5mult+0xa2>
 800976a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800976c:	2c00      	cmp	r4, #0
 800976e:	d10f      	bne.n	8009790 <__pow5mult+0x4c>
 8009770:	2010      	movs	r0, #16
 8009772:	f7ff fe0f 	bl	8009394 <malloc>
 8009776:	1e02      	subs	r2, r0, #0
 8009778:	6278      	str	r0, [r7, #36]	; 0x24
 800977a:	d105      	bne.n	8009788 <__pow5mult+0x44>
 800977c:	21d7      	movs	r1, #215	; 0xd7
 800977e:	4b1c      	ldr	r3, [pc, #112]	; (80097f0 <__pow5mult+0xac>)
 8009780:	481c      	ldr	r0, [pc, #112]	; (80097f4 <__pow5mult+0xb0>)
 8009782:	0049      	lsls	r1, r1, #1
 8009784:	f000 fbec 	bl	8009f60 <__assert_func>
 8009788:	6044      	str	r4, [r0, #4]
 800978a:	6084      	str	r4, [r0, #8]
 800978c:	6004      	str	r4, [r0, #0]
 800978e:	60c4      	str	r4, [r0, #12]
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	689c      	ldr	r4, [r3, #8]
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	2c00      	cmp	r4, #0
 8009798:	d108      	bne.n	80097ac <__pow5mult+0x68>
 800979a:	0038      	movs	r0, r7
 800979c:	4916      	ldr	r1, [pc, #88]	; (80097f8 <__pow5mult+0xb4>)
 800979e:	f7ff ff0b 	bl	80095b8 <__i2b>
 80097a2:	9b01      	ldr	r3, [sp, #4]
 80097a4:	0004      	movs	r4, r0
 80097a6:	6098      	str	r0, [r3, #8]
 80097a8:	2300      	movs	r3, #0
 80097aa:	6003      	str	r3, [r0, #0]
 80097ac:	2301      	movs	r3, #1
 80097ae:	421d      	tst	r5, r3
 80097b0:	d00a      	beq.n	80097c8 <__pow5mult+0x84>
 80097b2:	0031      	movs	r1, r6
 80097b4:	0022      	movs	r2, r4
 80097b6:	0038      	movs	r0, r7
 80097b8:	f7ff ff14 	bl	80095e4 <__multiply>
 80097bc:	0031      	movs	r1, r6
 80097be:	9001      	str	r0, [sp, #4]
 80097c0:	0038      	movs	r0, r7
 80097c2:	f7ff fe49 	bl	8009458 <_Bfree>
 80097c6:	9e01      	ldr	r6, [sp, #4]
 80097c8:	106d      	asrs	r5, r5, #1
 80097ca:	d00c      	beq.n	80097e6 <__pow5mult+0xa2>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d107      	bne.n	80097e2 <__pow5mult+0x9e>
 80097d2:	0022      	movs	r2, r4
 80097d4:	0021      	movs	r1, r4
 80097d6:	0038      	movs	r0, r7
 80097d8:	f7ff ff04 	bl	80095e4 <__multiply>
 80097dc:	2300      	movs	r3, #0
 80097de:	6020      	str	r0, [r4, #0]
 80097e0:	6003      	str	r3, [r0, #0]
 80097e2:	0004      	movs	r4, r0
 80097e4:	e7e2      	b.n	80097ac <__pow5mult+0x68>
 80097e6:	0030      	movs	r0, r6
 80097e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097ea:	46c0      	nop			; (mov r8, r8)
 80097ec:	0800b2e8 	.word	0x0800b2e8
 80097f0:	0800b111 	.word	0x0800b111
 80097f4:	0800b198 	.word	0x0800b198
 80097f8:	00000271 	.word	0x00000271

080097fc <__lshift>:
 80097fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fe:	000c      	movs	r4, r1
 8009800:	0017      	movs	r7, r2
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	1155      	asrs	r5, r2, #5
 8009806:	b087      	sub	sp, #28
 8009808:	18eb      	adds	r3, r5, r3
 800980a:	9302      	str	r3, [sp, #8]
 800980c:	3301      	adds	r3, #1
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	6849      	ldr	r1, [r1, #4]
 8009812:	68a3      	ldr	r3, [r4, #8]
 8009814:	9004      	str	r0, [sp, #16]
 8009816:	9a01      	ldr	r2, [sp, #4]
 8009818:	4293      	cmp	r3, r2
 800981a:	db11      	blt.n	8009840 <__lshift+0x44>
 800981c:	9804      	ldr	r0, [sp, #16]
 800981e:	f7ff fdd7 	bl	80093d0 <_Balloc>
 8009822:	0002      	movs	r2, r0
 8009824:	2300      	movs	r3, #0
 8009826:	3214      	adds	r2, #20
 8009828:	0006      	movs	r6, r0
 800982a:	0011      	movs	r1, r2
 800982c:	9203      	str	r2, [sp, #12]
 800982e:	4298      	cmp	r0, r3
 8009830:	d10d      	bne.n	800984e <__lshift+0x52>
 8009832:	21da      	movs	r1, #218	; 0xda
 8009834:	0002      	movs	r2, r0
 8009836:	4b27      	ldr	r3, [pc, #156]	; (80098d4 <__lshift+0xd8>)
 8009838:	4827      	ldr	r0, [pc, #156]	; (80098d8 <__lshift+0xdc>)
 800983a:	31ff      	adds	r1, #255	; 0xff
 800983c:	f000 fb90 	bl	8009f60 <__assert_func>
 8009840:	3101      	adds	r1, #1
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	e7e7      	b.n	8009816 <__lshift+0x1a>
 8009846:	2200      	movs	r2, #0
 8009848:	0098      	lsls	r0, r3, #2
 800984a:	500a      	str	r2, [r1, r0]
 800984c:	3301      	adds	r3, #1
 800984e:	42ab      	cmp	r3, r5
 8009850:	dbf9      	blt.n	8009846 <__lshift+0x4a>
 8009852:	43eb      	mvns	r3, r5
 8009854:	17db      	asrs	r3, r3, #31
 8009856:	401d      	ands	r5, r3
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	00ad      	lsls	r5, r5, #2
 800985c:	211f      	movs	r1, #31
 800985e:	0038      	movs	r0, r7
 8009860:	195d      	adds	r5, r3, r5
 8009862:	0023      	movs	r3, r4
 8009864:	6922      	ldr	r2, [r4, #16]
 8009866:	3314      	adds	r3, #20
 8009868:	0092      	lsls	r2, r2, #2
 800986a:	4008      	ands	r0, r1
 800986c:	4684      	mov	ip, r0
 800986e:	189a      	adds	r2, r3, r2
 8009870:	420f      	tst	r7, r1
 8009872:	d02a      	beq.n	80098ca <__lshift+0xce>
 8009874:	3101      	adds	r1, #1
 8009876:	1a09      	subs	r1, r1, r0
 8009878:	9105      	str	r1, [sp, #20]
 800987a:	2100      	movs	r1, #0
 800987c:	9503      	str	r5, [sp, #12]
 800987e:	4667      	mov	r7, ip
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	40b8      	lsls	r0, r7
 8009884:	4301      	orrs	r1, r0
 8009886:	9803      	ldr	r0, [sp, #12]
 8009888:	c002      	stmia	r0!, {r1}
 800988a:	cb02      	ldmia	r3!, {r1}
 800988c:	9003      	str	r0, [sp, #12]
 800988e:	9805      	ldr	r0, [sp, #20]
 8009890:	40c1      	lsrs	r1, r0
 8009892:	429a      	cmp	r2, r3
 8009894:	d8f3      	bhi.n	800987e <__lshift+0x82>
 8009896:	0020      	movs	r0, r4
 8009898:	3015      	adds	r0, #21
 800989a:	2304      	movs	r3, #4
 800989c:	4282      	cmp	r2, r0
 800989e:	d304      	bcc.n	80098aa <__lshift+0xae>
 80098a0:	1b13      	subs	r3, r2, r4
 80098a2:	3b15      	subs	r3, #21
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	3301      	adds	r3, #1
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	50e9      	str	r1, [r5, r3]
 80098ac:	2900      	cmp	r1, #0
 80098ae:	d002      	beq.n	80098b6 <__lshift+0xba>
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	3302      	adds	r3, #2
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	9b01      	ldr	r3, [sp, #4]
 80098b8:	9804      	ldr	r0, [sp, #16]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	0021      	movs	r1, r4
 80098be:	6133      	str	r3, [r6, #16]
 80098c0:	f7ff fdca 	bl	8009458 <_Bfree>
 80098c4:	0030      	movs	r0, r6
 80098c6:	b007      	add	sp, #28
 80098c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ca:	cb02      	ldmia	r3!, {r1}
 80098cc:	c502      	stmia	r5!, {r1}
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d8fb      	bhi.n	80098ca <__lshift+0xce>
 80098d2:	e7f0      	b.n	80098b6 <__lshift+0xba>
 80098d4:	0800b187 	.word	0x0800b187
 80098d8:	0800b198 	.word	0x0800b198

080098dc <__mcmp>:
 80098dc:	6902      	ldr	r2, [r0, #16]
 80098de:	690b      	ldr	r3, [r1, #16]
 80098e0:	b530      	push	{r4, r5, lr}
 80098e2:	0004      	movs	r4, r0
 80098e4:	1ad0      	subs	r0, r2, r3
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d10d      	bne.n	8009906 <__mcmp+0x2a>
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	3414      	adds	r4, #20
 80098ee:	3114      	adds	r1, #20
 80098f0:	18e2      	adds	r2, r4, r3
 80098f2:	18c9      	adds	r1, r1, r3
 80098f4:	3a04      	subs	r2, #4
 80098f6:	3904      	subs	r1, #4
 80098f8:	6815      	ldr	r5, [r2, #0]
 80098fa:	680b      	ldr	r3, [r1, #0]
 80098fc:	429d      	cmp	r5, r3
 80098fe:	d003      	beq.n	8009908 <__mcmp+0x2c>
 8009900:	2001      	movs	r0, #1
 8009902:	429d      	cmp	r5, r3
 8009904:	d303      	bcc.n	800990e <__mcmp+0x32>
 8009906:	bd30      	pop	{r4, r5, pc}
 8009908:	4294      	cmp	r4, r2
 800990a:	d3f3      	bcc.n	80098f4 <__mcmp+0x18>
 800990c:	e7fb      	b.n	8009906 <__mcmp+0x2a>
 800990e:	4240      	negs	r0, r0
 8009910:	e7f9      	b.n	8009906 <__mcmp+0x2a>
	...

08009914 <__mdiff>:
 8009914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009916:	000e      	movs	r6, r1
 8009918:	0007      	movs	r7, r0
 800991a:	0011      	movs	r1, r2
 800991c:	0030      	movs	r0, r6
 800991e:	b087      	sub	sp, #28
 8009920:	0014      	movs	r4, r2
 8009922:	f7ff ffdb 	bl	80098dc <__mcmp>
 8009926:	1e05      	subs	r5, r0, #0
 8009928:	d110      	bne.n	800994c <__mdiff+0x38>
 800992a:	0001      	movs	r1, r0
 800992c:	0038      	movs	r0, r7
 800992e:	f7ff fd4f 	bl	80093d0 <_Balloc>
 8009932:	1e02      	subs	r2, r0, #0
 8009934:	d104      	bne.n	8009940 <__mdiff+0x2c>
 8009936:	4b40      	ldr	r3, [pc, #256]	; (8009a38 <__mdiff+0x124>)
 8009938:	4940      	ldr	r1, [pc, #256]	; (8009a3c <__mdiff+0x128>)
 800993a:	4841      	ldr	r0, [pc, #260]	; (8009a40 <__mdiff+0x12c>)
 800993c:	f000 fb10 	bl	8009f60 <__assert_func>
 8009940:	2301      	movs	r3, #1
 8009942:	6145      	str	r5, [r0, #20]
 8009944:	6103      	str	r3, [r0, #16]
 8009946:	0010      	movs	r0, r2
 8009948:	b007      	add	sp, #28
 800994a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994c:	2301      	movs	r3, #1
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	2800      	cmp	r0, #0
 8009952:	db04      	blt.n	800995e <__mdiff+0x4a>
 8009954:	0023      	movs	r3, r4
 8009956:	0034      	movs	r4, r6
 8009958:	001e      	movs	r6, r3
 800995a:	2300      	movs	r3, #0
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	0038      	movs	r0, r7
 8009960:	6861      	ldr	r1, [r4, #4]
 8009962:	f7ff fd35 	bl	80093d0 <_Balloc>
 8009966:	1e02      	subs	r2, r0, #0
 8009968:	d103      	bne.n	8009972 <__mdiff+0x5e>
 800996a:	2190      	movs	r1, #144	; 0x90
 800996c:	4b32      	ldr	r3, [pc, #200]	; (8009a38 <__mdiff+0x124>)
 800996e:	0089      	lsls	r1, r1, #2
 8009970:	e7e3      	b.n	800993a <__mdiff+0x26>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	2700      	movs	r7, #0
 8009976:	60c3      	str	r3, [r0, #12]
 8009978:	6920      	ldr	r0, [r4, #16]
 800997a:	3414      	adds	r4, #20
 800997c:	9401      	str	r4, [sp, #4]
 800997e:	9b01      	ldr	r3, [sp, #4]
 8009980:	0084      	lsls	r4, r0, #2
 8009982:	191b      	adds	r3, r3, r4
 8009984:	0034      	movs	r4, r6
 8009986:	9302      	str	r3, [sp, #8]
 8009988:	6933      	ldr	r3, [r6, #16]
 800998a:	3414      	adds	r4, #20
 800998c:	0099      	lsls	r1, r3, #2
 800998e:	1863      	adds	r3, r4, r1
 8009990:	9303      	str	r3, [sp, #12]
 8009992:	0013      	movs	r3, r2
 8009994:	3314      	adds	r3, #20
 8009996:	469c      	mov	ip, r3
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	9b04      	ldr	r3, [sp, #16]
 80099a0:	cc02      	ldmia	r4!, {r1}
 80099a2:	cb20      	ldmia	r3!, {r5}
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	b2ab      	uxth	r3, r5
 80099a8:	19df      	adds	r7, r3, r7
 80099aa:	b28b      	uxth	r3, r1
 80099ac:	1afb      	subs	r3, r7, r3
 80099ae:	0c2d      	lsrs	r5, r5, #16
 80099b0:	0c09      	lsrs	r1, r1, #16
 80099b2:	1a69      	subs	r1, r5, r1
 80099b4:	141d      	asrs	r5, r3, #16
 80099b6:	1949      	adds	r1, r1, r5
 80099b8:	140f      	asrs	r7, r1, #16
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	0409      	lsls	r1, r1, #16
 80099be:	430b      	orrs	r3, r1
 80099c0:	4661      	mov	r1, ip
 80099c2:	c108      	stmia	r1!, {r3}
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	468c      	mov	ip, r1
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	d8e8      	bhi.n	800999e <__mdiff+0x8a>
 80099cc:	0031      	movs	r1, r6
 80099ce:	9c03      	ldr	r4, [sp, #12]
 80099d0:	3115      	adds	r1, #21
 80099d2:	2304      	movs	r3, #4
 80099d4:	428c      	cmp	r4, r1
 80099d6:	d304      	bcc.n	80099e2 <__mdiff+0xce>
 80099d8:	1ba3      	subs	r3, r4, r6
 80099da:	3b15      	subs	r3, #21
 80099dc:	089b      	lsrs	r3, r3, #2
 80099de:	3301      	adds	r3, #1
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	9901      	ldr	r1, [sp, #4]
 80099e4:	18cc      	adds	r4, r1, r3
 80099e6:	9905      	ldr	r1, [sp, #20]
 80099e8:	0026      	movs	r6, r4
 80099ea:	18cb      	adds	r3, r1, r3
 80099ec:	469c      	mov	ip, r3
 80099ee:	9902      	ldr	r1, [sp, #8]
 80099f0:	428e      	cmp	r6, r1
 80099f2:	d310      	bcc.n	8009a16 <__mdiff+0x102>
 80099f4:	9e02      	ldr	r6, [sp, #8]
 80099f6:	1ee5      	subs	r5, r4, #3
 80099f8:	2100      	movs	r1, #0
 80099fa:	42ae      	cmp	r6, r5
 80099fc:	d304      	bcc.n	8009a08 <__mdiff+0xf4>
 80099fe:	0031      	movs	r1, r6
 8009a00:	3103      	adds	r1, #3
 8009a02:	1b09      	subs	r1, r1, r4
 8009a04:	0889      	lsrs	r1, r1, #2
 8009a06:	0089      	lsls	r1, r1, #2
 8009a08:	185b      	adds	r3, r3, r1
 8009a0a:	3b04      	subs	r3, #4
 8009a0c:	6819      	ldr	r1, [r3, #0]
 8009a0e:	2900      	cmp	r1, #0
 8009a10:	d00f      	beq.n	8009a32 <__mdiff+0x11e>
 8009a12:	6110      	str	r0, [r2, #16]
 8009a14:	e797      	b.n	8009946 <__mdiff+0x32>
 8009a16:	ce02      	ldmia	r6!, {r1}
 8009a18:	b28d      	uxth	r5, r1
 8009a1a:	19ed      	adds	r5, r5, r7
 8009a1c:	0c0f      	lsrs	r7, r1, #16
 8009a1e:	1429      	asrs	r1, r5, #16
 8009a20:	1879      	adds	r1, r7, r1
 8009a22:	140f      	asrs	r7, r1, #16
 8009a24:	b2ad      	uxth	r5, r5
 8009a26:	0409      	lsls	r1, r1, #16
 8009a28:	430d      	orrs	r5, r1
 8009a2a:	4661      	mov	r1, ip
 8009a2c:	c120      	stmia	r1!, {r5}
 8009a2e:	468c      	mov	ip, r1
 8009a30:	e7dd      	b.n	80099ee <__mdiff+0xda>
 8009a32:	3801      	subs	r0, #1
 8009a34:	e7e9      	b.n	8009a0a <__mdiff+0xf6>
 8009a36:	46c0      	nop			; (mov r8, r8)
 8009a38:	0800b187 	.word	0x0800b187
 8009a3c:	00000232 	.word	0x00000232
 8009a40:	0800b198 	.word	0x0800b198

08009a44 <__d2b>:
 8009a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a46:	2101      	movs	r1, #1
 8009a48:	0014      	movs	r4, r2
 8009a4a:	001e      	movs	r6, r3
 8009a4c:	9f08      	ldr	r7, [sp, #32]
 8009a4e:	f7ff fcbf 	bl	80093d0 <_Balloc>
 8009a52:	1e05      	subs	r5, r0, #0
 8009a54:	d105      	bne.n	8009a62 <__d2b+0x1e>
 8009a56:	0002      	movs	r2, r0
 8009a58:	4b26      	ldr	r3, [pc, #152]	; (8009af4 <__d2b+0xb0>)
 8009a5a:	4927      	ldr	r1, [pc, #156]	; (8009af8 <__d2b+0xb4>)
 8009a5c:	4827      	ldr	r0, [pc, #156]	; (8009afc <__d2b+0xb8>)
 8009a5e:	f000 fa7f 	bl	8009f60 <__assert_func>
 8009a62:	0333      	lsls	r3, r6, #12
 8009a64:	0076      	lsls	r6, r6, #1
 8009a66:	0b1b      	lsrs	r3, r3, #12
 8009a68:	0d76      	lsrs	r6, r6, #21
 8009a6a:	d124      	bne.n	8009ab6 <__d2b+0x72>
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	d027      	beq.n	8009ac2 <__d2b+0x7e>
 8009a72:	4668      	mov	r0, sp
 8009a74:	9400      	str	r4, [sp, #0]
 8009a76:	f7ff fd71 	bl	800955c <__lo0bits>
 8009a7a:	9c00      	ldr	r4, [sp, #0]
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d01e      	beq.n	8009abe <__d2b+0x7a>
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	2120      	movs	r1, #32
 8009a84:	001a      	movs	r2, r3
 8009a86:	1a09      	subs	r1, r1, r0
 8009a88:	408a      	lsls	r2, r1
 8009a8a:	40c3      	lsrs	r3, r0
 8009a8c:	4322      	orrs	r2, r4
 8009a8e:	616a      	str	r2, [r5, #20]
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	9c01      	ldr	r4, [sp, #4]
 8009a94:	61ac      	str	r4, [r5, #24]
 8009a96:	1e63      	subs	r3, r4, #1
 8009a98:	419c      	sbcs	r4, r3
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	612c      	str	r4, [r5, #16]
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	d018      	beq.n	8009ad4 <__d2b+0x90>
 8009aa2:	4b17      	ldr	r3, [pc, #92]	; (8009b00 <__d2b+0xbc>)
 8009aa4:	18f6      	adds	r6, r6, r3
 8009aa6:	2335      	movs	r3, #53	; 0x35
 8009aa8:	1836      	adds	r6, r6, r0
 8009aaa:	1a18      	subs	r0, r3, r0
 8009aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aae:	603e      	str	r6, [r7, #0]
 8009ab0:	6018      	str	r0, [r3, #0]
 8009ab2:	0028      	movs	r0, r5
 8009ab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ab6:	2280      	movs	r2, #128	; 0x80
 8009ab8:	0352      	lsls	r2, r2, #13
 8009aba:	4313      	orrs	r3, r2
 8009abc:	e7d6      	b.n	8009a6c <__d2b+0x28>
 8009abe:	616c      	str	r4, [r5, #20]
 8009ac0:	e7e7      	b.n	8009a92 <__d2b+0x4e>
 8009ac2:	a801      	add	r0, sp, #4
 8009ac4:	f7ff fd4a 	bl	800955c <__lo0bits>
 8009ac8:	2401      	movs	r4, #1
 8009aca:	9b01      	ldr	r3, [sp, #4]
 8009acc:	612c      	str	r4, [r5, #16]
 8009ace:	616b      	str	r3, [r5, #20]
 8009ad0:	3020      	adds	r0, #32
 8009ad2:	e7e4      	b.n	8009a9e <__d2b+0x5a>
 8009ad4:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <__d2b+0xc0>)
 8009ad6:	18c0      	adds	r0, r0, r3
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <__d2b+0xc4>)
 8009ada:	6038      	str	r0, [r7, #0]
 8009adc:	18e3      	adds	r3, r4, r3
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	18eb      	adds	r3, r5, r3
 8009ae2:	6958      	ldr	r0, [r3, #20]
 8009ae4:	f7ff fd20 	bl	8009528 <__hi0bits>
 8009ae8:	0164      	lsls	r4, r4, #5
 8009aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aec:	1a24      	subs	r4, r4, r0
 8009aee:	601c      	str	r4, [r3, #0]
 8009af0:	e7df      	b.n	8009ab2 <__d2b+0x6e>
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	0800b187 	.word	0x0800b187
 8009af8:	0000030a 	.word	0x0000030a
 8009afc:	0800b198 	.word	0x0800b198
 8009b00:	fffffbcd 	.word	0xfffffbcd
 8009b04:	fffffbce 	.word	0xfffffbce
 8009b08:	3fffffff 	.word	0x3fffffff

08009b0c <_calloc_r>:
 8009b0c:	434a      	muls	r2, r1
 8009b0e:	b570      	push	{r4, r5, r6, lr}
 8009b10:	0011      	movs	r1, r2
 8009b12:	0015      	movs	r5, r2
 8009b14:	f000 f852 	bl	8009bbc <_malloc_r>
 8009b18:	1e04      	subs	r4, r0, #0
 8009b1a:	d003      	beq.n	8009b24 <_calloc_r+0x18>
 8009b1c:	002a      	movs	r2, r5
 8009b1e:	2100      	movs	r1, #0
 8009b20:	f7fe f8d4 	bl	8007ccc <memset>
 8009b24:	0020      	movs	r0, r4
 8009b26:	bd70      	pop	{r4, r5, r6, pc}

08009b28 <_free_r>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	0005      	movs	r5, r0
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	d010      	beq.n	8009b52 <_free_r+0x2a>
 8009b30:	1f0c      	subs	r4, r1, #4
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da00      	bge.n	8009b3a <_free_r+0x12>
 8009b38:	18e4      	adds	r4, r4, r3
 8009b3a:	0028      	movs	r0, r5
 8009b3c:	f000 fa64 	bl	800a008 <__malloc_lock>
 8009b40:	4a1d      	ldr	r2, [pc, #116]	; (8009bb8 <_free_r+0x90>)
 8009b42:	6813      	ldr	r3, [r2, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d105      	bne.n	8009b54 <_free_r+0x2c>
 8009b48:	6063      	str	r3, [r4, #4]
 8009b4a:	6014      	str	r4, [r2, #0]
 8009b4c:	0028      	movs	r0, r5
 8009b4e:	f000 fa63 	bl	800a018 <__malloc_unlock>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	d908      	bls.n	8009b6a <_free_r+0x42>
 8009b58:	6821      	ldr	r1, [r4, #0]
 8009b5a:	1860      	adds	r0, r4, r1
 8009b5c:	4283      	cmp	r3, r0
 8009b5e:	d1f3      	bne.n	8009b48 <_free_r+0x20>
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	1841      	adds	r1, r0, r1
 8009b66:	6021      	str	r1, [r4, #0]
 8009b68:	e7ee      	b.n	8009b48 <_free_r+0x20>
 8009b6a:	001a      	movs	r2, r3
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <_free_r+0x4e>
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	d9f9      	bls.n	8009b6a <_free_r+0x42>
 8009b76:	6811      	ldr	r1, [r2, #0]
 8009b78:	1850      	adds	r0, r2, r1
 8009b7a:	42a0      	cmp	r0, r4
 8009b7c:	d10b      	bne.n	8009b96 <_free_r+0x6e>
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	1809      	adds	r1, r1, r0
 8009b82:	1850      	adds	r0, r2, r1
 8009b84:	6011      	str	r1, [r2, #0]
 8009b86:	4283      	cmp	r3, r0
 8009b88:	d1e0      	bne.n	8009b4c <_free_r+0x24>
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	1841      	adds	r1, r0, r1
 8009b90:	6011      	str	r1, [r2, #0]
 8009b92:	6053      	str	r3, [r2, #4]
 8009b94:	e7da      	b.n	8009b4c <_free_r+0x24>
 8009b96:	42a0      	cmp	r0, r4
 8009b98:	d902      	bls.n	8009ba0 <_free_r+0x78>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	e7d5      	b.n	8009b4c <_free_r+0x24>
 8009ba0:	6821      	ldr	r1, [r4, #0]
 8009ba2:	1860      	adds	r0, r4, r1
 8009ba4:	4283      	cmp	r3, r0
 8009ba6:	d103      	bne.n	8009bb0 <_free_r+0x88>
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	1841      	adds	r1, r0, r1
 8009bae:	6021      	str	r1, [r4, #0]
 8009bb0:	6063      	str	r3, [r4, #4]
 8009bb2:	6054      	str	r4, [r2, #4]
 8009bb4:	e7ca      	b.n	8009b4c <_free_r+0x24>
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	200005ec 	.word	0x200005ec

08009bbc <_malloc_r>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	1ccd      	adds	r5, r1, #3
 8009bc2:	439d      	bics	r5, r3
 8009bc4:	3508      	adds	r5, #8
 8009bc6:	0006      	movs	r6, r0
 8009bc8:	2d0c      	cmp	r5, #12
 8009bca:	d21f      	bcs.n	8009c0c <_malloc_r+0x50>
 8009bcc:	250c      	movs	r5, #12
 8009bce:	42a9      	cmp	r1, r5
 8009bd0:	d81e      	bhi.n	8009c10 <_malloc_r+0x54>
 8009bd2:	0030      	movs	r0, r6
 8009bd4:	f000 fa18 	bl	800a008 <__malloc_lock>
 8009bd8:	4925      	ldr	r1, [pc, #148]	; (8009c70 <_malloc_r+0xb4>)
 8009bda:	680a      	ldr	r2, [r1, #0]
 8009bdc:	0014      	movs	r4, r2
 8009bde:	2c00      	cmp	r4, #0
 8009be0:	d11a      	bne.n	8009c18 <_malloc_r+0x5c>
 8009be2:	4f24      	ldr	r7, [pc, #144]	; (8009c74 <_malloc_r+0xb8>)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d104      	bne.n	8009bf4 <_malloc_r+0x38>
 8009bea:	0021      	movs	r1, r4
 8009bec:	0030      	movs	r0, r6
 8009bee:	f000 f9a5 	bl	8009f3c <_sbrk_r>
 8009bf2:	6038      	str	r0, [r7, #0]
 8009bf4:	0029      	movs	r1, r5
 8009bf6:	0030      	movs	r0, r6
 8009bf8:	f000 f9a0 	bl	8009f3c <_sbrk_r>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d12b      	bne.n	8009c58 <_malloc_r+0x9c>
 8009c00:	230c      	movs	r3, #12
 8009c02:	0030      	movs	r0, r6
 8009c04:	6033      	str	r3, [r6, #0]
 8009c06:	f000 fa07 	bl	800a018 <__malloc_unlock>
 8009c0a:	e003      	b.n	8009c14 <_malloc_r+0x58>
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	dade      	bge.n	8009bce <_malloc_r+0x12>
 8009c10:	230c      	movs	r3, #12
 8009c12:	6033      	str	r3, [r6, #0]
 8009c14:	2000      	movs	r0, #0
 8009c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	1b5b      	subs	r3, r3, r5
 8009c1c:	d419      	bmi.n	8009c52 <_malloc_r+0x96>
 8009c1e:	2b0b      	cmp	r3, #11
 8009c20:	d903      	bls.n	8009c2a <_malloc_r+0x6e>
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	18e4      	adds	r4, r4, r3
 8009c26:	6025      	str	r5, [r4, #0]
 8009c28:	e003      	b.n	8009c32 <_malloc_r+0x76>
 8009c2a:	6863      	ldr	r3, [r4, #4]
 8009c2c:	42a2      	cmp	r2, r4
 8009c2e:	d10e      	bne.n	8009c4e <_malloc_r+0x92>
 8009c30:	600b      	str	r3, [r1, #0]
 8009c32:	0030      	movs	r0, r6
 8009c34:	f000 f9f0 	bl	800a018 <__malloc_unlock>
 8009c38:	0020      	movs	r0, r4
 8009c3a:	2207      	movs	r2, #7
 8009c3c:	300b      	adds	r0, #11
 8009c3e:	1d23      	adds	r3, r4, #4
 8009c40:	4390      	bics	r0, r2
 8009c42:	1ac2      	subs	r2, r0, r3
 8009c44:	4298      	cmp	r0, r3
 8009c46:	d0e6      	beq.n	8009c16 <_malloc_r+0x5a>
 8009c48:	1a1b      	subs	r3, r3, r0
 8009c4a:	50a3      	str	r3, [r4, r2]
 8009c4c:	e7e3      	b.n	8009c16 <_malloc_r+0x5a>
 8009c4e:	6053      	str	r3, [r2, #4]
 8009c50:	e7ef      	b.n	8009c32 <_malloc_r+0x76>
 8009c52:	0022      	movs	r2, r4
 8009c54:	6864      	ldr	r4, [r4, #4]
 8009c56:	e7c2      	b.n	8009bde <_malloc_r+0x22>
 8009c58:	2303      	movs	r3, #3
 8009c5a:	1cc4      	adds	r4, r0, #3
 8009c5c:	439c      	bics	r4, r3
 8009c5e:	42a0      	cmp	r0, r4
 8009c60:	d0e1      	beq.n	8009c26 <_malloc_r+0x6a>
 8009c62:	1a21      	subs	r1, r4, r0
 8009c64:	0030      	movs	r0, r6
 8009c66:	f000 f969 	bl	8009f3c <_sbrk_r>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	d1db      	bne.n	8009c26 <_malloc_r+0x6a>
 8009c6e:	e7c7      	b.n	8009c00 <_malloc_r+0x44>
 8009c70:	200005ec 	.word	0x200005ec
 8009c74:	200005f0 	.word	0x200005f0

08009c78 <__ssputs_r>:
 8009c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c7a:	688e      	ldr	r6, [r1, #8]
 8009c7c:	b085      	sub	sp, #20
 8009c7e:	0007      	movs	r7, r0
 8009c80:	000c      	movs	r4, r1
 8009c82:	9203      	str	r2, [sp, #12]
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	429e      	cmp	r6, r3
 8009c88:	d83c      	bhi.n	8009d04 <__ssputs_r+0x8c>
 8009c8a:	2390      	movs	r3, #144	; 0x90
 8009c8c:	898a      	ldrh	r2, [r1, #12]
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	421a      	tst	r2, r3
 8009c92:	d034      	beq.n	8009cfe <__ssputs_r+0x86>
 8009c94:	2503      	movs	r5, #3
 8009c96:	6909      	ldr	r1, [r1, #16]
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	1a5b      	subs	r3, r3, r1
 8009c9c:	9302      	str	r3, [sp, #8]
 8009c9e:	6963      	ldr	r3, [r4, #20]
 8009ca0:	9802      	ldr	r0, [sp, #8]
 8009ca2:	435d      	muls	r5, r3
 8009ca4:	0feb      	lsrs	r3, r5, #31
 8009ca6:	195d      	adds	r5, r3, r5
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	106d      	asrs	r5, r5, #1
 8009cac:	3301      	adds	r3, #1
 8009cae:	181b      	adds	r3, r3, r0
 8009cb0:	42ab      	cmp	r3, r5
 8009cb2:	d900      	bls.n	8009cb6 <__ssputs_r+0x3e>
 8009cb4:	001d      	movs	r5, r3
 8009cb6:	0553      	lsls	r3, r2, #21
 8009cb8:	d532      	bpl.n	8009d20 <__ssputs_r+0xa8>
 8009cba:	0029      	movs	r1, r5
 8009cbc:	0038      	movs	r0, r7
 8009cbe:	f7ff ff7d 	bl	8009bbc <_malloc_r>
 8009cc2:	1e06      	subs	r6, r0, #0
 8009cc4:	d109      	bne.n	8009cda <__ssputs_r+0x62>
 8009cc6:	230c      	movs	r3, #12
 8009cc8:	603b      	str	r3, [r7, #0]
 8009cca:	2340      	movs	r3, #64	; 0x40
 8009ccc:	2001      	movs	r0, #1
 8009cce:	89a2      	ldrh	r2, [r4, #12]
 8009cd0:	4240      	negs	r0, r0
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	b005      	add	sp, #20
 8009cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cda:	9a02      	ldr	r2, [sp, #8]
 8009cdc:	6921      	ldr	r1, [r4, #16]
 8009cde:	f7ff fb6e 	bl	80093be <memcpy>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	4a14      	ldr	r2, [pc, #80]	; (8009d38 <__ssputs_r+0xc0>)
 8009ce6:	401a      	ands	r2, r3
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	4313      	orrs	r3, r2
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	9b02      	ldr	r3, [sp, #8]
 8009cf0:	6126      	str	r6, [r4, #16]
 8009cf2:	18f6      	adds	r6, r6, r3
 8009cf4:	6026      	str	r6, [r4, #0]
 8009cf6:	6165      	str	r5, [r4, #20]
 8009cf8:	9e01      	ldr	r6, [sp, #4]
 8009cfa:	1aed      	subs	r5, r5, r3
 8009cfc:	60a5      	str	r5, [r4, #8]
 8009cfe:	9b01      	ldr	r3, [sp, #4]
 8009d00:	429e      	cmp	r6, r3
 8009d02:	d900      	bls.n	8009d06 <__ssputs_r+0x8e>
 8009d04:	9e01      	ldr	r6, [sp, #4]
 8009d06:	0032      	movs	r2, r6
 8009d08:	9903      	ldr	r1, [sp, #12]
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	f000 f968 	bl	8009fe0 <memmove>
 8009d10:	68a3      	ldr	r3, [r4, #8]
 8009d12:	2000      	movs	r0, #0
 8009d14:	1b9b      	subs	r3, r3, r6
 8009d16:	60a3      	str	r3, [r4, #8]
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	199e      	adds	r6, r3, r6
 8009d1c:	6026      	str	r6, [r4, #0]
 8009d1e:	e7da      	b.n	8009cd6 <__ssputs_r+0x5e>
 8009d20:	002a      	movs	r2, r5
 8009d22:	0038      	movs	r0, r7
 8009d24:	f000 f980 	bl	800a028 <_realloc_r>
 8009d28:	1e06      	subs	r6, r0, #0
 8009d2a:	d1e0      	bne.n	8009cee <__ssputs_r+0x76>
 8009d2c:	0038      	movs	r0, r7
 8009d2e:	6921      	ldr	r1, [r4, #16]
 8009d30:	f7ff fefa 	bl	8009b28 <_free_r>
 8009d34:	e7c7      	b.n	8009cc6 <__ssputs_r+0x4e>
 8009d36:	46c0      	nop			; (mov r8, r8)
 8009d38:	fffffb7f 	.word	0xfffffb7f

08009d3c <_svfiprintf_r>:
 8009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d3e:	b0a1      	sub	sp, #132	; 0x84
 8009d40:	9003      	str	r0, [sp, #12]
 8009d42:	001d      	movs	r5, r3
 8009d44:	898b      	ldrh	r3, [r1, #12]
 8009d46:	000f      	movs	r7, r1
 8009d48:	0016      	movs	r6, r2
 8009d4a:	061b      	lsls	r3, r3, #24
 8009d4c:	d511      	bpl.n	8009d72 <_svfiprintf_r+0x36>
 8009d4e:	690b      	ldr	r3, [r1, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10e      	bne.n	8009d72 <_svfiprintf_r+0x36>
 8009d54:	2140      	movs	r1, #64	; 0x40
 8009d56:	f7ff ff31 	bl	8009bbc <_malloc_r>
 8009d5a:	6038      	str	r0, [r7, #0]
 8009d5c:	6138      	str	r0, [r7, #16]
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d105      	bne.n	8009d6e <_svfiprintf_r+0x32>
 8009d62:	230c      	movs	r3, #12
 8009d64:	9a03      	ldr	r2, [sp, #12]
 8009d66:	3801      	subs	r0, #1
 8009d68:	6013      	str	r3, [r2, #0]
 8009d6a:	b021      	add	sp, #132	; 0x84
 8009d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6e:	2340      	movs	r3, #64	; 0x40
 8009d70:	617b      	str	r3, [r7, #20]
 8009d72:	2300      	movs	r3, #0
 8009d74:	ac08      	add	r4, sp, #32
 8009d76:	6163      	str	r3, [r4, #20]
 8009d78:	3320      	adds	r3, #32
 8009d7a:	7663      	strb	r3, [r4, #25]
 8009d7c:	3310      	adds	r3, #16
 8009d7e:	76a3      	strb	r3, [r4, #26]
 8009d80:	9507      	str	r5, [sp, #28]
 8009d82:	0035      	movs	r5, r6
 8009d84:	782b      	ldrb	r3, [r5, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <_svfiprintf_r+0x52>
 8009d8a:	2b25      	cmp	r3, #37	; 0x25
 8009d8c:	d147      	bne.n	8009e1e <_svfiprintf_r+0xe2>
 8009d8e:	1bab      	subs	r3, r5, r6
 8009d90:	9305      	str	r3, [sp, #20]
 8009d92:	42b5      	cmp	r5, r6
 8009d94:	d00c      	beq.n	8009db0 <_svfiprintf_r+0x74>
 8009d96:	0032      	movs	r2, r6
 8009d98:	0039      	movs	r1, r7
 8009d9a:	9803      	ldr	r0, [sp, #12]
 8009d9c:	f7ff ff6c 	bl	8009c78 <__ssputs_r>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	d100      	bne.n	8009da6 <_svfiprintf_r+0x6a>
 8009da4:	e0ae      	b.n	8009f04 <_svfiprintf_r+0x1c8>
 8009da6:	6962      	ldr	r2, [r4, #20]
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	4694      	mov	ip, r2
 8009dac:	4463      	add	r3, ip
 8009dae:	6163      	str	r3, [r4, #20]
 8009db0:	782b      	ldrb	r3, [r5, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d100      	bne.n	8009db8 <_svfiprintf_r+0x7c>
 8009db6:	e0a5      	b.n	8009f04 <_svfiprintf_r+0x1c8>
 8009db8:	2201      	movs	r2, #1
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4252      	negs	r2, r2
 8009dbe:	6062      	str	r2, [r4, #4]
 8009dc0:	a904      	add	r1, sp, #16
 8009dc2:	3254      	adds	r2, #84	; 0x54
 8009dc4:	1852      	adds	r2, r2, r1
 8009dc6:	1c6e      	adds	r6, r5, #1
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	60e3      	str	r3, [r4, #12]
 8009dcc:	60a3      	str	r3, [r4, #8]
 8009dce:	7013      	strb	r3, [r2, #0]
 8009dd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009dd2:	2205      	movs	r2, #5
 8009dd4:	7831      	ldrb	r1, [r6, #0]
 8009dd6:	4854      	ldr	r0, [pc, #336]	; (8009f28 <_svfiprintf_r+0x1ec>)
 8009dd8:	f7ff fae6 	bl	80093a8 <memchr>
 8009ddc:	1c75      	adds	r5, r6, #1
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d11f      	bne.n	8009e22 <_svfiprintf_r+0xe6>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	06d3      	lsls	r3, r2, #27
 8009de6:	d504      	bpl.n	8009df2 <_svfiprintf_r+0xb6>
 8009de8:	2353      	movs	r3, #83	; 0x53
 8009dea:	a904      	add	r1, sp, #16
 8009dec:	185b      	adds	r3, r3, r1
 8009dee:	2120      	movs	r1, #32
 8009df0:	7019      	strb	r1, [r3, #0]
 8009df2:	0713      	lsls	r3, r2, #28
 8009df4:	d504      	bpl.n	8009e00 <_svfiprintf_r+0xc4>
 8009df6:	2353      	movs	r3, #83	; 0x53
 8009df8:	a904      	add	r1, sp, #16
 8009dfa:	185b      	adds	r3, r3, r1
 8009dfc:	212b      	movs	r1, #43	; 0x2b
 8009dfe:	7019      	strb	r1, [r3, #0]
 8009e00:	7833      	ldrb	r3, [r6, #0]
 8009e02:	2b2a      	cmp	r3, #42	; 0x2a
 8009e04:	d016      	beq.n	8009e34 <_svfiprintf_r+0xf8>
 8009e06:	0035      	movs	r5, r6
 8009e08:	2100      	movs	r1, #0
 8009e0a:	200a      	movs	r0, #10
 8009e0c:	68e3      	ldr	r3, [r4, #12]
 8009e0e:	782a      	ldrb	r2, [r5, #0]
 8009e10:	1c6e      	adds	r6, r5, #1
 8009e12:	3a30      	subs	r2, #48	; 0x30
 8009e14:	2a09      	cmp	r2, #9
 8009e16:	d94e      	bls.n	8009eb6 <_svfiprintf_r+0x17a>
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	d111      	bne.n	8009e40 <_svfiprintf_r+0x104>
 8009e1c:	e017      	b.n	8009e4e <_svfiprintf_r+0x112>
 8009e1e:	3501      	adds	r5, #1
 8009e20:	e7b0      	b.n	8009d84 <_svfiprintf_r+0x48>
 8009e22:	4b41      	ldr	r3, [pc, #260]	; (8009f28 <_svfiprintf_r+0x1ec>)
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	1ac0      	subs	r0, r0, r3
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4083      	lsls	r3, r0
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	002e      	movs	r6, r5
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	e7ce      	b.n	8009dd2 <_svfiprintf_r+0x96>
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	1d19      	adds	r1, r3, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	9107      	str	r1, [sp, #28]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	db01      	blt.n	8009e44 <_svfiprintf_r+0x108>
 8009e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e42:	e004      	b.n	8009e4e <_svfiprintf_r+0x112>
 8009e44:	425b      	negs	r3, r3
 8009e46:	60e3      	str	r3, [r4, #12]
 8009e48:	2302      	movs	r3, #2
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	782b      	ldrb	r3, [r5, #0]
 8009e50:	2b2e      	cmp	r3, #46	; 0x2e
 8009e52:	d10a      	bne.n	8009e6a <_svfiprintf_r+0x12e>
 8009e54:	786b      	ldrb	r3, [r5, #1]
 8009e56:	2b2a      	cmp	r3, #42	; 0x2a
 8009e58:	d135      	bne.n	8009ec6 <_svfiprintf_r+0x18a>
 8009e5a:	9b07      	ldr	r3, [sp, #28]
 8009e5c:	3502      	adds	r5, #2
 8009e5e:	1d1a      	adds	r2, r3, #4
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	9207      	str	r2, [sp, #28]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	db2b      	blt.n	8009ec0 <_svfiprintf_r+0x184>
 8009e68:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6a:	4e30      	ldr	r6, [pc, #192]	; (8009f2c <_svfiprintf_r+0x1f0>)
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	0030      	movs	r0, r6
 8009e70:	7829      	ldrb	r1, [r5, #0]
 8009e72:	f7ff fa99 	bl	80093a8 <memchr>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d006      	beq.n	8009e88 <_svfiprintf_r+0x14c>
 8009e7a:	2340      	movs	r3, #64	; 0x40
 8009e7c:	1b80      	subs	r0, r0, r6
 8009e7e:	4083      	lsls	r3, r0
 8009e80:	6822      	ldr	r2, [r4, #0]
 8009e82:	3501      	adds	r5, #1
 8009e84:	4313      	orrs	r3, r2
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	7829      	ldrb	r1, [r5, #0]
 8009e8a:	2206      	movs	r2, #6
 8009e8c:	4828      	ldr	r0, [pc, #160]	; (8009f30 <_svfiprintf_r+0x1f4>)
 8009e8e:	1c6e      	adds	r6, r5, #1
 8009e90:	7621      	strb	r1, [r4, #24]
 8009e92:	f7ff fa89 	bl	80093a8 <memchr>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d03c      	beq.n	8009f14 <_svfiprintf_r+0x1d8>
 8009e9a:	4b26      	ldr	r3, [pc, #152]	; (8009f34 <_svfiprintf_r+0x1f8>)
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d125      	bne.n	8009eec <_svfiprintf_r+0x1b0>
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	9b07      	ldr	r3, [sp, #28]
 8009ea4:	3307      	adds	r3, #7
 8009ea6:	4393      	bics	r3, r2
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	9307      	str	r3, [sp, #28]
 8009eac:	6963      	ldr	r3, [r4, #20]
 8009eae:	9a04      	ldr	r2, [sp, #16]
 8009eb0:	189b      	adds	r3, r3, r2
 8009eb2:	6163      	str	r3, [r4, #20]
 8009eb4:	e765      	b.n	8009d82 <_svfiprintf_r+0x46>
 8009eb6:	4343      	muls	r3, r0
 8009eb8:	0035      	movs	r5, r6
 8009eba:	2101      	movs	r1, #1
 8009ebc:	189b      	adds	r3, r3, r2
 8009ebe:	e7a6      	b.n	8009e0e <_svfiprintf_r+0xd2>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	425b      	negs	r3, r3
 8009ec4:	e7d0      	b.n	8009e68 <_svfiprintf_r+0x12c>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	200a      	movs	r0, #10
 8009eca:	001a      	movs	r2, r3
 8009ecc:	3501      	adds	r5, #1
 8009ece:	6063      	str	r3, [r4, #4]
 8009ed0:	7829      	ldrb	r1, [r5, #0]
 8009ed2:	1c6e      	adds	r6, r5, #1
 8009ed4:	3930      	subs	r1, #48	; 0x30
 8009ed6:	2909      	cmp	r1, #9
 8009ed8:	d903      	bls.n	8009ee2 <_svfiprintf_r+0x1a6>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0c5      	beq.n	8009e6a <_svfiprintf_r+0x12e>
 8009ede:	9209      	str	r2, [sp, #36]	; 0x24
 8009ee0:	e7c3      	b.n	8009e6a <_svfiprintf_r+0x12e>
 8009ee2:	4342      	muls	r2, r0
 8009ee4:	0035      	movs	r5, r6
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	1852      	adds	r2, r2, r1
 8009eea:	e7f1      	b.n	8009ed0 <_svfiprintf_r+0x194>
 8009eec:	ab07      	add	r3, sp, #28
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	003a      	movs	r2, r7
 8009ef2:	0021      	movs	r1, r4
 8009ef4:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <_svfiprintf_r+0x1fc>)
 8009ef6:	9803      	ldr	r0, [sp, #12]
 8009ef8:	f7fd ff9a 	bl	8007e30 <_printf_float>
 8009efc:	9004      	str	r0, [sp, #16]
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	3301      	adds	r3, #1
 8009f02:	d1d3      	bne.n	8009eac <_svfiprintf_r+0x170>
 8009f04:	89bb      	ldrh	r3, [r7, #12]
 8009f06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f08:	065b      	lsls	r3, r3, #25
 8009f0a:	d400      	bmi.n	8009f0e <_svfiprintf_r+0x1d2>
 8009f0c:	e72d      	b.n	8009d6a <_svfiprintf_r+0x2e>
 8009f0e:	2001      	movs	r0, #1
 8009f10:	4240      	negs	r0, r0
 8009f12:	e72a      	b.n	8009d6a <_svfiprintf_r+0x2e>
 8009f14:	ab07      	add	r3, sp, #28
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	003a      	movs	r2, r7
 8009f1a:	0021      	movs	r1, r4
 8009f1c:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <_svfiprintf_r+0x1fc>)
 8009f1e:	9803      	ldr	r0, [sp, #12]
 8009f20:	f7fe fa44 	bl	80083ac <_printf_i>
 8009f24:	e7ea      	b.n	8009efc <_svfiprintf_r+0x1c0>
 8009f26:	46c0      	nop			; (mov r8, r8)
 8009f28:	0800b2f4 	.word	0x0800b2f4
 8009f2c:	0800b2fa 	.word	0x0800b2fa
 8009f30:	0800b2fe 	.word	0x0800b2fe
 8009f34:	08007e31 	.word	0x08007e31
 8009f38:	08009c79 	.word	0x08009c79

08009f3c <_sbrk_r>:
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	4d06      	ldr	r5, [pc, #24]	; (8009f5c <_sbrk_r+0x20>)
 8009f42:	0004      	movs	r4, r0
 8009f44:	0008      	movs	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7f9 ff06 	bl	8003d58 <_sbrk>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d103      	bne.n	8009f58 <_sbrk_r+0x1c>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d000      	beq.n	8009f58 <_sbrk_r+0x1c>
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	200006ec 	.word	0x200006ec

08009f60 <__assert_func>:
 8009f60:	b530      	push	{r4, r5, lr}
 8009f62:	0014      	movs	r4, r2
 8009f64:	001a      	movs	r2, r3
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <__assert_func+0x2c>)
 8009f68:	0005      	movs	r5, r0
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	b085      	sub	sp, #20
 8009f6e:	68d8      	ldr	r0, [r3, #12]
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <__assert_func+0x30>)
 8009f72:	2c00      	cmp	r4, #0
 8009f74:	d101      	bne.n	8009f7a <__assert_func+0x1a>
 8009f76:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <__assert_func+0x34>)
 8009f78:	001c      	movs	r4, r3
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	9100      	str	r1, [sp, #0]
 8009f7e:	002b      	movs	r3, r5
 8009f80:	4905      	ldr	r1, [pc, #20]	; (8009f98 <__assert_func+0x38>)
 8009f82:	9402      	str	r4, [sp, #8]
 8009f84:	f000 f80a 	bl	8009f9c <fiprintf>
 8009f88:	f000 fab2 	bl	800a4f0 <abort>
 8009f8c:	2000000c 	.word	0x2000000c
 8009f90:	0800b305 	.word	0x0800b305
 8009f94:	0800b340 	.word	0x0800b340
 8009f98:	0800b312 	.word	0x0800b312

08009f9c <fiprintf>:
 8009f9c:	b40e      	push	{r1, r2, r3}
 8009f9e:	b503      	push	{r0, r1, lr}
 8009fa0:	0001      	movs	r1, r0
 8009fa2:	ab03      	add	r3, sp, #12
 8009fa4:	4804      	ldr	r0, [pc, #16]	; (8009fb8 <fiprintf+0x1c>)
 8009fa6:	cb04      	ldmia	r3!, {r2}
 8009fa8:	6800      	ldr	r0, [r0, #0]
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	f000 f88a 	bl	800a0c4 <_vfiprintf_r>
 8009fb0:	b002      	add	sp, #8
 8009fb2:	bc08      	pop	{r3}
 8009fb4:	b003      	add	sp, #12
 8009fb6:	4718      	bx	r3
 8009fb8:	2000000c 	.word	0x2000000c

08009fbc <__ascii_mbtowc>:
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	2900      	cmp	r1, #0
 8009fc0:	d100      	bne.n	8009fc4 <__ascii_mbtowc+0x8>
 8009fc2:	a901      	add	r1, sp, #4
 8009fc4:	1e10      	subs	r0, r2, #0
 8009fc6:	d006      	beq.n	8009fd6 <__ascii_mbtowc+0x1a>
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d006      	beq.n	8009fda <__ascii_mbtowc+0x1e>
 8009fcc:	7813      	ldrb	r3, [r2, #0]
 8009fce:	600b      	str	r3, [r1, #0]
 8009fd0:	7810      	ldrb	r0, [r2, #0]
 8009fd2:	1e43      	subs	r3, r0, #1
 8009fd4:	4198      	sbcs	r0, r3
 8009fd6:	b002      	add	sp, #8
 8009fd8:	4770      	bx	lr
 8009fda:	2002      	movs	r0, #2
 8009fdc:	4240      	negs	r0, r0
 8009fde:	e7fa      	b.n	8009fd6 <__ascii_mbtowc+0x1a>

08009fe0 <memmove>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	4288      	cmp	r0, r1
 8009fe4:	d902      	bls.n	8009fec <memmove+0xc>
 8009fe6:	188b      	adds	r3, r1, r2
 8009fe8:	4298      	cmp	r0, r3
 8009fea:	d303      	bcc.n	8009ff4 <memmove+0x14>
 8009fec:	2300      	movs	r3, #0
 8009fee:	e007      	b.n	800a000 <memmove+0x20>
 8009ff0:	5c8b      	ldrb	r3, [r1, r2]
 8009ff2:	5483      	strb	r3, [r0, r2]
 8009ff4:	3a01      	subs	r2, #1
 8009ff6:	d2fb      	bcs.n	8009ff0 <memmove+0x10>
 8009ff8:	bd10      	pop	{r4, pc}
 8009ffa:	5ccc      	ldrb	r4, [r1, r3]
 8009ffc:	54c4      	strb	r4, [r0, r3]
 8009ffe:	3301      	adds	r3, #1
 800a000:	429a      	cmp	r2, r3
 800a002:	d1fa      	bne.n	8009ffa <memmove+0x1a>
 800a004:	e7f8      	b.n	8009ff8 <memmove+0x18>
	...

0800a008 <__malloc_lock>:
 800a008:	b510      	push	{r4, lr}
 800a00a:	4802      	ldr	r0, [pc, #8]	; (800a014 <__malloc_lock+0xc>)
 800a00c:	f000 fc47 	bl	800a89e <__retarget_lock_acquire_recursive>
 800a010:	bd10      	pop	{r4, pc}
 800a012:	46c0      	nop			; (mov r8, r8)
 800a014:	200006f4 	.word	0x200006f4

0800a018 <__malloc_unlock>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	4802      	ldr	r0, [pc, #8]	; (800a024 <__malloc_unlock+0xc>)
 800a01c:	f000 fc40 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a020:	bd10      	pop	{r4, pc}
 800a022:	46c0      	nop			; (mov r8, r8)
 800a024:	200006f4 	.word	0x200006f4

0800a028 <_realloc_r>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	0007      	movs	r7, r0
 800a02c:	000d      	movs	r5, r1
 800a02e:	0016      	movs	r6, r2
 800a030:	2900      	cmp	r1, #0
 800a032:	d105      	bne.n	800a040 <_realloc_r+0x18>
 800a034:	0011      	movs	r1, r2
 800a036:	f7ff fdc1 	bl	8009bbc <_malloc_r>
 800a03a:	0004      	movs	r4, r0
 800a03c:	0020      	movs	r0, r4
 800a03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a040:	2a00      	cmp	r2, #0
 800a042:	d103      	bne.n	800a04c <_realloc_r+0x24>
 800a044:	f7ff fd70 	bl	8009b28 <_free_r>
 800a048:	0034      	movs	r4, r6
 800a04a:	e7f7      	b.n	800a03c <_realloc_r+0x14>
 800a04c:	f000 fc96 	bl	800a97c <_malloc_usable_size_r>
 800a050:	002c      	movs	r4, r5
 800a052:	42b0      	cmp	r0, r6
 800a054:	d2f2      	bcs.n	800a03c <_realloc_r+0x14>
 800a056:	0031      	movs	r1, r6
 800a058:	0038      	movs	r0, r7
 800a05a:	f7ff fdaf 	bl	8009bbc <_malloc_r>
 800a05e:	1e04      	subs	r4, r0, #0
 800a060:	d0ec      	beq.n	800a03c <_realloc_r+0x14>
 800a062:	0029      	movs	r1, r5
 800a064:	0032      	movs	r2, r6
 800a066:	f7ff f9aa 	bl	80093be <memcpy>
 800a06a:	0029      	movs	r1, r5
 800a06c:	0038      	movs	r0, r7
 800a06e:	f7ff fd5b 	bl	8009b28 <_free_r>
 800a072:	e7e3      	b.n	800a03c <_realloc_r+0x14>

0800a074 <__sfputc_r>:
 800a074:	6893      	ldr	r3, [r2, #8]
 800a076:	b510      	push	{r4, lr}
 800a078:	3b01      	subs	r3, #1
 800a07a:	6093      	str	r3, [r2, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	da04      	bge.n	800a08a <__sfputc_r+0x16>
 800a080:	6994      	ldr	r4, [r2, #24]
 800a082:	42a3      	cmp	r3, r4
 800a084:	db07      	blt.n	800a096 <__sfputc_r+0x22>
 800a086:	290a      	cmp	r1, #10
 800a088:	d005      	beq.n	800a096 <__sfputc_r+0x22>
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	1c58      	adds	r0, r3, #1
 800a08e:	6010      	str	r0, [r2, #0]
 800a090:	7019      	strb	r1, [r3, #0]
 800a092:	0008      	movs	r0, r1
 800a094:	bd10      	pop	{r4, pc}
 800a096:	f000 f94f 	bl	800a338 <__swbuf_r>
 800a09a:	0001      	movs	r1, r0
 800a09c:	e7f9      	b.n	800a092 <__sfputc_r+0x1e>

0800a09e <__sfputs_r>:
 800a09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a0:	0006      	movs	r6, r0
 800a0a2:	000f      	movs	r7, r1
 800a0a4:	0014      	movs	r4, r2
 800a0a6:	18d5      	adds	r5, r2, r3
 800a0a8:	42ac      	cmp	r4, r5
 800a0aa:	d101      	bne.n	800a0b0 <__sfputs_r+0x12>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	e007      	b.n	800a0c0 <__sfputs_r+0x22>
 800a0b0:	7821      	ldrb	r1, [r4, #0]
 800a0b2:	003a      	movs	r2, r7
 800a0b4:	0030      	movs	r0, r6
 800a0b6:	f7ff ffdd 	bl	800a074 <__sfputc_r>
 800a0ba:	3401      	adds	r4, #1
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	d1f3      	bne.n	800a0a8 <__sfputs_r+0xa>
 800a0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0c4 <_vfiprintf_r>:
 800a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c6:	b0a1      	sub	sp, #132	; 0x84
 800a0c8:	0006      	movs	r6, r0
 800a0ca:	000c      	movs	r4, r1
 800a0cc:	001f      	movs	r7, r3
 800a0ce:	9203      	str	r2, [sp, #12]
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d004      	beq.n	800a0de <_vfiprintf_r+0x1a>
 800a0d4:	6983      	ldr	r3, [r0, #24]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <_vfiprintf_r+0x1a>
 800a0da:	f000 fb3f 	bl	800a75c <__sinit>
 800a0de:	4b8e      	ldr	r3, [pc, #568]	; (800a318 <_vfiprintf_r+0x254>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d11c      	bne.n	800a11e <_vfiprintf_r+0x5a>
 800a0e4:	6874      	ldr	r4, [r6, #4]
 800a0e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0e8:	07db      	lsls	r3, r3, #31
 800a0ea:	d405      	bmi.n	800a0f8 <_vfiprintf_r+0x34>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	059b      	lsls	r3, r3, #22
 800a0f0:	d402      	bmi.n	800a0f8 <_vfiprintf_r+0x34>
 800a0f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0f4:	f000 fbd3 	bl	800a89e <__retarget_lock_acquire_recursive>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	071b      	lsls	r3, r3, #28
 800a0fc:	d502      	bpl.n	800a104 <_vfiprintf_r+0x40>
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d11d      	bne.n	800a140 <_vfiprintf_r+0x7c>
 800a104:	0021      	movs	r1, r4
 800a106:	0030      	movs	r0, r6
 800a108:	f000 f97a 	bl	800a400 <__swsetup_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d017      	beq.n	800a140 <_vfiprintf_r+0x7c>
 800a110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a112:	07db      	lsls	r3, r3, #31
 800a114:	d50d      	bpl.n	800a132 <_vfiprintf_r+0x6e>
 800a116:	2001      	movs	r0, #1
 800a118:	4240      	negs	r0, r0
 800a11a:	b021      	add	sp, #132	; 0x84
 800a11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a11e:	4b7f      	ldr	r3, [pc, #508]	; (800a31c <_vfiprintf_r+0x258>)
 800a120:	429c      	cmp	r4, r3
 800a122:	d101      	bne.n	800a128 <_vfiprintf_r+0x64>
 800a124:	68b4      	ldr	r4, [r6, #8]
 800a126:	e7de      	b.n	800a0e6 <_vfiprintf_r+0x22>
 800a128:	4b7d      	ldr	r3, [pc, #500]	; (800a320 <_vfiprintf_r+0x25c>)
 800a12a:	429c      	cmp	r4, r3
 800a12c:	d1db      	bne.n	800a0e6 <_vfiprintf_r+0x22>
 800a12e:	68f4      	ldr	r4, [r6, #12]
 800a130:	e7d9      	b.n	800a0e6 <_vfiprintf_r+0x22>
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	059b      	lsls	r3, r3, #22
 800a136:	d4ee      	bmi.n	800a116 <_vfiprintf_r+0x52>
 800a138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a13a:	f000 fbb1 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a13e:	e7ea      	b.n	800a116 <_vfiprintf_r+0x52>
 800a140:	2300      	movs	r3, #0
 800a142:	ad08      	add	r5, sp, #32
 800a144:	616b      	str	r3, [r5, #20]
 800a146:	3320      	adds	r3, #32
 800a148:	766b      	strb	r3, [r5, #25]
 800a14a:	3310      	adds	r3, #16
 800a14c:	76ab      	strb	r3, [r5, #26]
 800a14e:	9707      	str	r7, [sp, #28]
 800a150:	9f03      	ldr	r7, [sp, #12]
 800a152:	783b      	ldrb	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d001      	beq.n	800a15c <_vfiprintf_r+0x98>
 800a158:	2b25      	cmp	r3, #37	; 0x25
 800a15a:	d14e      	bne.n	800a1fa <_vfiprintf_r+0x136>
 800a15c:	9b03      	ldr	r3, [sp, #12]
 800a15e:	1afb      	subs	r3, r7, r3
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	429f      	cmp	r7, r3
 800a166:	d00d      	beq.n	800a184 <_vfiprintf_r+0xc0>
 800a168:	9b05      	ldr	r3, [sp, #20]
 800a16a:	0021      	movs	r1, r4
 800a16c:	0030      	movs	r0, r6
 800a16e:	9a03      	ldr	r2, [sp, #12]
 800a170:	f7ff ff95 	bl	800a09e <__sfputs_r>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d100      	bne.n	800a17a <_vfiprintf_r+0xb6>
 800a178:	e0b5      	b.n	800a2e6 <_vfiprintf_r+0x222>
 800a17a:	696a      	ldr	r2, [r5, #20]
 800a17c:	9b05      	ldr	r3, [sp, #20]
 800a17e:	4694      	mov	ip, r2
 800a180:	4463      	add	r3, ip
 800a182:	616b      	str	r3, [r5, #20]
 800a184:	783b      	ldrb	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d100      	bne.n	800a18c <_vfiprintf_r+0xc8>
 800a18a:	e0ac      	b.n	800a2e6 <_vfiprintf_r+0x222>
 800a18c:	2201      	movs	r2, #1
 800a18e:	1c7b      	adds	r3, r7, #1
 800a190:	9303      	str	r3, [sp, #12]
 800a192:	2300      	movs	r3, #0
 800a194:	4252      	negs	r2, r2
 800a196:	606a      	str	r2, [r5, #4]
 800a198:	a904      	add	r1, sp, #16
 800a19a:	3254      	adds	r2, #84	; 0x54
 800a19c:	1852      	adds	r2, r2, r1
 800a19e:	602b      	str	r3, [r5, #0]
 800a1a0:	60eb      	str	r3, [r5, #12]
 800a1a2:	60ab      	str	r3, [r5, #8]
 800a1a4:	7013      	strb	r3, [r2, #0]
 800a1a6:	65ab      	str	r3, [r5, #88]	; 0x58
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	2205      	movs	r2, #5
 800a1ac:	7819      	ldrb	r1, [r3, #0]
 800a1ae:	485d      	ldr	r0, [pc, #372]	; (800a324 <_vfiprintf_r+0x260>)
 800a1b0:	f7ff f8fa 	bl	80093a8 <memchr>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	1c5f      	adds	r7, r3, #1
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d120      	bne.n	800a1fe <_vfiprintf_r+0x13a>
 800a1bc:	682a      	ldr	r2, [r5, #0]
 800a1be:	06d3      	lsls	r3, r2, #27
 800a1c0:	d504      	bpl.n	800a1cc <_vfiprintf_r+0x108>
 800a1c2:	2353      	movs	r3, #83	; 0x53
 800a1c4:	a904      	add	r1, sp, #16
 800a1c6:	185b      	adds	r3, r3, r1
 800a1c8:	2120      	movs	r1, #32
 800a1ca:	7019      	strb	r1, [r3, #0]
 800a1cc:	0713      	lsls	r3, r2, #28
 800a1ce:	d504      	bpl.n	800a1da <_vfiprintf_r+0x116>
 800a1d0:	2353      	movs	r3, #83	; 0x53
 800a1d2:	a904      	add	r1, sp, #16
 800a1d4:	185b      	adds	r3, r3, r1
 800a1d6:	212b      	movs	r1, #43	; 0x2b
 800a1d8:	7019      	strb	r1, [r3, #0]
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	2b2a      	cmp	r3, #42	; 0x2a
 800a1e0:	d016      	beq.n	800a210 <_vfiprintf_r+0x14c>
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	68eb      	ldr	r3, [r5, #12]
 800a1e6:	9f03      	ldr	r7, [sp, #12]
 800a1e8:	783a      	ldrb	r2, [r7, #0]
 800a1ea:	1c78      	adds	r0, r7, #1
 800a1ec:	3a30      	subs	r2, #48	; 0x30
 800a1ee:	4684      	mov	ip, r0
 800a1f0:	2a09      	cmp	r2, #9
 800a1f2:	d94f      	bls.n	800a294 <_vfiprintf_r+0x1d0>
 800a1f4:	2900      	cmp	r1, #0
 800a1f6:	d111      	bne.n	800a21c <_vfiprintf_r+0x158>
 800a1f8:	e017      	b.n	800a22a <_vfiprintf_r+0x166>
 800a1fa:	3701      	adds	r7, #1
 800a1fc:	e7a9      	b.n	800a152 <_vfiprintf_r+0x8e>
 800a1fe:	4b49      	ldr	r3, [pc, #292]	; (800a324 <_vfiprintf_r+0x260>)
 800a200:	682a      	ldr	r2, [r5, #0]
 800a202:	1ac0      	subs	r0, r0, r3
 800a204:	2301      	movs	r3, #1
 800a206:	4083      	lsls	r3, r0
 800a208:	4313      	orrs	r3, r2
 800a20a:	602b      	str	r3, [r5, #0]
 800a20c:	9703      	str	r7, [sp, #12]
 800a20e:	e7cb      	b.n	800a1a8 <_vfiprintf_r+0xe4>
 800a210:	9b07      	ldr	r3, [sp, #28]
 800a212:	1d19      	adds	r1, r3, #4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	9107      	str	r1, [sp, #28]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	db01      	blt.n	800a220 <_vfiprintf_r+0x15c>
 800a21c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a21e:	e004      	b.n	800a22a <_vfiprintf_r+0x166>
 800a220:	425b      	negs	r3, r3
 800a222:	60eb      	str	r3, [r5, #12]
 800a224:	2302      	movs	r3, #2
 800a226:	4313      	orrs	r3, r2
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	783b      	ldrb	r3, [r7, #0]
 800a22c:	2b2e      	cmp	r3, #46	; 0x2e
 800a22e:	d10a      	bne.n	800a246 <_vfiprintf_r+0x182>
 800a230:	787b      	ldrb	r3, [r7, #1]
 800a232:	2b2a      	cmp	r3, #42	; 0x2a
 800a234:	d137      	bne.n	800a2a6 <_vfiprintf_r+0x1e2>
 800a236:	9b07      	ldr	r3, [sp, #28]
 800a238:	3702      	adds	r7, #2
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	9207      	str	r2, [sp, #28]
 800a240:	2b00      	cmp	r3, #0
 800a242:	db2d      	blt.n	800a2a0 <_vfiprintf_r+0x1dc>
 800a244:	9309      	str	r3, [sp, #36]	; 0x24
 800a246:	2203      	movs	r2, #3
 800a248:	7839      	ldrb	r1, [r7, #0]
 800a24a:	4837      	ldr	r0, [pc, #220]	; (800a328 <_vfiprintf_r+0x264>)
 800a24c:	f7ff f8ac 	bl	80093a8 <memchr>
 800a250:	2800      	cmp	r0, #0
 800a252:	d007      	beq.n	800a264 <_vfiprintf_r+0x1a0>
 800a254:	4b34      	ldr	r3, [pc, #208]	; (800a328 <_vfiprintf_r+0x264>)
 800a256:	682a      	ldr	r2, [r5, #0]
 800a258:	1ac0      	subs	r0, r0, r3
 800a25a:	2340      	movs	r3, #64	; 0x40
 800a25c:	4083      	lsls	r3, r0
 800a25e:	4313      	orrs	r3, r2
 800a260:	3701      	adds	r7, #1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	7839      	ldrb	r1, [r7, #0]
 800a266:	1c7b      	adds	r3, r7, #1
 800a268:	2206      	movs	r2, #6
 800a26a:	4830      	ldr	r0, [pc, #192]	; (800a32c <_vfiprintf_r+0x268>)
 800a26c:	9303      	str	r3, [sp, #12]
 800a26e:	7629      	strb	r1, [r5, #24]
 800a270:	f7ff f89a 	bl	80093a8 <memchr>
 800a274:	2800      	cmp	r0, #0
 800a276:	d045      	beq.n	800a304 <_vfiprintf_r+0x240>
 800a278:	4b2d      	ldr	r3, [pc, #180]	; (800a330 <_vfiprintf_r+0x26c>)
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d127      	bne.n	800a2ce <_vfiprintf_r+0x20a>
 800a27e:	2207      	movs	r2, #7
 800a280:	9b07      	ldr	r3, [sp, #28]
 800a282:	3307      	adds	r3, #7
 800a284:	4393      	bics	r3, r2
 800a286:	3308      	adds	r3, #8
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	696b      	ldr	r3, [r5, #20]
 800a28c:	9a04      	ldr	r2, [sp, #16]
 800a28e:	189b      	adds	r3, r3, r2
 800a290:	616b      	str	r3, [r5, #20]
 800a292:	e75d      	b.n	800a150 <_vfiprintf_r+0x8c>
 800a294:	210a      	movs	r1, #10
 800a296:	434b      	muls	r3, r1
 800a298:	4667      	mov	r7, ip
 800a29a:	189b      	adds	r3, r3, r2
 800a29c:	3909      	subs	r1, #9
 800a29e:	e7a3      	b.n	800a1e8 <_vfiprintf_r+0x124>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	425b      	negs	r3, r3
 800a2a4:	e7ce      	b.n	800a244 <_vfiprintf_r+0x180>
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	001a      	movs	r2, r3
 800a2aa:	3701      	adds	r7, #1
 800a2ac:	606b      	str	r3, [r5, #4]
 800a2ae:	7839      	ldrb	r1, [r7, #0]
 800a2b0:	1c78      	adds	r0, r7, #1
 800a2b2:	3930      	subs	r1, #48	; 0x30
 800a2b4:	4684      	mov	ip, r0
 800a2b6:	2909      	cmp	r1, #9
 800a2b8:	d903      	bls.n	800a2c2 <_vfiprintf_r+0x1fe>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0c3      	beq.n	800a246 <_vfiprintf_r+0x182>
 800a2be:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c0:	e7c1      	b.n	800a246 <_vfiprintf_r+0x182>
 800a2c2:	230a      	movs	r3, #10
 800a2c4:	435a      	muls	r2, r3
 800a2c6:	4667      	mov	r7, ip
 800a2c8:	1852      	adds	r2, r2, r1
 800a2ca:	3b09      	subs	r3, #9
 800a2cc:	e7ef      	b.n	800a2ae <_vfiprintf_r+0x1ea>
 800a2ce:	ab07      	add	r3, sp, #28
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	0022      	movs	r2, r4
 800a2d4:	0029      	movs	r1, r5
 800a2d6:	0030      	movs	r0, r6
 800a2d8:	4b16      	ldr	r3, [pc, #88]	; (800a334 <_vfiprintf_r+0x270>)
 800a2da:	f7fd fda9 	bl	8007e30 <_printf_float>
 800a2de:	9004      	str	r0, [sp, #16]
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	d1d1      	bne.n	800a28a <_vfiprintf_r+0x1c6>
 800a2e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2e8:	07db      	lsls	r3, r3, #31
 800a2ea:	d405      	bmi.n	800a2f8 <_vfiprintf_r+0x234>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	059b      	lsls	r3, r3, #22
 800a2f0:	d402      	bmi.n	800a2f8 <_vfiprintf_r+0x234>
 800a2f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2f4:	f000 fad4 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	065b      	lsls	r3, r3, #25
 800a2fc:	d500      	bpl.n	800a300 <_vfiprintf_r+0x23c>
 800a2fe:	e70a      	b.n	800a116 <_vfiprintf_r+0x52>
 800a300:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a302:	e70a      	b.n	800a11a <_vfiprintf_r+0x56>
 800a304:	ab07      	add	r3, sp, #28
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	0022      	movs	r2, r4
 800a30a:	0029      	movs	r1, r5
 800a30c:	0030      	movs	r0, r6
 800a30e:	4b09      	ldr	r3, [pc, #36]	; (800a334 <_vfiprintf_r+0x270>)
 800a310:	f7fe f84c 	bl	80083ac <_printf_i>
 800a314:	e7e3      	b.n	800a2de <_vfiprintf_r+0x21a>
 800a316:	46c0      	nop			; (mov r8, r8)
 800a318:	0800b46c 	.word	0x0800b46c
 800a31c:	0800b48c 	.word	0x0800b48c
 800a320:	0800b44c 	.word	0x0800b44c
 800a324:	0800b2f4 	.word	0x0800b2f4
 800a328:	0800b2fa 	.word	0x0800b2fa
 800a32c:	0800b2fe 	.word	0x0800b2fe
 800a330:	08007e31 	.word	0x08007e31
 800a334:	0800a09f 	.word	0x0800a09f

0800a338 <__swbuf_r>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	0005      	movs	r5, r0
 800a33c:	000e      	movs	r6, r1
 800a33e:	0014      	movs	r4, r2
 800a340:	2800      	cmp	r0, #0
 800a342:	d004      	beq.n	800a34e <__swbuf_r+0x16>
 800a344:	6983      	ldr	r3, [r0, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <__swbuf_r+0x16>
 800a34a:	f000 fa07 	bl	800a75c <__sinit>
 800a34e:	4b22      	ldr	r3, [pc, #136]	; (800a3d8 <__swbuf_r+0xa0>)
 800a350:	429c      	cmp	r4, r3
 800a352:	d12e      	bne.n	800a3b2 <__swbuf_r+0x7a>
 800a354:	686c      	ldr	r4, [r5, #4]
 800a356:	69a3      	ldr	r3, [r4, #24]
 800a358:	60a3      	str	r3, [r4, #8]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	071b      	lsls	r3, r3, #28
 800a35e:	d532      	bpl.n	800a3c6 <__swbuf_r+0x8e>
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d02f      	beq.n	800a3c6 <__swbuf_r+0x8e>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	6922      	ldr	r2, [r4, #16]
 800a36a:	b2f7      	uxtb	r7, r6
 800a36c:	1a98      	subs	r0, r3, r2
 800a36e:	6963      	ldr	r3, [r4, #20]
 800a370:	b2f6      	uxtb	r6, r6
 800a372:	4283      	cmp	r3, r0
 800a374:	dc05      	bgt.n	800a382 <__swbuf_r+0x4a>
 800a376:	0021      	movs	r1, r4
 800a378:	0028      	movs	r0, r5
 800a37a:	f000 f94d 	bl	800a618 <_fflush_r>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d127      	bne.n	800a3d2 <__swbuf_r+0x9a>
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	3001      	adds	r0, #1
 800a386:	3b01      	subs	r3, #1
 800a388:	60a3      	str	r3, [r4, #8]
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	6022      	str	r2, [r4, #0]
 800a390:	701f      	strb	r7, [r3, #0]
 800a392:	6963      	ldr	r3, [r4, #20]
 800a394:	4283      	cmp	r3, r0
 800a396:	d004      	beq.n	800a3a2 <__swbuf_r+0x6a>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d507      	bpl.n	800a3ae <__swbuf_r+0x76>
 800a39e:	2e0a      	cmp	r6, #10
 800a3a0:	d105      	bne.n	800a3ae <__swbuf_r+0x76>
 800a3a2:	0021      	movs	r1, r4
 800a3a4:	0028      	movs	r0, r5
 800a3a6:	f000 f937 	bl	800a618 <_fflush_r>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d111      	bne.n	800a3d2 <__swbuf_r+0x9a>
 800a3ae:	0030      	movs	r0, r6
 800a3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	; (800a3dc <__swbuf_r+0xa4>)
 800a3b4:	429c      	cmp	r4, r3
 800a3b6:	d101      	bne.n	800a3bc <__swbuf_r+0x84>
 800a3b8:	68ac      	ldr	r4, [r5, #8]
 800a3ba:	e7cc      	b.n	800a356 <__swbuf_r+0x1e>
 800a3bc:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <__swbuf_r+0xa8>)
 800a3be:	429c      	cmp	r4, r3
 800a3c0:	d1c9      	bne.n	800a356 <__swbuf_r+0x1e>
 800a3c2:	68ec      	ldr	r4, [r5, #12]
 800a3c4:	e7c7      	b.n	800a356 <__swbuf_r+0x1e>
 800a3c6:	0021      	movs	r1, r4
 800a3c8:	0028      	movs	r0, r5
 800a3ca:	f000 f819 	bl	800a400 <__swsetup_r>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d0c9      	beq.n	800a366 <__swbuf_r+0x2e>
 800a3d2:	2601      	movs	r6, #1
 800a3d4:	4276      	negs	r6, r6
 800a3d6:	e7ea      	b.n	800a3ae <__swbuf_r+0x76>
 800a3d8:	0800b46c 	.word	0x0800b46c
 800a3dc:	0800b48c 	.word	0x0800b48c
 800a3e0:	0800b44c 	.word	0x0800b44c

0800a3e4 <__ascii_wctomb>:
 800a3e4:	0003      	movs	r3, r0
 800a3e6:	1e08      	subs	r0, r1, #0
 800a3e8:	d005      	beq.n	800a3f6 <__ascii_wctomb+0x12>
 800a3ea:	2aff      	cmp	r2, #255	; 0xff
 800a3ec:	d904      	bls.n	800a3f8 <__ascii_wctomb+0x14>
 800a3ee:	228a      	movs	r2, #138	; 0x8a
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	4240      	negs	r0, r0
 800a3f6:	4770      	bx	lr
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	700a      	strb	r2, [r1, #0]
 800a3fc:	e7fb      	b.n	800a3f6 <__ascii_wctomb+0x12>
	...

0800a400 <__swsetup_r>:
 800a400:	4b37      	ldr	r3, [pc, #220]	; (800a4e0 <__swsetup_r+0xe0>)
 800a402:	b570      	push	{r4, r5, r6, lr}
 800a404:	681d      	ldr	r5, [r3, #0]
 800a406:	0006      	movs	r6, r0
 800a408:	000c      	movs	r4, r1
 800a40a:	2d00      	cmp	r5, #0
 800a40c:	d005      	beq.n	800a41a <__swsetup_r+0x1a>
 800a40e:	69ab      	ldr	r3, [r5, #24]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d102      	bne.n	800a41a <__swsetup_r+0x1a>
 800a414:	0028      	movs	r0, r5
 800a416:	f000 f9a1 	bl	800a75c <__sinit>
 800a41a:	4b32      	ldr	r3, [pc, #200]	; (800a4e4 <__swsetup_r+0xe4>)
 800a41c:	429c      	cmp	r4, r3
 800a41e:	d10f      	bne.n	800a440 <__swsetup_r+0x40>
 800a420:	686c      	ldr	r4, [r5, #4]
 800a422:	230c      	movs	r3, #12
 800a424:	5ee2      	ldrsh	r2, [r4, r3]
 800a426:	b293      	uxth	r3, r2
 800a428:	0711      	lsls	r1, r2, #28
 800a42a:	d42d      	bmi.n	800a488 <__swsetup_r+0x88>
 800a42c:	06d9      	lsls	r1, r3, #27
 800a42e:	d411      	bmi.n	800a454 <__swsetup_r+0x54>
 800a430:	2309      	movs	r3, #9
 800a432:	2001      	movs	r0, #1
 800a434:	6033      	str	r3, [r6, #0]
 800a436:	3337      	adds	r3, #55	; 0x37
 800a438:	4313      	orrs	r3, r2
 800a43a:	81a3      	strh	r3, [r4, #12]
 800a43c:	4240      	negs	r0, r0
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	4b29      	ldr	r3, [pc, #164]	; (800a4e8 <__swsetup_r+0xe8>)
 800a442:	429c      	cmp	r4, r3
 800a444:	d101      	bne.n	800a44a <__swsetup_r+0x4a>
 800a446:	68ac      	ldr	r4, [r5, #8]
 800a448:	e7eb      	b.n	800a422 <__swsetup_r+0x22>
 800a44a:	4b28      	ldr	r3, [pc, #160]	; (800a4ec <__swsetup_r+0xec>)
 800a44c:	429c      	cmp	r4, r3
 800a44e:	d1e8      	bne.n	800a422 <__swsetup_r+0x22>
 800a450:	68ec      	ldr	r4, [r5, #12]
 800a452:	e7e6      	b.n	800a422 <__swsetup_r+0x22>
 800a454:	075b      	lsls	r3, r3, #29
 800a456:	d513      	bpl.n	800a480 <__swsetup_r+0x80>
 800a458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a45a:	2900      	cmp	r1, #0
 800a45c:	d008      	beq.n	800a470 <__swsetup_r+0x70>
 800a45e:	0023      	movs	r3, r4
 800a460:	3344      	adds	r3, #68	; 0x44
 800a462:	4299      	cmp	r1, r3
 800a464:	d002      	beq.n	800a46c <__swsetup_r+0x6c>
 800a466:	0030      	movs	r0, r6
 800a468:	f7ff fb5e 	bl	8009b28 <_free_r>
 800a46c:	2300      	movs	r3, #0
 800a46e:	6363      	str	r3, [r4, #52]	; 0x34
 800a470:	2224      	movs	r2, #36	; 0x24
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	4393      	bics	r3, r2
 800a476:	81a3      	strh	r3, [r4, #12]
 800a478:	2300      	movs	r3, #0
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	6923      	ldr	r3, [r4, #16]
 800a47e:	6023      	str	r3, [r4, #0]
 800a480:	2308      	movs	r3, #8
 800a482:	89a2      	ldrh	r2, [r4, #12]
 800a484:	4313      	orrs	r3, r2
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10b      	bne.n	800a4a6 <__swsetup_r+0xa6>
 800a48e:	21a0      	movs	r1, #160	; 0xa0
 800a490:	2280      	movs	r2, #128	; 0x80
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	0089      	lsls	r1, r1, #2
 800a496:	0092      	lsls	r2, r2, #2
 800a498:	400b      	ands	r3, r1
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d003      	beq.n	800a4a6 <__swsetup_r+0xa6>
 800a49e:	0021      	movs	r1, r4
 800a4a0:	0030      	movs	r0, r6
 800a4a2:	f000 fa27 	bl	800a8f4 <__smakebuf_r>
 800a4a6:	220c      	movs	r2, #12
 800a4a8:	5ea3      	ldrsh	r3, [r4, r2]
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	001a      	movs	r2, r3
 800a4ae:	b299      	uxth	r1, r3
 800a4b0:	4002      	ands	r2, r0
 800a4b2:	4203      	tst	r3, r0
 800a4b4:	d00f      	beq.n	800a4d6 <__swsetup_r+0xd6>
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	60a2      	str	r2, [r4, #8]
 800a4ba:	6962      	ldr	r2, [r4, #20]
 800a4bc:	4252      	negs	r2, r2
 800a4be:	61a2      	str	r2, [r4, #24]
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	6922      	ldr	r2, [r4, #16]
 800a4c4:	4282      	cmp	r2, r0
 800a4c6:	d1ba      	bne.n	800a43e <__swsetup_r+0x3e>
 800a4c8:	060a      	lsls	r2, r1, #24
 800a4ca:	d5b8      	bpl.n	800a43e <__swsetup_r+0x3e>
 800a4cc:	2240      	movs	r2, #64	; 0x40
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	81a3      	strh	r3, [r4, #12]
 800a4d2:	3801      	subs	r0, #1
 800a4d4:	e7b3      	b.n	800a43e <__swsetup_r+0x3e>
 800a4d6:	0788      	lsls	r0, r1, #30
 800a4d8:	d400      	bmi.n	800a4dc <__swsetup_r+0xdc>
 800a4da:	6962      	ldr	r2, [r4, #20]
 800a4dc:	60a2      	str	r2, [r4, #8]
 800a4de:	e7ef      	b.n	800a4c0 <__swsetup_r+0xc0>
 800a4e0:	2000000c 	.word	0x2000000c
 800a4e4:	0800b46c 	.word	0x0800b46c
 800a4e8:	0800b48c 	.word	0x0800b48c
 800a4ec:	0800b44c 	.word	0x0800b44c

0800a4f0 <abort>:
 800a4f0:	2006      	movs	r0, #6
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	f000 fa74 	bl	800a9e0 <raise>
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	f7f9 fbbb 	bl	8003c74 <_exit>
	...

0800a500 <__sflush_r>:
 800a500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a502:	898b      	ldrh	r3, [r1, #12]
 800a504:	0005      	movs	r5, r0
 800a506:	000c      	movs	r4, r1
 800a508:	071a      	lsls	r2, r3, #28
 800a50a:	d45f      	bmi.n	800a5cc <__sflush_r+0xcc>
 800a50c:	684a      	ldr	r2, [r1, #4]
 800a50e:	2a00      	cmp	r2, #0
 800a510:	dc04      	bgt.n	800a51c <__sflush_r+0x1c>
 800a512:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a514:	2a00      	cmp	r2, #0
 800a516:	dc01      	bgt.n	800a51c <__sflush_r+0x1c>
 800a518:	2000      	movs	r0, #0
 800a51a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a51c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a51e:	2f00      	cmp	r7, #0
 800a520:	d0fa      	beq.n	800a518 <__sflush_r+0x18>
 800a522:	2200      	movs	r2, #0
 800a524:	2180      	movs	r1, #128	; 0x80
 800a526:	682e      	ldr	r6, [r5, #0]
 800a528:	602a      	str	r2, [r5, #0]
 800a52a:	001a      	movs	r2, r3
 800a52c:	0149      	lsls	r1, r1, #5
 800a52e:	400a      	ands	r2, r1
 800a530:	420b      	tst	r3, r1
 800a532:	d034      	beq.n	800a59e <__sflush_r+0x9e>
 800a534:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	075b      	lsls	r3, r3, #29
 800a53a:	d506      	bpl.n	800a54a <__sflush_r+0x4a>
 800a53c:	6863      	ldr	r3, [r4, #4]
 800a53e:	1ac0      	subs	r0, r0, r3
 800a540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <__sflush_r+0x4a>
 800a546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a548:	1ac0      	subs	r0, r0, r3
 800a54a:	0002      	movs	r2, r0
 800a54c:	6a21      	ldr	r1, [r4, #32]
 800a54e:	2300      	movs	r3, #0
 800a550:	0028      	movs	r0, r5
 800a552:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a554:	47b8      	blx	r7
 800a556:	89a1      	ldrh	r1, [r4, #12]
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d106      	bne.n	800a56a <__sflush_r+0x6a>
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	2b1d      	cmp	r3, #29
 800a560:	d831      	bhi.n	800a5c6 <__sflush_r+0xc6>
 800a562:	4a2c      	ldr	r2, [pc, #176]	; (800a614 <__sflush_r+0x114>)
 800a564:	40da      	lsrs	r2, r3
 800a566:	07d3      	lsls	r3, r2, #31
 800a568:	d52d      	bpl.n	800a5c6 <__sflush_r+0xc6>
 800a56a:	2300      	movs	r3, #0
 800a56c:	6063      	str	r3, [r4, #4]
 800a56e:	6923      	ldr	r3, [r4, #16]
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	04cb      	lsls	r3, r1, #19
 800a574:	d505      	bpl.n	800a582 <__sflush_r+0x82>
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d102      	bne.n	800a580 <__sflush_r+0x80>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d100      	bne.n	800a582 <__sflush_r+0x82>
 800a580:	6560      	str	r0, [r4, #84]	; 0x54
 800a582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a584:	602e      	str	r6, [r5, #0]
 800a586:	2900      	cmp	r1, #0
 800a588:	d0c6      	beq.n	800a518 <__sflush_r+0x18>
 800a58a:	0023      	movs	r3, r4
 800a58c:	3344      	adds	r3, #68	; 0x44
 800a58e:	4299      	cmp	r1, r3
 800a590:	d002      	beq.n	800a598 <__sflush_r+0x98>
 800a592:	0028      	movs	r0, r5
 800a594:	f7ff fac8 	bl	8009b28 <_free_r>
 800a598:	2000      	movs	r0, #0
 800a59a:	6360      	str	r0, [r4, #52]	; 0x34
 800a59c:	e7bd      	b.n	800a51a <__sflush_r+0x1a>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	0028      	movs	r0, r5
 800a5a2:	6a21      	ldr	r1, [r4, #32]
 800a5a4:	47b8      	blx	r7
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	d1c5      	bne.n	800a536 <__sflush_r+0x36>
 800a5aa:	682b      	ldr	r3, [r5, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0c2      	beq.n	800a536 <__sflush_r+0x36>
 800a5b0:	2b1d      	cmp	r3, #29
 800a5b2:	d001      	beq.n	800a5b8 <__sflush_r+0xb8>
 800a5b4:	2b16      	cmp	r3, #22
 800a5b6:	d101      	bne.n	800a5bc <__sflush_r+0xbc>
 800a5b8:	602e      	str	r6, [r5, #0]
 800a5ba:	e7ad      	b.n	800a518 <__sflush_r+0x18>
 800a5bc:	2340      	movs	r3, #64	; 0x40
 800a5be:	89a2      	ldrh	r2, [r4, #12]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	e7a9      	b.n	800a51a <__sflush_r+0x1a>
 800a5c6:	2340      	movs	r3, #64	; 0x40
 800a5c8:	430b      	orrs	r3, r1
 800a5ca:	e7fa      	b.n	800a5c2 <__sflush_r+0xc2>
 800a5cc:	690f      	ldr	r7, [r1, #16]
 800a5ce:	2f00      	cmp	r7, #0
 800a5d0:	d0a2      	beq.n	800a518 <__sflush_r+0x18>
 800a5d2:	680a      	ldr	r2, [r1, #0]
 800a5d4:	600f      	str	r7, [r1, #0]
 800a5d6:	1bd2      	subs	r2, r2, r7
 800a5d8:	9201      	str	r2, [sp, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	079b      	lsls	r3, r3, #30
 800a5de:	d100      	bne.n	800a5e2 <__sflush_r+0xe2>
 800a5e0:	694a      	ldr	r2, [r1, #20]
 800a5e2:	60a2      	str	r2, [r4, #8]
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	dc00      	bgt.n	800a5ec <__sflush_r+0xec>
 800a5ea:	e795      	b.n	800a518 <__sflush_r+0x18>
 800a5ec:	003a      	movs	r2, r7
 800a5ee:	0028      	movs	r0, r5
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	6a21      	ldr	r1, [r4, #32]
 800a5f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5f6:	47b0      	blx	r6
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	dc06      	bgt.n	800a60a <__sflush_r+0x10a>
 800a5fc:	2340      	movs	r3, #64	; 0x40
 800a5fe:	2001      	movs	r0, #1
 800a600:	89a2      	ldrh	r2, [r4, #12]
 800a602:	4240      	negs	r0, r0
 800a604:	4313      	orrs	r3, r2
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	e787      	b.n	800a51a <__sflush_r+0x1a>
 800a60a:	9b01      	ldr	r3, [sp, #4]
 800a60c:	183f      	adds	r7, r7, r0
 800a60e:	1a1b      	subs	r3, r3, r0
 800a610:	9301      	str	r3, [sp, #4]
 800a612:	e7e7      	b.n	800a5e4 <__sflush_r+0xe4>
 800a614:	20400001 	.word	0x20400001

0800a618 <_fflush_r>:
 800a618:	690b      	ldr	r3, [r1, #16]
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	0005      	movs	r5, r0
 800a61e:	000c      	movs	r4, r1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d102      	bne.n	800a62a <_fflush_r+0x12>
 800a624:	2500      	movs	r5, #0
 800a626:	0028      	movs	r0, r5
 800a628:	bd70      	pop	{r4, r5, r6, pc}
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d004      	beq.n	800a638 <_fflush_r+0x20>
 800a62e:	6983      	ldr	r3, [r0, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <_fflush_r+0x20>
 800a634:	f000 f892 	bl	800a75c <__sinit>
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <_fflush_r+0x74>)
 800a63a:	429c      	cmp	r4, r3
 800a63c:	d11b      	bne.n	800a676 <_fflush_r+0x5e>
 800a63e:	686c      	ldr	r4, [r5, #4]
 800a640:	220c      	movs	r2, #12
 800a642:	5ea3      	ldrsh	r3, [r4, r2]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0ed      	beq.n	800a624 <_fflush_r+0xc>
 800a648:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a64a:	07d2      	lsls	r2, r2, #31
 800a64c:	d404      	bmi.n	800a658 <_fflush_r+0x40>
 800a64e:	059b      	lsls	r3, r3, #22
 800a650:	d402      	bmi.n	800a658 <_fflush_r+0x40>
 800a652:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a654:	f000 f923 	bl	800a89e <__retarget_lock_acquire_recursive>
 800a658:	0028      	movs	r0, r5
 800a65a:	0021      	movs	r1, r4
 800a65c:	f7ff ff50 	bl	800a500 <__sflush_r>
 800a660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a662:	0005      	movs	r5, r0
 800a664:	07db      	lsls	r3, r3, #31
 800a666:	d4de      	bmi.n	800a626 <_fflush_r+0xe>
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	059b      	lsls	r3, r3, #22
 800a66c:	d4db      	bmi.n	800a626 <_fflush_r+0xe>
 800a66e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a670:	f000 f916 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a674:	e7d7      	b.n	800a626 <_fflush_r+0xe>
 800a676:	4b06      	ldr	r3, [pc, #24]	; (800a690 <_fflush_r+0x78>)
 800a678:	429c      	cmp	r4, r3
 800a67a:	d101      	bne.n	800a680 <_fflush_r+0x68>
 800a67c:	68ac      	ldr	r4, [r5, #8]
 800a67e:	e7df      	b.n	800a640 <_fflush_r+0x28>
 800a680:	4b04      	ldr	r3, [pc, #16]	; (800a694 <_fflush_r+0x7c>)
 800a682:	429c      	cmp	r4, r3
 800a684:	d1dc      	bne.n	800a640 <_fflush_r+0x28>
 800a686:	68ec      	ldr	r4, [r5, #12]
 800a688:	e7da      	b.n	800a640 <_fflush_r+0x28>
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	0800b46c 	.word	0x0800b46c
 800a690:	0800b48c 	.word	0x0800b48c
 800a694:	0800b44c 	.word	0x0800b44c

0800a698 <std>:
 800a698:	2300      	movs	r3, #0
 800a69a:	b510      	push	{r4, lr}
 800a69c:	0004      	movs	r4, r0
 800a69e:	6003      	str	r3, [r0, #0]
 800a6a0:	6043      	str	r3, [r0, #4]
 800a6a2:	6083      	str	r3, [r0, #8]
 800a6a4:	8181      	strh	r1, [r0, #12]
 800a6a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a6a8:	0019      	movs	r1, r3
 800a6aa:	81c2      	strh	r2, [r0, #14]
 800a6ac:	6103      	str	r3, [r0, #16]
 800a6ae:	6143      	str	r3, [r0, #20]
 800a6b0:	6183      	str	r3, [r0, #24]
 800a6b2:	2208      	movs	r2, #8
 800a6b4:	305c      	adds	r0, #92	; 0x5c
 800a6b6:	f7fd fb09 	bl	8007ccc <memset>
 800a6ba:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <std+0x38>)
 800a6bc:	6263      	str	r3, [r4, #36]	; 0x24
 800a6be:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <std+0x3c>)
 800a6c0:	6224      	str	r4, [r4, #32]
 800a6c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6c4:	4b04      	ldr	r3, [pc, #16]	; (800a6d8 <std+0x40>)
 800a6c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6c8:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <std+0x44>)
 800a6ca:	6323      	str	r3, [r4, #48]	; 0x30
 800a6cc:	bd10      	pop	{r4, pc}
 800a6ce:	46c0      	nop			; (mov r8, r8)
 800a6d0:	0800aa21 	.word	0x0800aa21
 800a6d4:	0800aa49 	.word	0x0800aa49
 800a6d8:	0800aa81 	.word	0x0800aa81
 800a6dc:	0800aaad 	.word	0x0800aaad

0800a6e0 <_cleanup_r>:
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	4902      	ldr	r1, [pc, #8]	; (800a6ec <_cleanup_r+0xc>)
 800a6e4:	f000 f8ba 	bl	800a85c <_fwalk_reent>
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	0800a619 	.word	0x0800a619

0800a6f0 <__sfmoreglue>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	2568      	movs	r5, #104	; 0x68
 800a6f4:	1e4a      	subs	r2, r1, #1
 800a6f6:	4355      	muls	r5, r2
 800a6f8:	000e      	movs	r6, r1
 800a6fa:	0029      	movs	r1, r5
 800a6fc:	3174      	adds	r1, #116	; 0x74
 800a6fe:	f7ff fa5d 	bl	8009bbc <_malloc_r>
 800a702:	1e04      	subs	r4, r0, #0
 800a704:	d008      	beq.n	800a718 <__sfmoreglue+0x28>
 800a706:	2100      	movs	r1, #0
 800a708:	002a      	movs	r2, r5
 800a70a:	6001      	str	r1, [r0, #0]
 800a70c:	6046      	str	r6, [r0, #4]
 800a70e:	300c      	adds	r0, #12
 800a710:	60a0      	str	r0, [r4, #8]
 800a712:	3268      	adds	r2, #104	; 0x68
 800a714:	f7fd fada 	bl	8007ccc <memset>
 800a718:	0020      	movs	r0, r4
 800a71a:	bd70      	pop	{r4, r5, r6, pc}

0800a71c <__sfp_lock_acquire>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4802      	ldr	r0, [pc, #8]	; (800a728 <__sfp_lock_acquire+0xc>)
 800a720:	f000 f8bd 	bl	800a89e <__retarget_lock_acquire_recursive>
 800a724:	bd10      	pop	{r4, pc}
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	200006f8 	.word	0x200006f8

0800a72c <__sfp_lock_release>:
 800a72c:	b510      	push	{r4, lr}
 800a72e:	4802      	ldr	r0, [pc, #8]	; (800a738 <__sfp_lock_release+0xc>)
 800a730:	f000 f8b6 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a734:	bd10      	pop	{r4, pc}
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	200006f8 	.word	0x200006f8

0800a73c <__sinit_lock_acquire>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	4802      	ldr	r0, [pc, #8]	; (800a748 <__sinit_lock_acquire+0xc>)
 800a740:	f000 f8ad 	bl	800a89e <__retarget_lock_acquire_recursive>
 800a744:	bd10      	pop	{r4, pc}
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	200006f3 	.word	0x200006f3

0800a74c <__sinit_lock_release>:
 800a74c:	b510      	push	{r4, lr}
 800a74e:	4802      	ldr	r0, [pc, #8]	; (800a758 <__sinit_lock_release+0xc>)
 800a750:	f000 f8a6 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a754:	bd10      	pop	{r4, pc}
 800a756:	46c0      	nop			; (mov r8, r8)
 800a758:	200006f3 	.word	0x200006f3

0800a75c <__sinit>:
 800a75c:	b513      	push	{r0, r1, r4, lr}
 800a75e:	0004      	movs	r4, r0
 800a760:	f7ff ffec 	bl	800a73c <__sinit_lock_acquire>
 800a764:	69a3      	ldr	r3, [r4, #24]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <__sinit+0x14>
 800a76a:	f7ff ffef 	bl	800a74c <__sinit_lock_release>
 800a76e:	bd13      	pop	{r0, r1, r4, pc}
 800a770:	64a3      	str	r3, [r4, #72]	; 0x48
 800a772:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a774:	6523      	str	r3, [r4, #80]	; 0x50
 800a776:	4b13      	ldr	r3, [pc, #76]	; (800a7c4 <__sinit+0x68>)
 800a778:	4a13      	ldr	r2, [pc, #76]	; (800a7c8 <__sinit+0x6c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	42a3      	cmp	r3, r4
 800a782:	d101      	bne.n	800a788 <__sinit+0x2c>
 800a784:	2301      	movs	r3, #1
 800a786:	61a3      	str	r3, [r4, #24]
 800a788:	0020      	movs	r0, r4
 800a78a:	f000 f81f 	bl	800a7cc <__sfp>
 800a78e:	6060      	str	r0, [r4, #4]
 800a790:	0020      	movs	r0, r4
 800a792:	f000 f81b 	bl	800a7cc <__sfp>
 800a796:	60a0      	str	r0, [r4, #8]
 800a798:	0020      	movs	r0, r4
 800a79a:	f000 f817 	bl	800a7cc <__sfp>
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2104      	movs	r1, #4
 800a7a2:	60e0      	str	r0, [r4, #12]
 800a7a4:	6860      	ldr	r0, [r4, #4]
 800a7a6:	f7ff ff77 	bl	800a698 <std>
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	2109      	movs	r1, #9
 800a7ae:	68a0      	ldr	r0, [r4, #8]
 800a7b0:	f7ff ff72 	bl	800a698 <std>
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	2112      	movs	r1, #18
 800a7b8:	68e0      	ldr	r0, [r4, #12]
 800a7ba:	f7ff ff6d 	bl	800a698 <std>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	61a3      	str	r3, [r4, #24]
 800a7c2:	e7d2      	b.n	800a76a <__sinit+0xe>
 800a7c4:	0800b0cc 	.word	0x0800b0cc
 800a7c8:	0800a6e1 	.word	0x0800a6e1

0800a7cc <__sfp>:
 800a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ce:	0007      	movs	r7, r0
 800a7d0:	f7ff ffa4 	bl	800a71c <__sfp_lock_acquire>
 800a7d4:	4b1f      	ldr	r3, [pc, #124]	; (800a854 <__sfp+0x88>)
 800a7d6:	681e      	ldr	r6, [r3, #0]
 800a7d8:	69b3      	ldr	r3, [r6, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d102      	bne.n	800a7e4 <__sfp+0x18>
 800a7de:	0030      	movs	r0, r6
 800a7e0:	f7ff ffbc 	bl	800a75c <__sinit>
 800a7e4:	3648      	adds	r6, #72	; 0x48
 800a7e6:	68b4      	ldr	r4, [r6, #8]
 800a7e8:	6873      	ldr	r3, [r6, #4]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	d504      	bpl.n	800a7f8 <__sfp+0x2c>
 800a7ee:	6833      	ldr	r3, [r6, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d022      	beq.n	800a83a <__sfp+0x6e>
 800a7f4:	6836      	ldr	r6, [r6, #0]
 800a7f6:	e7f6      	b.n	800a7e6 <__sfp+0x1a>
 800a7f8:	220c      	movs	r2, #12
 800a7fa:	5ea5      	ldrsh	r5, [r4, r2]
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	d11a      	bne.n	800a836 <__sfp+0x6a>
 800a800:	0020      	movs	r0, r4
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <__sfp+0x8c>)
 800a804:	3058      	adds	r0, #88	; 0x58
 800a806:	60e3      	str	r3, [r4, #12]
 800a808:	6665      	str	r5, [r4, #100]	; 0x64
 800a80a:	f000 f847 	bl	800a89c <__retarget_lock_init_recursive>
 800a80e:	f7ff ff8d 	bl	800a72c <__sfp_lock_release>
 800a812:	0020      	movs	r0, r4
 800a814:	2208      	movs	r2, #8
 800a816:	0029      	movs	r1, r5
 800a818:	6025      	str	r5, [r4, #0]
 800a81a:	60a5      	str	r5, [r4, #8]
 800a81c:	6065      	str	r5, [r4, #4]
 800a81e:	6125      	str	r5, [r4, #16]
 800a820:	6165      	str	r5, [r4, #20]
 800a822:	61a5      	str	r5, [r4, #24]
 800a824:	305c      	adds	r0, #92	; 0x5c
 800a826:	f7fd fa51 	bl	8007ccc <memset>
 800a82a:	6365      	str	r5, [r4, #52]	; 0x34
 800a82c:	63a5      	str	r5, [r4, #56]	; 0x38
 800a82e:	64a5      	str	r5, [r4, #72]	; 0x48
 800a830:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a832:	0020      	movs	r0, r4
 800a834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a836:	3468      	adds	r4, #104	; 0x68
 800a838:	e7d7      	b.n	800a7ea <__sfp+0x1e>
 800a83a:	2104      	movs	r1, #4
 800a83c:	0038      	movs	r0, r7
 800a83e:	f7ff ff57 	bl	800a6f0 <__sfmoreglue>
 800a842:	1e04      	subs	r4, r0, #0
 800a844:	6030      	str	r0, [r6, #0]
 800a846:	d1d5      	bne.n	800a7f4 <__sfp+0x28>
 800a848:	f7ff ff70 	bl	800a72c <__sfp_lock_release>
 800a84c:	230c      	movs	r3, #12
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	e7ef      	b.n	800a832 <__sfp+0x66>
 800a852:	46c0      	nop			; (mov r8, r8)
 800a854:	0800b0cc 	.word	0x0800b0cc
 800a858:	ffff0001 	.word	0xffff0001

0800a85c <_fwalk_reent>:
 800a85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a85e:	0004      	movs	r4, r0
 800a860:	0006      	movs	r6, r0
 800a862:	2700      	movs	r7, #0
 800a864:	9101      	str	r1, [sp, #4]
 800a866:	3448      	adds	r4, #72	; 0x48
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	68a5      	ldr	r5, [r4, #8]
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	9b00      	ldr	r3, [sp, #0]
 800a870:	3b01      	subs	r3, #1
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	d504      	bpl.n	800a880 <_fwalk_reent+0x24>
 800a876:	6824      	ldr	r4, [r4, #0]
 800a878:	2c00      	cmp	r4, #0
 800a87a:	d1f5      	bne.n	800a868 <_fwalk_reent+0xc>
 800a87c:	0038      	movs	r0, r7
 800a87e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a880:	89ab      	ldrh	r3, [r5, #12]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d908      	bls.n	800a898 <_fwalk_reent+0x3c>
 800a886:	220e      	movs	r2, #14
 800a888:	5eab      	ldrsh	r3, [r5, r2]
 800a88a:	3301      	adds	r3, #1
 800a88c:	d004      	beq.n	800a898 <_fwalk_reent+0x3c>
 800a88e:	0029      	movs	r1, r5
 800a890:	0030      	movs	r0, r6
 800a892:	9b01      	ldr	r3, [sp, #4]
 800a894:	4798      	blx	r3
 800a896:	4307      	orrs	r7, r0
 800a898:	3568      	adds	r5, #104	; 0x68
 800a89a:	e7e8      	b.n	800a86e <_fwalk_reent+0x12>

0800a89c <__retarget_lock_init_recursive>:
 800a89c:	4770      	bx	lr

0800a89e <__retarget_lock_acquire_recursive>:
 800a89e:	4770      	bx	lr

0800a8a0 <__retarget_lock_release_recursive>:
 800a8a0:	4770      	bx	lr
	...

0800a8a4 <__swhatbuf_r>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	000e      	movs	r6, r1
 800a8a8:	001d      	movs	r5, r3
 800a8aa:	230e      	movs	r3, #14
 800a8ac:	5ec9      	ldrsh	r1, [r1, r3]
 800a8ae:	0014      	movs	r4, r2
 800a8b0:	b096      	sub	sp, #88	; 0x58
 800a8b2:	2900      	cmp	r1, #0
 800a8b4:	da07      	bge.n	800a8c6 <__swhatbuf_r+0x22>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	89b3      	ldrh	r3, [r6, #12]
 800a8bc:	061b      	lsls	r3, r3, #24
 800a8be:	d411      	bmi.n	800a8e4 <__swhatbuf_r+0x40>
 800a8c0:	2380      	movs	r3, #128	; 0x80
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	e00f      	b.n	800a8e6 <__swhatbuf_r+0x42>
 800a8c6:	466a      	mov	r2, sp
 800a8c8:	f000 f91c 	bl	800ab04 <_fstat_r>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	dbf2      	blt.n	800a8b6 <__swhatbuf_r+0x12>
 800a8d0:	23f0      	movs	r3, #240	; 0xf0
 800a8d2:	9901      	ldr	r1, [sp, #4]
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	4019      	ands	r1, r3
 800a8d8:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <__swhatbuf_r+0x4c>)
 800a8da:	18c9      	adds	r1, r1, r3
 800a8dc:	424b      	negs	r3, r1
 800a8de:	4159      	adcs	r1, r3
 800a8e0:	6029      	str	r1, [r5, #0]
 800a8e2:	e7ed      	b.n	800a8c0 <__swhatbuf_r+0x1c>
 800a8e4:	2340      	movs	r3, #64	; 0x40
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	b016      	add	sp, #88	; 0x58
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	ffffe000 	.word	0xffffe000

0800a8f4 <__smakebuf_r>:
 800a8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8f6:	2602      	movs	r6, #2
 800a8f8:	898b      	ldrh	r3, [r1, #12]
 800a8fa:	0005      	movs	r5, r0
 800a8fc:	000c      	movs	r4, r1
 800a8fe:	4233      	tst	r3, r6
 800a900:	d006      	beq.n	800a910 <__smakebuf_r+0x1c>
 800a902:	0023      	movs	r3, r4
 800a904:	3347      	adds	r3, #71	; 0x47
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	6123      	str	r3, [r4, #16]
 800a90a:	2301      	movs	r3, #1
 800a90c:	6163      	str	r3, [r4, #20]
 800a90e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a910:	466a      	mov	r2, sp
 800a912:	ab01      	add	r3, sp, #4
 800a914:	f7ff ffc6 	bl	800a8a4 <__swhatbuf_r>
 800a918:	9900      	ldr	r1, [sp, #0]
 800a91a:	0007      	movs	r7, r0
 800a91c:	0028      	movs	r0, r5
 800a91e:	f7ff f94d 	bl	8009bbc <_malloc_r>
 800a922:	2800      	cmp	r0, #0
 800a924:	d108      	bne.n	800a938 <__smakebuf_r+0x44>
 800a926:	220c      	movs	r2, #12
 800a928:	5ea3      	ldrsh	r3, [r4, r2]
 800a92a:	059a      	lsls	r2, r3, #22
 800a92c:	d4ef      	bmi.n	800a90e <__smakebuf_r+0x1a>
 800a92e:	2203      	movs	r2, #3
 800a930:	4393      	bics	r3, r2
 800a932:	431e      	orrs	r6, r3
 800a934:	81a6      	strh	r6, [r4, #12]
 800a936:	e7e4      	b.n	800a902 <__smakebuf_r+0xe>
 800a938:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <__smakebuf_r+0x84>)
 800a93a:	62ab      	str	r3, [r5, #40]	; 0x28
 800a93c:	2380      	movs	r3, #128	; 0x80
 800a93e:	89a2      	ldrh	r2, [r4, #12]
 800a940:	6020      	str	r0, [r4, #0]
 800a942:	4313      	orrs	r3, r2
 800a944:	81a3      	strh	r3, [r4, #12]
 800a946:	9b00      	ldr	r3, [sp, #0]
 800a948:	6120      	str	r0, [r4, #16]
 800a94a:	6163      	str	r3, [r4, #20]
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00d      	beq.n	800a96e <__smakebuf_r+0x7a>
 800a952:	0028      	movs	r0, r5
 800a954:	230e      	movs	r3, #14
 800a956:	5ee1      	ldrsh	r1, [r4, r3]
 800a958:	f000 f8e6 	bl	800ab28 <_isatty_r>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d006      	beq.n	800a96e <__smakebuf_r+0x7a>
 800a960:	2203      	movs	r2, #3
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	4393      	bics	r3, r2
 800a966:	001a      	movs	r2, r3
 800a968:	2301      	movs	r3, #1
 800a96a:	4313      	orrs	r3, r2
 800a96c:	81a3      	strh	r3, [r4, #12]
 800a96e:	89a0      	ldrh	r0, [r4, #12]
 800a970:	4307      	orrs	r7, r0
 800a972:	81a7      	strh	r7, [r4, #12]
 800a974:	e7cb      	b.n	800a90e <__smakebuf_r+0x1a>
 800a976:	46c0      	nop			; (mov r8, r8)
 800a978:	0800a6e1 	.word	0x0800a6e1

0800a97c <_malloc_usable_size_r>:
 800a97c:	1f0b      	subs	r3, r1, #4
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	1f18      	subs	r0, r3, #4
 800a982:	2b00      	cmp	r3, #0
 800a984:	da01      	bge.n	800a98a <_malloc_usable_size_r+0xe>
 800a986:	580b      	ldr	r3, [r1, r0]
 800a988:	18c0      	adds	r0, r0, r3
 800a98a:	4770      	bx	lr

0800a98c <_raise_r>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	0004      	movs	r4, r0
 800a990:	000d      	movs	r5, r1
 800a992:	291f      	cmp	r1, #31
 800a994:	d904      	bls.n	800a9a0 <_raise_r+0x14>
 800a996:	2316      	movs	r3, #22
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	2001      	movs	r0, #1
 800a99c:	4240      	negs	r0, r0
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <_raise_r+0x24>
 800a9a6:	008a      	lsls	r2, r1, #2
 800a9a8:	189b      	adds	r3, r3, r2
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	2a00      	cmp	r2, #0
 800a9ae:	d108      	bne.n	800a9c2 <_raise_r+0x36>
 800a9b0:	0020      	movs	r0, r4
 800a9b2:	f000 f831 	bl	800aa18 <_getpid_r>
 800a9b6:	002a      	movs	r2, r5
 800a9b8:	0001      	movs	r1, r0
 800a9ba:	0020      	movs	r0, r4
 800a9bc:	f000 f81a 	bl	800a9f4 <_kill_r>
 800a9c0:	e7ed      	b.n	800a99e <_raise_r+0x12>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	2a01      	cmp	r2, #1
 800a9c6:	d0ea      	beq.n	800a99e <_raise_r+0x12>
 800a9c8:	1c51      	adds	r1, r2, #1
 800a9ca:	d103      	bne.n	800a9d4 <_raise_r+0x48>
 800a9cc:	2316      	movs	r3, #22
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	e7e4      	b.n	800a99e <_raise_r+0x12>
 800a9d4:	2400      	movs	r4, #0
 800a9d6:	0028      	movs	r0, r5
 800a9d8:	601c      	str	r4, [r3, #0]
 800a9da:	4790      	blx	r2
 800a9dc:	0020      	movs	r0, r4
 800a9de:	e7de      	b.n	800a99e <_raise_r+0x12>

0800a9e0 <raise>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <raise+0x10>)
 800a9e4:	0001      	movs	r1, r0
 800a9e6:	6818      	ldr	r0, [r3, #0]
 800a9e8:	f7ff ffd0 	bl	800a98c <_raise_r>
 800a9ec:	bd10      	pop	{r4, pc}
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	2000000c 	.word	0x2000000c

0800a9f4 <_kill_r>:
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	b570      	push	{r4, r5, r6, lr}
 800a9f8:	4d06      	ldr	r5, [pc, #24]	; (800aa14 <_kill_r+0x20>)
 800a9fa:	0004      	movs	r4, r0
 800a9fc:	0008      	movs	r0, r1
 800a9fe:	0011      	movs	r1, r2
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f7f9 f927 	bl	8003c54 <_kill>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d103      	bne.n	800aa12 <_kill_r+0x1e>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d000      	beq.n	800aa12 <_kill_r+0x1e>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	200006ec 	.word	0x200006ec

0800aa18 <_getpid_r>:
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	f7f9 f915 	bl	8003c48 <_getpid>
 800aa1e:	bd10      	pop	{r4, pc}

0800aa20 <__sread>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	000c      	movs	r4, r1
 800aa24:	250e      	movs	r5, #14
 800aa26:	5f49      	ldrsh	r1, [r1, r5]
 800aa28:	f000 f8a4 	bl	800ab74 <_read_r>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	db03      	blt.n	800aa38 <__sread+0x18>
 800aa30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aa32:	181b      	adds	r3, r3, r0
 800aa34:	6563      	str	r3, [r4, #84]	; 0x54
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	4a02      	ldr	r2, [pc, #8]	; (800aa44 <__sread+0x24>)
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	e7f9      	b.n	800aa36 <__sread+0x16>
 800aa42:	46c0      	nop			; (mov r8, r8)
 800aa44:	ffffefff 	.word	0xffffefff

0800aa48 <__swrite>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	001f      	movs	r7, r3
 800aa4c:	898b      	ldrh	r3, [r1, #12]
 800aa4e:	0005      	movs	r5, r0
 800aa50:	000c      	movs	r4, r1
 800aa52:	0016      	movs	r6, r2
 800aa54:	05db      	lsls	r3, r3, #23
 800aa56:	d505      	bpl.n	800aa64 <__swrite+0x1c>
 800aa58:	230e      	movs	r3, #14
 800aa5a:	5ec9      	ldrsh	r1, [r1, r3]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2302      	movs	r3, #2
 800aa60:	f000 f874 	bl	800ab4c <_lseek_r>
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	4a05      	ldr	r2, [pc, #20]	; (800aa7c <__swrite+0x34>)
 800aa68:	0028      	movs	r0, r5
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	0032      	movs	r2, r6
 800aa70:	230e      	movs	r3, #14
 800aa72:	5ee1      	ldrsh	r1, [r4, r3]
 800aa74:	003b      	movs	r3, r7
 800aa76:	f000 f81f 	bl	800aab8 <_write_r>
 800aa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa7c:	ffffefff 	.word	0xffffefff

0800aa80 <__sseek>:
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	000c      	movs	r4, r1
 800aa84:	250e      	movs	r5, #14
 800aa86:	5f49      	ldrsh	r1, [r1, r5]
 800aa88:	f000 f860 	bl	800ab4c <_lseek_r>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	1c42      	adds	r2, r0, #1
 800aa90:	d103      	bne.n	800aa9a <__sseek+0x1a>
 800aa92:	4a05      	ldr	r2, [pc, #20]	; (800aaa8 <__sseek+0x28>)
 800aa94:	4013      	ands	r3, r2
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	2280      	movs	r2, #128	; 0x80
 800aa9c:	0152      	lsls	r2, r2, #5
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	6560      	str	r0, [r4, #84]	; 0x54
 800aaa4:	e7f8      	b.n	800aa98 <__sseek+0x18>
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	ffffefff 	.word	0xffffefff

0800aaac <__sclose>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	230e      	movs	r3, #14
 800aab0:	5ec9      	ldrsh	r1, [r1, r3]
 800aab2:	f000 f815 	bl	800aae0 <_close_r>
 800aab6:	bd10      	pop	{r4, pc}

0800aab8 <_write_r>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	0004      	movs	r4, r0
 800aabc:	0008      	movs	r0, r1
 800aabe:	0011      	movs	r1, r2
 800aac0:	001a      	movs	r2, r3
 800aac2:	2300      	movs	r3, #0
 800aac4:	4d05      	ldr	r5, [pc, #20]	; (800aadc <_write_r+0x24>)
 800aac6:	602b      	str	r3, [r5, #0]
 800aac8:	f7f9 f8fd 	bl	8003cc6 <_write>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d103      	bne.n	800aad8 <_write_r+0x20>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d000      	beq.n	800aad8 <_write_r+0x20>
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	bd70      	pop	{r4, r5, r6, pc}
 800aada:	46c0      	nop			; (mov r8, r8)
 800aadc:	200006ec 	.word	0x200006ec

0800aae0 <_close_r>:
 800aae0:	2300      	movs	r3, #0
 800aae2:	b570      	push	{r4, r5, r6, lr}
 800aae4:	4d06      	ldr	r5, [pc, #24]	; (800ab00 <_close_r+0x20>)
 800aae6:	0004      	movs	r4, r0
 800aae8:	0008      	movs	r0, r1
 800aaea:	602b      	str	r3, [r5, #0]
 800aaec:	f7f9 f907 	bl	8003cfe <_close>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d103      	bne.n	800aafc <_close_r+0x1c>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d000      	beq.n	800aafc <_close_r+0x1c>
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	bd70      	pop	{r4, r5, r6, pc}
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	200006ec 	.word	0x200006ec

0800ab04 <_fstat_r>:
 800ab04:	2300      	movs	r3, #0
 800ab06:	b570      	push	{r4, r5, r6, lr}
 800ab08:	4d06      	ldr	r5, [pc, #24]	; (800ab24 <_fstat_r+0x20>)
 800ab0a:	0004      	movs	r4, r0
 800ab0c:	0008      	movs	r0, r1
 800ab0e:	0011      	movs	r1, r2
 800ab10:	602b      	str	r3, [r5, #0]
 800ab12:	f7f9 f8fe 	bl	8003d12 <_fstat>
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	d103      	bne.n	800ab22 <_fstat_r+0x1e>
 800ab1a:	682b      	ldr	r3, [r5, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d000      	beq.n	800ab22 <_fstat_r+0x1e>
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	bd70      	pop	{r4, r5, r6, pc}
 800ab24:	200006ec 	.word	0x200006ec

0800ab28 <_isatty_r>:
 800ab28:	2300      	movs	r3, #0
 800ab2a:	b570      	push	{r4, r5, r6, lr}
 800ab2c:	4d06      	ldr	r5, [pc, #24]	; (800ab48 <_isatty_r+0x20>)
 800ab2e:	0004      	movs	r4, r0
 800ab30:	0008      	movs	r0, r1
 800ab32:	602b      	str	r3, [r5, #0]
 800ab34:	f7f9 f8fb 	bl	8003d2e <_isatty>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d103      	bne.n	800ab44 <_isatty_r+0x1c>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d000      	beq.n	800ab44 <_isatty_r+0x1c>
 800ab42:	6023      	str	r3, [r4, #0]
 800ab44:	bd70      	pop	{r4, r5, r6, pc}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	200006ec 	.word	0x200006ec

0800ab4c <_lseek_r>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	0004      	movs	r4, r0
 800ab50:	0008      	movs	r0, r1
 800ab52:	0011      	movs	r1, r2
 800ab54:	001a      	movs	r2, r3
 800ab56:	2300      	movs	r3, #0
 800ab58:	4d05      	ldr	r5, [pc, #20]	; (800ab70 <_lseek_r+0x24>)
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f9 f8f0 	bl	8003d40 <_lseek>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d103      	bne.n	800ab6c <_lseek_r+0x20>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d000      	beq.n	800ab6c <_lseek_r+0x20>
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	bd70      	pop	{r4, r5, r6, pc}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	200006ec 	.word	0x200006ec

0800ab74 <_read_r>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	0004      	movs	r4, r0
 800ab78:	0008      	movs	r0, r1
 800ab7a:	0011      	movs	r1, r2
 800ab7c:	001a      	movs	r2, r3
 800ab7e:	2300      	movs	r3, #0
 800ab80:	4d05      	ldr	r5, [pc, #20]	; (800ab98 <_read_r+0x24>)
 800ab82:	602b      	str	r3, [r5, #0]
 800ab84:	f7f9 f882 	bl	8003c8c <_read>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d103      	bne.n	800ab94 <_read_r+0x20>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d000      	beq.n	800ab94 <_read_r+0x20>
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	bd70      	pop	{r4, r5, r6, pc}
 800ab96:	46c0      	nop			; (mov r8, r8)
 800ab98:	200006ec 	.word	0x200006ec

0800ab9c <atanf>:
 800ab9c:	23a1      	movs	r3, #161	; 0xa1
 800ab9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba0:	0045      	lsls	r5, r0, #1
 800aba2:	1c04      	adds	r4, r0, #0
 800aba4:	9001      	str	r0, [sp, #4]
 800aba6:	086d      	lsrs	r5, r5, #1
 800aba8:	05db      	lsls	r3, r3, #23
 800abaa:	429d      	cmp	r5, r3
 800abac:	db0f      	blt.n	800abce <atanf+0x32>
 800abae:	23ff      	movs	r3, #255	; 0xff
 800abb0:	05db      	lsls	r3, r3, #23
 800abb2:	429d      	cmp	r5, r3
 800abb4:	dd04      	ble.n	800abc0 <atanf+0x24>
 800abb6:	1c01      	adds	r1, r0, #0
 800abb8:	f7f5 fdc4 	bl	8000744 <__aeabi_fadd>
 800abbc:	1c04      	adds	r4, r0, #0
 800abbe:	e004      	b.n	800abca <atanf+0x2e>
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dd00      	ble.n	800abc8 <atanf+0x2c>
 800abc6:	e0cc      	b.n	800ad62 <atanf+0x1c6>
 800abc8:	4c67      	ldr	r4, [pc, #412]	; (800ad68 <atanf+0x1cc>)
 800abca:	1c20      	adds	r0, r4, #0
 800abcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abce:	4b67      	ldr	r3, [pc, #412]	; (800ad6c <atanf+0x1d0>)
 800abd0:	429d      	cmp	r5, r3
 800abd2:	dc0f      	bgt.n	800abf4 <atanf+0x58>
 800abd4:	23c4      	movs	r3, #196	; 0xc4
 800abd6:	059b      	lsls	r3, r3, #22
 800abd8:	429d      	cmp	r5, r3
 800abda:	da08      	bge.n	800abee <atanf+0x52>
 800abdc:	4964      	ldr	r1, [pc, #400]	; (800ad70 <atanf+0x1d4>)
 800abde:	f7f5 fdb1 	bl	8000744 <__aeabi_fadd>
 800abe2:	21fe      	movs	r1, #254	; 0xfe
 800abe4:	0589      	lsls	r1, r1, #22
 800abe6:	f7f5 fc85 	bl	80004f4 <__aeabi_fcmpgt>
 800abea:	2800      	cmp	r0, #0
 800abec:	d1ed      	bne.n	800abca <atanf+0x2e>
 800abee:	2601      	movs	r6, #1
 800abf0:	4276      	negs	r6, r6
 800abf2:	e01b      	b.n	800ac2c <atanf+0x90>
 800abf4:	f000 f8e2 	bl	800adbc <fabsf>
 800abf8:	4b5e      	ldr	r3, [pc, #376]	; (800ad74 <atanf+0x1d8>)
 800abfa:	1c04      	adds	r4, r0, #0
 800abfc:	429d      	cmp	r5, r3
 800abfe:	dc7b      	bgt.n	800acf8 <atanf+0x15c>
 800ac00:	4b5d      	ldr	r3, [pc, #372]	; (800ad78 <atanf+0x1dc>)
 800ac02:	429d      	cmp	r5, r3
 800ac04:	dc67      	bgt.n	800acd6 <atanf+0x13a>
 800ac06:	1c01      	adds	r1, r0, #0
 800ac08:	f7f5 fd9c 	bl	8000744 <__aeabi_fadd>
 800ac0c:	21fe      	movs	r1, #254	; 0xfe
 800ac0e:	0589      	lsls	r1, r1, #22
 800ac10:	f7f6 fa18 	bl	8001044 <__aeabi_fsub>
 800ac14:	2180      	movs	r1, #128	; 0x80
 800ac16:	1c05      	adds	r5, r0, #0
 800ac18:	05c9      	lsls	r1, r1, #23
 800ac1a:	1c20      	adds	r0, r4, #0
 800ac1c:	f7f5 fd92 	bl	8000744 <__aeabi_fadd>
 800ac20:	1c01      	adds	r1, r0, #0
 800ac22:	1c28      	adds	r0, r5, #0
 800ac24:	f7f5 ff2a 	bl	8000a7c <__aeabi_fdiv>
 800ac28:	2600      	movs	r6, #0
 800ac2a:	1c04      	adds	r4, r0, #0
 800ac2c:	1c21      	adds	r1, r4, #0
 800ac2e:	1c20      	adds	r0, r4, #0
 800ac30:	f7f6 f8ee 	bl	8000e10 <__aeabi_fmul>
 800ac34:	1c01      	adds	r1, r0, #0
 800ac36:	1c07      	adds	r7, r0, #0
 800ac38:	f7f6 f8ea 	bl	8000e10 <__aeabi_fmul>
 800ac3c:	494f      	ldr	r1, [pc, #316]	; (800ad7c <atanf+0x1e0>)
 800ac3e:	1c05      	adds	r5, r0, #0
 800ac40:	f7f6 f8e6 	bl	8000e10 <__aeabi_fmul>
 800ac44:	494e      	ldr	r1, [pc, #312]	; (800ad80 <atanf+0x1e4>)
 800ac46:	f7f5 fd7d 	bl	8000744 <__aeabi_fadd>
 800ac4a:	1c29      	adds	r1, r5, #0
 800ac4c:	f7f6 f8e0 	bl	8000e10 <__aeabi_fmul>
 800ac50:	494c      	ldr	r1, [pc, #304]	; (800ad84 <atanf+0x1e8>)
 800ac52:	f7f5 fd77 	bl	8000744 <__aeabi_fadd>
 800ac56:	1c29      	adds	r1, r5, #0
 800ac58:	f7f6 f8da 	bl	8000e10 <__aeabi_fmul>
 800ac5c:	494a      	ldr	r1, [pc, #296]	; (800ad88 <atanf+0x1ec>)
 800ac5e:	f7f5 fd71 	bl	8000744 <__aeabi_fadd>
 800ac62:	1c29      	adds	r1, r5, #0
 800ac64:	f7f6 f8d4 	bl	8000e10 <__aeabi_fmul>
 800ac68:	4948      	ldr	r1, [pc, #288]	; (800ad8c <atanf+0x1f0>)
 800ac6a:	f7f5 fd6b 	bl	8000744 <__aeabi_fadd>
 800ac6e:	1c29      	adds	r1, r5, #0
 800ac70:	f7f6 f8ce 	bl	8000e10 <__aeabi_fmul>
 800ac74:	4946      	ldr	r1, [pc, #280]	; (800ad90 <atanf+0x1f4>)
 800ac76:	f7f5 fd65 	bl	8000744 <__aeabi_fadd>
 800ac7a:	1c39      	adds	r1, r7, #0
 800ac7c:	f7f6 f8c8 	bl	8000e10 <__aeabi_fmul>
 800ac80:	4944      	ldr	r1, [pc, #272]	; (800ad94 <atanf+0x1f8>)
 800ac82:	1c07      	adds	r7, r0, #0
 800ac84:	1c28      	adds	r0, r5, #0
 800ac86:	f7f6 f8c3 	bl	8000e10 <__aeabi_fmul>
 800ac8a:	4943      	ldr	r1, [pc, #268]	; (800ad98 <atanf+0x1fc>)
 800ac8c:	f7f6 f9da 	bl	8001044 <__aeabi_fsub>
 800ac90:	1c29      	adds	r1, r5, #0
 800ac92:	f7f6 f8bd 	bl	8000e10 <__aeabi_fmul>
 800ac96:	4941      	ldr	r1, [pc, #260]	; (800ad9c <atanf+0x200>)
 800ac98:	f7f6 f9d4 	bl	8001044 <__aeabi_fsub>
 800ac9c:	1c29      	adds	r1, r5, #0
 800ac9e:	f7f6 f8b7 	bl	8000e10 <__aeabi_fmul>
 800aca2:	493f      	ldr	r1, [pc, #252]	; (800ada0 <atanf+0x204>)
 800aca4:	f7f6 f9ce 	bl	8001044 <__aeabi_fsub>
 800aca8:	1c29      	adds	r1, r5, #0
 800acaa:	f7f6 f8b1 	bl	8000e10 <__aeabi_fmul>
 800acae:	493d      	ldr	r1, [pc, #244]	; (800ada4 <atanf+0x208>)
 800acb0:	f7f6 f9c8 	bl	8001044 <__aeabi_fsub>
 800acb4:	1c29      	adds	r1, r5, #0
 800acb6:	f7f6 f8ab 	bl	8000e10 <__aeabi_fmul>
 800acba:	1c01      	adds	r1, r0, #0
 800acbc:	1c38      	adds	r0, r7, #0
 800acbe:	f7f5 fd41 	bl	8000744 <__aeabi_fadd>
 800acc2:	1c21      	adds	r1, r4, #0
 800acc4:	f7f6 f8a4 	bl	8000e10 <__aeabi_fmul>
 800acc8:	1c73      	adds	r3, r6, #1
 800acca:	d134      	bne.n	800ad36 <atanf+0x19a>
 800accc:	1c01      	adds	r1, r0, #0
 800acce:	1c20      	adds	r0, r4, #0
 800acd0:	f7f6 f9b8 	bl	8001044 <__aeabi_fsub>
 800acd4:	e772      	b.n	800abbc <atanf+0x20>
 800acd6:	21fe      	movs	r1, #254	; 0xfe
 800acd8:	0589      	lsls	r1, r1, #22
 800acda:	f7f6 f9b3 	bl	8001044 <__aeabi_fsub>
 800acde:	21fe      	movs	r1, #254	; 0xfe
 800ace0:	1c05      	adds	r5, r0, #0
 800ace2:	0589      	lsls	r1, r1, #22
 800ace4:	1c20      	adds	r0, r4, #0
 800ace6:	f7f5 fd2d 	bl	8000744 <__aeabi_fadd>
 800acea:	1c01      	adds	r1, r0, #0
 800acec:	1c28      	adds	r0, r5, #0
 800acee:	f7f5 fec5 	bl	8000a7c <__aeabi_fdiv>
 800acf2:	2601      	movs	r6, #1
 800acf4:	1c04      	adds	r4, r0, #0
 800acf6:	e799      	b.n	800ac2c <atanf+0x90>
 800acf8:	4b2b      	ldr	r3, [pc, #172]	; (800ada8 <atanf+0x20c>)
 800acfa:	429d      	cmp	r5, r3
 800acfc:	dc14      	bgt.n	800ad28 <atanf+0x18c>
 800acfe:	21ff      	movs	r1, #255	; 0xff
 800ad00:	0589      	lsls	r1, r1, #22
 800ad02:	f7f6 f99f 	bl	8001044 <__aeabi_fsub>
 800ad06:	21ff      	movs	r1, #255	; 0xff
 800ad08:	1c05      	adds	r5, r0, #0
 800ad0a:	0589      	lsls	r1, r1, #22
 800ad0c:	1c20      	adds	r0, r4, #0
 800ad0e:	f7f6 f87f 	bl	8000e10 <__aeabi_fmul>
 800ad12:	21fe      	movs	r1, #254	; 0xfe
 800ad14:	0589      	lsls	r1, r1, #22
 800ad16:	f7f5 fd15 	bl	8000744 <__aeabi_fadd>
 800ad1a:	1c01      	adds	r1, r0, #0
 800ad1c:	1c28      	adds	r0, r5, #0
 800ad1e:	f7f5 fead 	bl	8000a7c <__aeabi_fdiv>
 800ad22:	2602      	movs	r6, #2
 800ad24:	1c04      	adds	r4, r0, #0
 800ad26:	e781      	b.n	800ac2c <atanf+0x90>
 800ad28:	1c01      	adds	r1, r0, #0
 800ad2a:	4820      	ldr	r0, [pc, #128]	; (800adac <atanf+0x210>)
 800ad2c:	f7f5 fea6 	bl	8000a7c <__aeabi_fdiv>
 800ad30:	2603      	movs	r6, #3
 800ad32:	1c04      	adds	r4, r0, #0
 800ad34:	e77a      	b.n	800ac2c <atanf+0x90>
 800ad36:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <atanf+0x214>)
 800ad38:	00b6      	lsls	r6, r6, #2
 800ad3a:	58f1      	ldr	r1, [r6, r3]
 800ad3c:	f7f6 f982 	bl	8001044 <__aeabi_fsub>
 800ad40:	1c21      	adds	r1, r4, #0
 800ad42:	f7f6 f97f 	bl	8001044 <__aeabi_fsub>
 800ad46:	4b1b      	ldr	r3, [pc, #108]	; (800adb4 <atanf+0x218>)
 800ad48:	1c01      	adds	r1, r0, #0
 800ad4a:	58f0      	ldr	r0, [r6, r3]
 800ad4c:	f7f6 f97a 	bl	8001044 <__aeabi_fsub>
 800ad50:	9b01      	ldr	r3, [sp, #4]
 800ad52:	1c04      	adds	r4, r0, #0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	db00      	blt.n	800ad5a <atanf+0x1be>
 800ad58:	e737      	b.n	800abca <atanf+0x2e>
 800ad5a:	2380      	movs	r3, #128	; 0x80
 800ad5c:	061b      	lsls	r3, r3, #24
 800ad5e:	18c4      	adds	r4, r0, r3
 800ad60:	e733      	b.n	800abca <atanf+0x2e>
 800ad62:	4c15      	ldr	r4, [pc, #84]	; (800adb8 <atanf+0x21c>)
 800ad64:	e731      	b.n	800abca <atanf+0x2e>
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	bfc90fdb 	.word	0xbfc90fdb
 800ad6c:	3edfffff 	.word	0x3edfffff
 800ad70:	7149f2ca 	.word	0x7149f2ca
 800ad74:	3f97ffff 	.word	0x3f97ffff
 800ad78:	3f2fffff 	.word	0x3f2fffff
 800ad7c:	3c8569d7 	.word	0x3c8569d7
 800ad80:	3d4bda59 	.word	0x3d4bda59
 800ad84:	3d886b35 	.word	0x3d886b35
 800ad88:	3dba2e6e 	.word	0x3dba2e6e
 800ad8c:	3e124925 	.word	0x3e124925
 800ad90:	3eaaaaab 	.word	0x3eaaaaab
 800ad94:	bd15a221 	.word	0xbd15a221
 800ad98:	3d6ef16b 	.word	0x3d6ef16b
 800ad9c:	3d9d8795 	.word	0x3d9d8795
 800ada0:	3de38e38 	.word	0x3de38e38
 800ada4:	3e4ccccd 	.word	0x3e4ccccd
 800ada8:	401bffff 	.word	0x401bffff
 800adac:	bf800000 	.word	0xbf800000
 800adb0:	0800b4bc 	.word	0x0800b4bc
 800adb4:	0800b4ac 	.word	0x0800b4ac
 800adb8:	3fc90fdb 	.word	0x3fc90fdb

0800adbc <fabsf>:
 800adbc:	0040      	lsls	r0, r0, #1
 800adbe:	0840      	lsrs	r0, r0, #1
 800adc0:	4770      	bx	lr
	...

0800adc4 <sqrtf>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	1c05      	adds	r5, r0, #0
 800adc8:	f000 f820 	bl	800ae0c <__ieee754_sqrtf>
 800adcc:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <sqrtf+0x44>)
 800adce:	1c04      	adds	r4, r0, #0
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	b25b      	sxtb	r3, r3
 800add4:	3301      	adds	r3, #1
 800add6:	d014      	beq.n	800ae02 <sqrtf+0x3e>
 800add8:	1c29      	adds	r1, r5, #0
 800adda:	1c28      	adds	r0, r5, #0
 800addc:	f7f6 fafa 	bl	80013d4 <__aeabi_fcmpun>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d10e      	bne.n	800ae02 <sqrtf+0x3e>
 800ade4:	2100      	movs	r1, #0
 800ade6:	1c28      	adds	r0, r5, #0
 800ade8:	f7f5 fb70 	bl	80004cc <__aeabi_fcmplt>
 800adec:	2800      	cmp	r0, #0
 800adee:	d008      	beq.n	800ae02 <sqrtf+0x3e>
 800adf0:	f7fc ff42 	bl	8007c78 <__errno>
 800adf4:	2321      	movs	r3, #33	; 0x21
 800adf6:	2100      	movs	r1, #0
 800adf8:	6003      	str	r3, [r0, #0]
 800adfa:	1c08      	adds	r0, r1, #0
 800adfc:	f7f5 fe3e 	bl	8000a7c <__aeabi_fdiv>
 800ae00:	1c04      	adds	r4, r0, #0
 800ae02:	1c20      	adds	r0, r4, #0
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
 800ae06:	46c0      	nop			; (mov r8, r8)
 800ae08:	200001dc 	.word	0x200001dc

0800ae0c <__ieee754_sqrtf>:
 800ae0c:	0042      	lsls	r2, r0, #1
 800ae0e:	0003      	movs	r3, r0
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	1c04      	adds	r4, r0, #0
 800ae14:	20ff      	movs	r0, #255	; 0xff
 800ae16:	0852      	lsrs	r2, r2, #1
 800ae18:	05c0      	lsls	r0, r0, #23
 800ae1a:	4282      	cmp	r2, r0
 800ae1c:	d30a      	bcc.n	800ae34 <__ieee754_sqrtf+0x28>
 800ae1e:	1c21      	adds	r1, r4, #0
 800ae20:	1c20      	adds	r0, r4, #0
 800ae22:	f7f5 fff5 	bl	8000e10 <__aeabi_fmul>
 800ae26:	1c01      	adds	r1, r0, #0
 800ae28:	1c20      	adds	r0, r4, #0
 800ae2a:	f7f5 fc8b 	bl	8000744 <__aeabi_fadd>
 800ae2e:	1c04      	adds	r4, r0, #0
 800ae30:	1c20      	adds	r0, r4, #0
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	d0fb      	beq.n	800ae30 <__ieee754_sqrtf+0x24>
 800ae38:	2c00      	cmp	r4, #0
 800ae3a:	da07      	bge.n	800ae4c <__ieee754_sqrtf+0x40>
 800ae3c:	1c21      	adds	r1, r4, #0
 800ae3e:	1c20      	adds	r0, r4, #0
 800ae40:	f7f6 f900 	bl	8001044 <__aeabi_fsub>
 800ae44:	1c01      	adds	r1, r0, #0
 800ae46:	f7f5 fe19 	bl	8000a7c <__aeabi_fdiv>
 800ae4a:	e7f0      	b.n	800ae2e <__ieee754_sqrtf+0x22>
 800ae4c:	0022      	movs	r2, r4
 800ae4e:	15e1      	asrs	r1, r4, #23
 800ae50:	4002      	ands	r2, r0
 800ae52:	4204      	tst	r4, r0
 800ae54:	d02e      	beq.n	800aeb4 <__ieee754_sqrtf+0xa8>
 800ae56:	2280      	movs	r2, #128	; 0x80
 800ae58:	000c      	movs	r4, r1
 800ae5a:	025b      	lsls	r3, r3, #9
 800ae5c:	0a5b      	lsrs	r3, r3, #9
 800ae5e:	0412      	lsls	r2, r2, #16
 800ae60:	3c7f      	subs	r4, #127	; 0x7f
 800ae62:	4313      	orrs	r3, r2
 800ae64:	07ca      	lsls	r2, r1, #31
 800ae66:	d400      	bmi.n	800ae6a <__ieee754_sqrtf+0x5e>
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2180      	movs	r1, #128	; 0x80
 800ae6e:	2019      	movs	r0, #25
 800ae70:	0016      	movs	r6, r2
 800ae72:	1064      	asrs	r4, r4, #1
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	0449      	lsls	r1, r1, #17
 800ae78:	1875      	adds	r5, r6, r1
 800ae7a:	429d      	cmp	r5, r3
 800ae7c:	dc02      	bgt.n	800ae84 <__ieee754_sqrtf+0x78>
 800ae7e:	186e      	adds	r6, r5, r1
 800ae80:	1b5b      	subs	r3, r3, r5
 800ae82:	1852      	adds	r2, r2, r1
 800ae84:	3801      	subs	r0, #1
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	0849      	lsrs	r1, r1, #1
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d1f4      	bne.n	800ae78 <__ieee754_sqrtf+0x6c>
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <__ieee754_sqrtf+0x8c>
 800ae92:	2301      	movs	r3, #1
 800ae94:	3201      	adds	r2, #1
 800ae96:	439a      	bics	r2, r3
 800ae98:	23fc      	movs	r3, #252	; 0xfc
 800ae9a:	1052      	asrs	r2, r2, #1
 800ae9c:	059b      	lsls	r3, r3, #22
 800ae9e:	18d2      	adds	r2, r2, r3
 800aea0:	05e4      	lsls	r4, r4, #23
 800aea2:	18a4      	adds	r4, r4, r2
 800aea4:	e7c4      	b.n	800ae30 <__ieee754_sqrtf+0x24>
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	3201      	adds	r2, #1
 800aeaa:	4203      	tst	r3, r0
 800aeac:	d0fb      	beq.n	800aea6 <__ieee754_sqrtf+0x9a>
 800aeae:	3a01      	subs	r2, #1
 800aeb0:	1a89      	subs	r1, r1, r2
 800aeb2:	e7d0      	b.n	800ae56 <__ieee754_sqrtf+0x4a>
 800aeb4:	2080      	movs	r0, #128	; 0x80
 800aeb6:	0400      	lsls	r0, r0, #16
 800aeb8:	e7f7      	b.n	800aeaa <__ieee754_sqrtf+0x9e>
	...

0800aebc <_init>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	46c0      	nop			; (mov r8, r8)
 800aec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec2:	bc08      	pop	{r3}
 800aec4:	469e      	mov	lr, r3
 800aec6:	4770      	bx	lr

0800aec8 <_fini>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr
